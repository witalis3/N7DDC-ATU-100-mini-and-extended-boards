;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 03.01.2021 20:57:15
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF02FEFEE  	GOTO        24540
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Soft_I2C_Write:
;oled_control.c,376 :: 		void Soft_I2C_Write (char d) {
;oled_control.c,378 :: 		if(led_type!=0) {
0x001C	0x0102      	MOVLB       2
0x001E	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0020	0x0A00      	XORLW       0
0x0022	0xE032      	BZ          L_Soft_I2C_Write79
;oled_control.c,379 :: 		for(i=0; i<=7; i++) {
0x0024	0x6A01      	CLRF        R1 
L_Soft_I2C_Write80:
0x0026	0x5001      	MOVF        R1, 0 
0x0028	0x0807      	SUBLW       7
0x002A	0xE31C      	BNC         L_Soft_I2C_Write81
;oled_control.c,380 :: 		if(d.B7==0) Soft_I2C_Sda_Direction = 0; else  Soft_I2C_Sda_Direction = 1;
0x002C	0x0103      	MOVLB       3
0x002E	0xBF7F      	BTFSC       FARG_Soft_I2C_Write_d, 7, 1
0x0030	0xD002      	BRA         L_Soft_I2C_Write83
0x0032	0x9E93      	BCF         TRISB7_bit, BitPos(TRISB7_bit+0) 
0x0034	0xD001      	BRA         L_Soft_I2C_Write84
L_Soft_I2C_Write83:
0x0036	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
L_Soft_I2C_Write84:
;oled_control.c,381 :: 		Delay_us(5);
0x0038	0x0E06      	MOVLW       6
0x003A	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write85:
0x003C	0x2E0D      	DECFSZ      R13, 1, 0
0x003E	0xD7FE      	BRA         L_Soft_I2C_Write85
0x0040	0x0000      	NOP
;oled_control.c,382 :: 		Soft_I2C_Scl_Direction = 1;
0x0042	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,383 :: 		Delay_us(5);
0x0044	0x0E06      	MOVLW       6
0x0046	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write86:
0x0048	0x2E0D      	DECFSZ      R13, 1, 0
0x004A	0xD7FE      	BRA         L_Soft_I2C_Write86
0x004C	0x0000      	NOP
;oled_control.c,384 :: 		Soft_I2C_Scl_Direction = 0;
0x004E	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,385 :: 		Delay_us(5);
0x0050	0x0E06      	MOVLW       6
0x0052	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write87:
0x0054	0x0103      	MOVLB       3
0x0056	0x2E0D      	DECFSZ      R13, 1, 0
0x0058	0xD7FD      	BRA         L_Soft_I2C_Write87
0x005A	0x0000      	NOP
;oled_control.c,386 :: 		d = d << 1;
0x005C	0x377F      	RLCF        FARG_Soft_I2C_Write_d, 1, 1
0x005E	0x917F      	BCF         FARG_Soft_I2C_Write_d, 0, 1
;oled_control.c,379 :: 		for(i=0; i<=7; i++) {
0x0060	0x2A01      	INCF        R1, 1 
;oled_control.c,387 :: 		}
0x0062	0xD7E1      	BRA         L_Soft_I2C_Write80
L_Soft_I2C_Write81:
;oled_control.c,389 :: 		Soft_I2C_Sda_Direction = 1; //ACK
0x0064	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,390 :: 		Delay_us(5);
0x0066	0x0E06      	MOVLW       6
0x0068	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write88:
0x006A	0x2E0D      	DECFSZ      R13, 1, 0
0x006C	0xD7FE      	BRA         L_Soft_I2C_Write88
0x006E	0x0000      	NOP
;oled_control.c,391 :: 		Soft_I2C_Scl_Direction = 1;
0x0070	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,392 :: 		Delay_us(5);
0x0072	0x0E06      	MOVLW       6
0x0074	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write89:
0x0076	0x2E0D      	DECFSZ      R13, 1, 0
0x0078	0xD7FE      	BRA         L_Soft_I2C_Write89
0x007A	0x0000      	NOP
;oled_control.c,393 :: 		Soft_I2C_Scl_Direction = 0;
0x007C	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,394 :: 		Delay_us(5);
0x007E	0x0E06      	MOVLW       6
0x0080	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Write90:
0x0082	0x2E0D      	DECFSZ      R13, 1, 0
0x0084	0xD7FE      	BRA         L_Soft_I2C_Write90
0x0086	0x0000      	NOP
;oled_control.c,395 :: 		}
L_Soft_I2C_Write79:
;oled_control.c,396 :: 		}
L_end_Soft_I2C_Write:
0x0088	0x0012      	RETURN      0
; end of _Soft_I2C_Write
_Soft_I2C_Start:
;oled_control.c,363 :: 		void Soft_I2C_Start () {
;oled_control.c,364 :: 		if(led_type!=0) {
0x008A	0x0102      	MOVLB       2
0x008C	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x008E	0x0A00      	XORLW       0
0x0090	0xE018      	BZ          L_Soft_I2C_Start74
;oled_control.c,365 :: 		Soft_I2C_Scl_Direction = 1;
0x0092	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,366 :: 		Delay_us(5);
0x0094	0x0E06      	MOVLW       6
0x0096	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Start75:
0x0098	0x2E0D      	DECFSZ      R13, 1, 0
0x009A	0xD7FE      	BRA         L_Soft_I2C_Start75
0x009C	0x0000      	NOP
;oled_control.c,367 :: 		Soft_I2C_Sda_Direction = 1;
0x009E	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,368 :: 		Delay_us(5);
0x00A0	0x0E06      	MOVLW       6
0x00A2	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Start76:
0x00A4	0x2E0D      	DECFSZ      R13, 1, 0
0x00A6	0xD7FE      	BRA         L_Soft_I2C_Start76
0x00A8	0x0000      	NOP
;oled_control.c,369 :: 		Soft_I2C_Sda_Direction = 0;
0x00AA	0x9E93      	BCF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,370 :: 		Delay_us(5);
0x00AC	0x0E06      	MOVLW       6
0x00AE	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Start77:
0x00B0	0x2E0D      	DECFSZ      R13, 1, 0
0x00B2	0xD7FE      	BRA         L_Soft_I2C_Start77
0x00B4	0x0000      	NOP
;oled_control.c,371 :: 		Soft_I2C_Scl_Direction = 0;
0x00B6	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,372 :: 		Delay_us(5);
0x00B8	0x0E06      	MOVLW       6
0x00BA	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Start78:
0x00BC	0x2E0D      	DECFSZ      R13, 1, 0
0x00BE	0xD7FE      	BRA         L_Soft_I2C_Start78
0x00C0	0x0000      	NOP
;oled_control.c,373 :: 		}
L_Soft_I2C_Start74:
;oled_control.c,374 :: 		}
L_end_Soft_I2C_Start:
0x00C2	0x0012      	RETURN      0
; end of _Soft_I2C_Start
_RES032:
;__Lib_MathDouble.c,128 :: 		
;__Lib_MathDouble.c,134 :: 		
0x00C4	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,135 :: 		
0x00C6	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,136 :: 		
0x00C8	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,137 :: 		
0x00CA	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,138 :: 		
0x00CC	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,139 :: 		
0x00CE	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,141 :: 		
L_end_RES032:
0x00D0	0x0012      	RETURN      0
; end of _RES032
_Soft_I2C_Stop:
;oled_control.c,425 :: 		void Soft_I2C_Stop () {
;oled_control.c,426 :: 		if(led_type!=0) {
0x00D2	0x0102      	MOVLB       2
0x00D4	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x00D6	0x0A00      	XORLW       0
0x00D8	0xE012      	BZ          L_Soft_I2C_Stop102
;oled_control.c,427 :: 		Soft_I2C_Sda_Direction = 0;
0x00DA	0x9E93      	BCF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,428 :: 		Delay_us(5);
0x00DC	0x0E06      	MOVLW       6
0x00DE	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Stop103:
0x00E0	0x2E0D      	DECFSZ      R13, 1, 0
0x00E2	0xD7FE      	BRA         L_Soft_I2C_Stop103
0x00E4	0x0000      	NOP
;oled_control.c,429 :: 		Soft_I2C_Scl_Direction = 1;
0x00E6	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,430 :: 		Delay_us(5);
0x00E8	0x0E06      	MOVLW       6
0x00EA	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Stop104:
0x00EC	0x2E0D      	DECFSZ      R13, 1, 0
0x00EE	0xD7FE      	BRA         L_Soft_I2C_Stop104
0x00F0	0x0000      	NOP
;oled_control.c,431 :: 		Soft_I2C_Sda_Direction = 1;
0x00F2	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,432 :: 		Delay_us(5);
0x00F4	0x0E06      	MOVLW       6
0x00F6	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Stop105:
0x00F8	0x2E0D      	DECFSZ      R13, 1, 0
0x00FA	0xD7FE      	BRA         L_Soft_I2C_Stop105
0x00FC	0x0000      	NOP
;oled_control.c,433 :: 		}
L_Soft_I2C_Stop102:
;oled_control.c,434 :: 		}
L_end_Soft_I2C_Stop:
0x00FE	0x0012      	RETURN      0
; end of _Soft_I2C_Stop
_set_addressing:
;oled_control.c,230 :: 		void set_addressing (char pagenum, char c_start) {
;oled_control.c,232 :: 		c = c_start + oled_shift;
0x0100	0x0102      	MOVLB       2
0x0102	0x51CB      	MOVF        oled_control_oled_shift, 0, 1
0x0104	0x0103      	MOVLB       3
0x0106	0x257B      	ADDWF       FARG_set_addressing_c_start, 0, 1
0x0108	0x6F7E      	MOVWF       set_addressing_c_L0, 1
;oled_control.c,233 :: 		Soft_I2C_Start();
0x010A	0xDFBF      	RCALL       _Soft_I2C_Start
;oled_control.c,234 :: 		Soft_I2C_Write(led_addr);             // device addres
0x010C	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x0110	0xDF85      	RCALL       _Soft_I2C_Write
;oled_control.c,235 :: 		Soft_I2C_Write(0);              // 0 - continious mode, command; 64 - Co, data
0x0112	0x0103      	MOVLB       3
0x0114	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x0116	0xDF82      	RCALL       _Soft_I2C_Write
;oled_control.c,236 :: 		Soft_I2C_Write(0xB0 + pagenum);  // set page number
0x0118	0x0103      	MOVLB       3
0x011A	0x517A      	MOVF        FARG_set_addressing_pagenum, 0, 1
0x011C	0x0FB0      	ADDLW       176
0x011E	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x0120	0xDF7D      	RCALL       _Soft_I2C_Write
;oled_control.c,238 :: 		if (c <= 15) { a = c; b = 0; }
0x0122	0x0103      	MOVLB       3
0x0124	0x517E      	MOVF        set_addressing_c_L0, 0, 1
0x0126	0x080F      	SUBLW       15
0x0128	0xE304      	BNC         L_set_addressing41
0x012A	0xF37CC37E  	MOVFF       set_addressing_c_L0, set_addressing_a_L0
0x012E	0x6B7D      	CLRF        set_addressing_b_L0, 1
0x0130	0xD019      	BRA         L_set_addressing42
L_set_addressing41:
;oled_control.c,239 :: 		else { b = c / 16; a = c - b * 16; }
0x0132	0xF002C37E  	MOVFF       set_addressing_c_L0, R2
0x0136	0x3202      	RRCF        R2, 1 
0x0138	0x9E02      	BCF         R2, 7 
0x013A	0x3202      	RRCF        R2, 1 
0x013C	0x9E02      	BCF         R2, 7 
0x013E	0x3202      	RRCF        R2, 1 
0x0140	0x9E02      	BCF         R2, 7 
0x0142	0x3202      	RRCF        R2, 1 
0x0144	0x9E02      	BCF         R2, 7 
0x0146	0xF37DC002  	MOVFF       R2, set_addressing_b_L0
0x014A	0xF000C002  	MOVFF       R2, R0
0x014E	0x3600      	RLCF        R0, 1 
0x0150	0x9000      	BCF         R0, 0 
0x0152	0x3600      	RLCF        R0, 1 
0x0154	0x9000      	BCF         R0, 0 
0x0156	0x3600      	RLCF        R0, 1 
0x0158	0x9000      	BCF         R0, 0 
0x015A	0x3600      	RLCF        R0, 1 
0x015C	0x9000      	BCF         R0, 0 
0x015E	0x5000      	MOVF        R0, 0 
0x0160	0x5D7E      	SUBWF       set_addressing_c_L0, 0, 1
0x0162	0x6F7C      	MOVWF       set_addressing_a_L0, 1
L_set_addressing42:
;oled_control.c,240 :: 		Soft_I2C_Write (a);        // set lower nibble of start address
0x0164	0xF37FC37C  	MOVFF       set_addressing_a_L0, FARG_Soft_I2C_Write_d
0x0168	0xDF59      	RCALL       _Soft_I2C_Write
;oled_control.c,241 :: 		Soft_I2C_Write (0x10 + b); // set higher nibble of start address
0x016A	0x0103      	MOVLB       3
0x016C	0x517D      	MOVF        set_addressing_b_L0, 0, 1
0x016E	0x0F10      	ADDLW       16
0x0170	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x0172	0xDF54      	RCALL       _Soft_I2C_Write
;oled_control.c,243 :: 		Soft_I2C_Start();
0x0174	0xDF8A      	RCALL       _Soft_I2C_Start
;oled_control.c,244 :: 		Soft_I2C_Write(led_addr);        // device addres
0x0176	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x017A	0xDF50      	RCALL       _Soft_I2C_Write
;oled_control.c,245 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x017C	0x0E40      	MOVLW       64
0x017E	0x0103      	MOVLB       3
0x0180	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x0182	0xDF4C      	RCALL       _Soft_I2C_Write
;oled_control.c,246 :: 		}
L_end_set_addressing:
0x0184	0x0012      	RETURN      0
; end of _set_addressing
_SETFUN32:
;__Lib_MathDouble.c,144 :: 		
;__Lib_MathDouble.c,152 :: 		
0x0186	0x840B      	BSF         R11, 2, 0
;__Lib_MathDouble.c,153 :: 		
0x0188	0xAE0B      	BTFSS       R11, 7, 0
;__Lib_MathDouble.c,154 :: 		
0x018A	0xF000EFCE  	GOTO        SETFUN32EEE
;__Lib_MathDouble.c,156 :: 		
0x018E	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,157 :: 		
0x0190	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,158 :: 		
0x0192	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,159 :: 		
0x0194	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,160 :: 		
0x0196	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,161 :: 		
0x0198	0x360A      	RLCF        R10, 1, 0
;__Lib_MathDouble.c,162 :: 		
0x019A	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,163 :: 		
SETFUN32EEE:
;__Lib_MathDouble.c,164 :: 		
0x019C	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,166 :: 		
L_end_SETFUN32:
0x019E	0x0012      	RETURN      0
; end of _SETFUN32
_FIXSIGN32:
;__Lib_MathDouble.c,117 :: 		
;__Lib_MathDouble.c,121 :: 		
0x01A0	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,122 :: 		
0x01A2	0x9E02      	BCF         R2, 7, 0
;__Lib_MathDouble.c,123 :: 		
0x01A4	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,125 :: 		
L_end_FIXSIGN32:
0x01A6	0x0012      	RETURN      0
; end of _FIXSIGN32
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x01A8	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x01AA	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x01AC	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x01AE	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x01B0	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x01B2	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x01B4	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x01B6	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x01B8	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x01BA	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x01BC	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x01BE	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x01C0	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x01C2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x01C4	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x01C6	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x01C8	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x01CA	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x01CC	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x01CE	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x01D0	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x01D2	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x01D4	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x01D6	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x01D8	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x01DA	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x01DC	0x0012      	RETURN      0
; end of _Div_16X16_U
_SETFOV32:
;__Lib_MathDouble.c,82 :: 		
;__Lib_MathDouble.c,90 :: 		
0x01DE	0x820B      	BSF         R11, 1, 0
;__Lib_MathDouble.c,91 :: 		
0x01E0	0xAE0B      	BTFSS       R11, 7, 0
;__Lib_MathDouble.c,92 :: 		
0x01E2	0xF000EFF9  	GOTO        SETFOV32EEE
;__Lib_MathDouble.c,94 :: 		
0x01E6	0x6803      	SETF        R3, 0
;__Lib_MathDouble.c,95 :: 		
0x01E8	0x6802      	SETF        R2, 0
;__Lib_MathDouble.c,96 :: 		
0x01EA	0x6801      	SETF        R1, 0
;__Lib_MathDouble.c,97 :: 		
0x01EC	0x6800      	SETF        R0, 0
;__Lib_MathDouble.c,98 :: 		
0x01EE	0x360A      	RLCF        R10, 1, 0
;__Lib_MathDouble.c,99 :: 		
0x01F0	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,100 :: 		
SETFOV32EEE:
;__Lib_MathDouble.c,101 :: 		
0x01F2	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,103 :: 		
L_end_SETFOV32:
0x01F4	0x0012      	RETURN      0
; end of _SETFOV32
_SETIOV3224:
;__Lib_MathDouble.c,530 :: 		
;__Lib_MathDouble.c,537 :: 		
0x01F6	0x800B      	BSF         R11, 0, 0
;__Lib_MathDouble.c,538 :: 		
0x01F8	0xAE0B      	BTFSS       R11, 7, 0
;__Lib_MathDouble.c,539 :: 		
0x01FA	0xF001EF07  	GOTO        SETIOV3224EEE
;__Lib_MathDouble.c,541 :: 		
0x01FE	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,542 :: 		
0x0200	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,543 :: 		
0x0202	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,544 :: 		
0x0204	0x6E02      	MOVWF       R2, 0
;__Lib_MathDouble.c,545 :: 		
0x0206	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,546 :: 		
0x0208	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,547 :: 		
0x020A	0x360A      	RLCF        R10, 1, 0
;__Lib_MathDouble.c,548 :: 		
0x020C	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,549 :: 		
SETIOV3224EEE:
;__Lib_MathDouble.c,550 :: 		
0x020E	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,552 :: 		
L_end_SETIOV3224:
0x0210	0x0012      	RETURN      0
; end of _SETIOV3224
_WordToStr:
;__Lib_Conversions.c,98 :: 		
;__Lib_Conversions.c,103 :: 		
0x0212	0x0103      	MOVLB       3
0x0214	0x6B74      	CLRF        WordToStr_len_L0, 1
L_WordToStr11:
0x0216	0x0E05      	MOVLW       5
0x0218	0x5D74      	SUBWF       WordToStr_len_L0, 0, 1
0x021A	0xE20A      	BC          L_WordToStr12
;__Lib_Conversions.c,104 :: 		
0x021C	0x5174      	MOVF        WordToStr_len_L0, 0, 1
0x021E	0x2572      	ADDWF       FARG_WordToStr_output, 0, 1
0x0220	0x6EE1      	MOVWF       FSR1L 
0x0222	0x0E00      	MOVLW       0
0x0224	0x2173      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0226	0x6EE2      	MOVWF       FSR1L+1 
0x0228	0x0E20      	MOVLW       32
0x022A	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,103 :: 		
0x022C	0x2B74      	INCF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,104 :: 		
0x022E	0xD7F3      	BRA         L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c,105 :: 		
0x0230	0x5174      	MOVF        WordToStr_len_L0, 0, 1
0x0232	0x2572      	ADDWF       FARG_WordToStr_output, 0, 1
0x0234	0x6EE1      	MOVWF       FSR1L 
0x0236	0x0E00      	MOVLW       0
0x0238	0x2173      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x023A	0x6EE2      	MOVWF       FSR1L+1 
0x023C	0x6AE6      	CLRF        POSTINC1 
0x023E	0x0774      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,107 :: 		
L_WordToStr14:
;__Lib_Conversions.c,108 :: 		
0x0240	0x5174      	MOVF        WordToStr_len_L0, 0, 1
0x0242	0x2572      	ADDWF       FARG_WordToStr_output, 0, 1
0x0244	0x6F75      	MOVWF       FLOC__WordToStr, 1
0x0246	0x0E00      	MOVLW       0
0x0248	0x2173      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x024A	0x6F76      	MOVWF       FLOC__WordToStr+1, 1
0x024C	0x0E0A      	MOVLW       10
0x024E	0x6E04      	MOVWF       R4 
0x0250	0x0E00      	MOVLW       0
0x0252	0x6E05      	MOVWF       R5 
0x0254	0xF000C370  	MOVFF       FARG_WordToStr_input, R0
0x0258	0xF001C371  	MOVFF       FARG_WordToStr_input+1, R1
0x025C	0xDFA5      	RCALL       _Div_16X16_U
0x025E	0xF000C008  	MOVFF       R8, R0
0x0262	0xF001C009  	MOVFF       R9, R1
0x0266	0x0E30      	MOVLW       48
0x0268	0x2600      	ADDWF       R0, 1 
0x026A	0xFFE1C375  	MOVFF       FLOC__WordToStr, FSR1L
0x026E	0xFFE2C376  	MOVFF       FLOC__WordToStr+1, FSR1H
0x0272	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,109 :: 		
0x0276	0x0E0A      	MOVLW       10
0x0278	0x6E04      	MOVWF       R4 
0x027A	0x0E00      	MOVLW       0
0x027C	0x6E05      	MOVWF       R5 
0x027E	0xF000C370  	MOVFF       FARG_WordToStr_input, R0
0x0282	0xF001C371  	MOVFF       FARG_WordToStr_input+1, R1
0x0286	0xDF90      	RCALL       _Div_16X16_U
0x0288	0xF370C000  	MOVFF       R0, FARG_WordToStr_input
0x028C	0xF371C001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,110 :: 		
0x0290	0x0E00      	MOVLW       0
0x0292	0x1801      	XORWF       R1, 0 
0x0294	0xE102      	BNZ         L__WordToStr379
0x0296	0x0E00      	MOVLW       0
0x0298	0x1800      	XORWF       R0, 0 
L__WordToStr379:
0x029A	0xE101      	BNZ         L_WordToStr16
;__Lib_Conversions.c,111 :: 		
0x029C	0xD002      	BRA         L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c,112 :: 		
0x029E	0x0774      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,113 :: 		
0x02A0	0xD7CF      	BRA         L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c,114 :: 		
L_end_WordToStr:
0x02A2	0x0012      	RETURN      0
; end of _WordToStr
_oled_wr_str:
;oled_control.c,271 :: 		void oled_wr_str (char col, char page, char str[], char leng ) {  //    128*32 or 128*64 OLED
;oled_control.c,273 :: 		Soft_I2C_Start();
0x02A4	0xDEF2      	RCALL       _Soft_I2C_Start
;oled_control.c,274 :: 		Soft_I2C_Write(led_addr);       // device addres
0x02A6	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x02AA	0xDEB8      	RCALL       _Soft_I2C_Write
;oled_control.c,275 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x02AC	0x0E40      	MOVLW       64
0x02AE	0x0103      	MOVLB       3
0x02B0	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x02B2	0xDEB4      	RCALL       _Soft_I2C_Write
;oled_control.c,277 :: 		set_addressing (page, col);
0x02B4	0xF37AC371  	MOVFF       FARG_oled_wr_str_page, FARG_set_addressing_pagenum
0x02B8	0xF37BC370  	MOVFF       FARG_oled_wr_str_col, FARG_set_addressing_c_start
0x02BC	0xDF21      	RCALL       _set_addressing
;oled_control.c,279 :: 		for (i = 0; i < leng; i++) { // write string
0x02BE	0x0103      	MOVLB       3
0x02C0	0x6B75      	CLRF        oled_wr_str_i_L0, 1
L_oled_wr_str50:
0x02C2	0x5174      	MOVF        FARG_oled_wr_str_leng, 0, 1
0x02C4	0x5D75      	SUBWF       oled_wr_str_i_L0, 0, 1
0x02C6	0xB0D8      	BTFSC       STATUS, 0 
0x02C8	0xD0B3      	BRA         L_oled_wr_str51
;oled_control.c,280 :: 		if (str[i] == 0) g = 0; else g = str[i] - 32; // NULL detection
0x02CA	0x5175      	MOVF        oled_wr_str_i_L0, 0, 1
0x02CC	0x2572      	ADDWF       FARG_oled_wr_str_str, 0, 1
0x02CE	0x6EE9      	MOVWF       FSR0L 
0x02D0	0x0E00      	MOVLW       0
0x02D2	0x2173      	ADDWFC      FARG_oled_wr_str_str+1, 0, 1
0x02D4	0x6EEA      	MOVWF       FSR0L+1 
0x02D6	0x50EE      	MOVF        POSTINC0, 0 
0x02D8	0x0A00      	XORLW       0
0x02DA	0xE102      	BNZ         L_oled_wr_str53
0x02DC	0x6B77      	CLRF        oled_wr_str_g_L0, 1
0x02DE	0xD009      	BRA         L_oled_wr_str54
L_oled_wr_str53:
0x02E0	0x5175      	MOVF        oled_wr_str_i_L0, 0, 1
0x02E2	0x2572      	ADDWF       FARG_oled_wr_str_str, 0, 1
0x02E4	0x6EE9      	MOVWF       FSR0L 
0x02E6	0x0E00      	MOVLW       0
0x02E8	0x2173      	ADDWFC      FARG_oled_wr_str_str+1, 0, 1
0x02EA	0x6EEA      	MOVWF       FSR0L+1 
0x02EC	0x0E20      	MOVLW       32
0x02EE	0x5CEE      	SUBWF       POSTINC0, 0 
0x02F0	0x6F77      	MOVWF       oled_wr_str_g_L0, 1
L_oled_wr_str54:
;oled_control.c,281 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x02F2	0x6B76      	CLRF        oled_wr_str_h_L0, 1
L_oled_wr_str55:
0x02F4	0x5176      	MOVF        oled_wr_str_h_L0, 0, 1
0x02F6	0x0804      	SUBLW       4
0x02F8	0xA0D8      	BTFSS       STATUS, 0 
0x02FA	0xD092      	BRA         L_oled_wr_str56
;oled_control.c,282 :: 		w1 = font5x8[g*5+h];
0x02FC	0x0E05      	MOVLW       5
0x02FE	0x0377      	MULWF       oled_wr_str_g_L0, 1
0x0300	0xF000CFF3  	MOVFF       PRODL, R0
0x0304	0xF001CFF4  	MOVFF       PRODH, R1
0x0308	0x5176      	MOVF        oled_wr_str_h_L0, 0, 1
0x030A	0x2600      	ADDWF       R0, 1 
0x030C	0x0E00      	MOVLW       0
0x030E	0x2201      	ADDWFC      R1, 1 
0x0310	0x0EE0      	MOVLW       oled_control_font5x8
0x0312	0x2400      	ADDWF       R0, 0 
0x0314	0x6EF6      	MOVWF       TBLPTR 
0x0316	0x0E65      	MOVLW       hi_addr(oled_control_font5x8)
0x0318	0x2001      	ADDWFC      R1, 0 
0x031A	0x6EF7      	MOVWF       TBLPTR+1 
0x031C	0x0E00      	MOVLW       higher_addr(oled_control_font5x8)
0x031E	0x6EF8      	MOVWF       TBLPTR+2 
0x0320	0x0E00      	MOVLW       0
0x0322	0xBE01      	BTFSC       R1, 7 
0x0324	0x0EFF      	MOVLW       255
0x0326	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x0328	0x0009      	TBLRD*+
0x032A	0xF378CFF5  	MOVFF       TABLAT, oled_wr_str_w1_L0
;oled_control.c,283 :: 		if(page!=2 & page!=4 & page!=6) {
0x032E	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x0330	0x0A02      	XORLW       2
0x0332	0x0E00      	MOVLW       0
0x0334	0xA4D8      	BTFSS       STATUS, 2 
0x0336	0x0E01      	MOVLW       1
0x0338	0x6E01      	MOVWF       R1 
0x033A	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x033C	0x0A04      	XORLW       4
0x033E	0x0E00      	MOVLW       0
0x0340	0xA4D8      	BTFSS       STATUS, 2 
0x0342	0x0E01      	MOVLW       1
0x0344	0x6E00      	MOVWF       R0 
0x0346	0x5000      	MOVF        R0, 0 
0x0348	0x1601      	ANDWF       R1, 1 
0x034A	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x034C	0x0A06      	XORLW       6
0x034E	0x0E00      	MOVLW       0
0x0350	0xA4D8      	BTFSS       STATUS, 2 
0x0352	0x0E01      	MOVLW       1
0x0354	0x6E00      	MOVWF       R0 
0x0356	0x5001      	MOVF        R1, 0 
0x0358	0x1600      	ANDWF       R0, 1 
0x035A	0xE029      	BZ          L_oled_wr_str58
;oled_control.c,284 :: 		w2.B7 = w1.B3;
0x035C	0xB778      	BTFSC       oled_wr_str_w1_L0, 3, 1
0x035E	0xD002      	BRA         L__oled_wr_str115
0x0360	0x9F79      	BCF         oled_wr_str_w2_L0, 7, 1
0x0362	0xD001      	BRA         L__oled_wr_str116
L__oled_wr_str115:
0x0364	0x8F79      	BSF         oled_wr_str_w2_L0, 7, 1
L__oled_wr_str116:
;oled_control.c,285 :: 		w2.B6 = w1.B3;
0x0366	0xB778      	BTFSC       oled_wr_str_w1_L0, 3, 1
0x0368	0xD002      	BRA         L__oled_wr_str117
0x036A	0x9D79      	BCF         oled_wr_str_w2_L0, 6, 1
0x036C	0xD001      	BRA         L__oled_wr_str118
L__oled_wr_str117:
0x036E	0x8D79      	BSF         oled_wr_str_w2_L0, 6, 1
L__oled_wr_str118:
;oled_control.c,286 :: 		w2.B5 = w1.B2;
0x0370	0xB578      	BTFSC       oled_wr_str_w1_L0, 2, 1
0x0372	0xD002      	BRA         L__oled_wr_str119
0x0374	0x9B79      	BCF         oled_wr_str_w2_L0, 5, 1
0x0376	0xD001      	BRA         L__oled_wr_str120
L__oled_wr_str119:
0x0378	0x8B79      	BSF         oled_wr_str_w2_L0, 5, 1
L__oled_wr_str120:
;oled_control.c,287 :: 		w2.B4 = w1.B2;
0x037A	0xB578      	BTFSC       oled_wr_str_w1_L0, 2, 1
0x037C	0xD002      	BRA         L__oled_wr_str121
0x037E	0x9979      	BCF         oled_wr_str_w2_L0, 4, 1
0x0380	0xD001      	BRA         L__oled_wr_str122
L__oled_wr_str121:
0x0382	0x8979      	BSF         oled_wr_str_w2_L0, 4, 1
L__oled_wr_str122:
;oled_control.c,288 :: 		w2.B3 = w1.B1;
0x0384	0xB378      	BTFSC       oled_wr_str_w1_L0, 1, 1
0x0386	0xD002      	BRA         L__oled_wr_str123
0x0388	0x9779      	BCF         oled_wr_str_w2_L0, 3, 1
0x038A	0xD001      	BRA         L__oled_wr_str124
L__oled_wr_str123:
0x038C	0x8779      	BSF         oled_wr_str_w2_L0, 3, 1
L__oled_wr_str124:
;oled_control.c,289 :: 		w2.B2 = w1.B1;
0x038E	0xB378      	BTFSC       oled_wr_str_w1_L0, 1, 1
0x0390	0xD002      	BRA         L__oled_wr_str125
0x0392	0x9579      	BCF         oled_wr_str_w2_L0, 2, 1
0x0394	0xD001      	BRA         L__oled_wr_str126
L__oled_wr_str125:
0x0396	0x8579      	BSF         oled_wr_str_w2_L0, 2, 1
L__oled_wr_str126:
;oled_control.c,290 :: 		w2.B1 = w1.B0;
0x0398	0xB178      	BTFSC       oled_wr_str_w1_L0, 0, 1
0x039A	0xD002      	BRA         L__oled_wr_str127
0x039C	0x9379      	BCF         oled_wr_str_w2_L0, 1, 1
0x039E	0xD001      	BRA         L__oled_wr_str128
L__oled_wr_str127:
0x03A0	0x8379      	BSF         oled_wr_str_w2_L0, 1, 1
L__oled_wr_str128:
;oled_control.c,291 :: 		w2.B0 = w1.B0;
0x03A2	0xB178      	BTFSC       oled_wr_str_w1_L0, 0, 1
0x03A4	0xD002      	BRA         L__oled_wr_str129
0x03A6	0x9179      	BCF         oled_wr_str_w2_L0, 0, 1
0x03A8	0xD001      	BRA         L__oled_wr_str130
L__oled_wr_str129:
0x03AA	0x8179      	BSF         oled_wr_str_w2_L0, 0, 1
L__oled_wr_str130:
;oled_control.c,292 :: 		}
0x03AC	0xD020      	BRA         L_oled_wr_str59
L_oled_wr_str58:
;oled_control.c,294 :: 		w2.B7 = w1.B2;
0x03AE	0xB578      	BTFSC       oled_wr_str_w1_L0, 2, 1
0x03B0	0xD002      	BRA         L__oled_wr_str131
0x03B2	0x9F79      	BCF         oled_wr_str_w2_L0, 7, 1
0x03B4	0xD001      	BRA         L__oled_wr_str132
L__oled_wr_str131:
0x03B6	0x8F79      	BSF         oled_wr_str_w2_L0, 7, 1
L__oled_wr_str132:
;oled_control.c,295 :: 		w2.B6 = w1.B2;
0x03B8	0xB578      	BTFSC       oled_wr_str_w1_L0, 2, 1
0x03BA	0xD002      	BRA         L__oled_wr_str133
0x03BC	0x9D79      	BCF         oled_wr_str_w2_L0, 6, 1
0x03BE	0xD001      	BRA         L__oled_wr_str134
L__oled_wr_str133:
0x03C0	0x8D79      	BSF         oled_wr_str_w2_L0, 6, 1
L__oled_wr_str134:
;oled_control.c,296 :: 		w2.B5 = w1.B1;
0x03C2	0xB378      	BTFSC       oled_wr_str_w1_L0, 1, 1
0x03C4	0xD002      	BRA         L__oled_wr_str135
0x03C6	0x9B79      	BCF         oled_wr_str_w2_L0, 5, 1
0x03C8	0xD001      	BRA         L__oled_wr_str136
L__oled_wr_str135:
0x03CA	0x8B79      	BSF         oled_wr_str_w2_L0, 5, 1
L__oled_wr_str136:
;oled_control.c,297 :: 		w2.B4 = w1.B1;
0x03CC	0xB378      	BTFSC       oled_wr_str_w1_L0, 1, 1
0x03CE	0xD002      	BRA         L__oled_wr_str137
0x03D0	0x9979      	BCF         oled_wr_str_w2_L0, 4, 1
0x03D2	0xD001      	BRA         L__oled_wr_str138
L__oled_wr_str137:
0x03D4	0x8979      	BSF         oled_wr_str_w2_L0, 4, 1
L__oled_wr_str138:
;oled_control.c,298 :: 		w2.B3 = w1.B0;
0x03D6	0xB178      	BTFSC       oled_wr_str_w1_L0, 0, 1
0x03D8	0xD002      	BRA         L__oled_wr_str139
0x03DA	0x9779      	BCF         oled_wr_str_w2_L0, 3, 1
0x03DC	0xD001      	BRA         L__oled_wr_str140
L__oled_wr_str139:
0x03DE	0x8779      	BSF         oled_wr_str_w2_L0, 3, 1
L__oled_wr_str140:
;oled_control.c,299 :: 		w2.B2 = w1.B0;
0x03E0	0xB178      	BTFSC       oled_wr_str_w1_L0, 0, 1
0x03E2	0xD002      	BRA         L__oled_wr_str141
0x03E4	0x9579      	BCF         oled_wr_str_w2_L0, 2, 1
0x03E6	0xD001      	BRA         L__oled_wr_str142
L__oled_wr_str141:
0x03E8	0x8579      	BSF         oled_wr_str_w2_L0, 2, 1
L__oled_wr_str142:
;oled_control.c,300 :: 		w2.B1 = 0;
0x03EA	0x9379      	BCF         oled_wr_str_w2_L0, 1, 1
;oled_control.c,301 :: 		w2.B0 = 0;
0x03EC	0x9179      	BCF         oled_wr_str_w2_L0, 0, 1
;oled_control.c,302 :: 		}
L_oled_wr_str59:
;oled_control.c,303 :: 		Soft_I2C_Write(w2);
0x03EE	0xF37FC379  	MOVFF       oled_wr_str_w2_L0, FARG_Soft_I2C_Write_d
0x03F2	0xDE14      	RCALL       _Soft_I2C_Write
;oled_control.c,304 :: 		if(led_type==4 | led_type==5) Soft_I2C_Write(w2);   // 128*64
0x03F4	0x0102      	MOVLB       2
0x03F6	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x03F8	0x0A04      	XORLW       4
0x03FA	0x0E01      	MOVLW       1
0x03FC	0xA4D8      	BTFSS       STATUS, 2 
0x03FE	0x0E00      	MOVLW       0
0x0400	0x6E01      	MOVWF       R1 
0x0402	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0404	0x0A05      	XORLW       5
0x0406	0x0E01      	MOVLW       1
0x0408	0xA4D8      	BTFSS       STATUS, 2 
0x040A	0x0E00      	MOVLW       0
0x040C	0x6E00      	MOVWF       R0 
0x040E	0x5001      	MOVF        R1, 0 
0x0410	0x1200      	IORWF       R0, 1 
0x0412	0xE003      	BZ          L_oled_wr_str60
0x0414	0xF37FC379  	MOVFF       oled_wr_str_w2_L0, FARG_Soft_I2C_Write_d
0x0418	0xDE01      	RCALL       _Soft_I2C_Write
L_oled_wr_str60:
;oled_control.c,281 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x041A	0x0103      	MOVLB       3
0x041C	0x2B76      	INCF        oled_wr_str_h_L0, 1, 1
;oled_control.c,305 :: 		}
0x041E	0xD76A      	BRA         L_oled_wr_str55
L_oled_wr_str56:
;oled_control.c,306 :: 		Soft_I2C_Write (0);
0x0420	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x0422	0xDDFC      	RCALL       _Soft_I2C_Write
;oled_control.c,307 :: 		Soft_I2C_Write (0);
0x0424	0x0103      	MOVLB       3
0x0426	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x0428	0xDDF9      	RCALL       _Soft_I2C_Write
;oled_control.c,279 :: 		for (i = 0; i < leng; i++) { // write string
0x042A	0x0103      	MOVLB       3
0x042C	0x2B75      	INCF        oled_wr_str_i_L0, 1, 1
;oled_control.c,308 :: 		}
0x042E	0xD749      	BRA         L_oled_wr_str50
L_oled_wr_str51:
;oled_control.c,309 :: 		set_addressing (page+1, col);
0x0430	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x0432	0x0F01      	ADDLW       1
0x0434	0x6F7A      	MOVWF       FARG_set_addressing_pagenum, 1
0x0436	0xF37BC370  	MOVFF       FARG_oled_wr_str_col, FARG_set_addressing_c_start
0x043A	0xDE62      	RCALL       _set_addressing
;oled_control.c,311 :: 		for (i = 0; i < leng; i++) { // write string
0x043C	0x0103      	MOVLB       3
0x043E	0x6B75      	CLRF        oled_wr_str_i_L0, 1
L_oled_wr_str61:
0x0440	0x5174      	MOVF        FARG_oled_wr_str_leng, 0, 1
0x0442	0x5D75      	SUBWF       oled_wr_str_i_L0, 0, 1
0x0444	0xB0D8      	BTFSC       STATUS, 0 
0x0446	0xD0BB      	BRA         L_oled_wr_str62
;oled_control.c,312 :: 		if (str[i] == 0) g = 0; else g = str[i] - 32; // NULL detection
0x0448	0x5175      	MOVF        oled_wr_str_i_L0, 0, 1
0x044A	0x2572      	ADDWF       FARG_oled_wr_str_str, 0, 1
0x044C	0x6EE9      	MOVWF       FSR0L 
0x044E	0x0E00      	MOVLW       0
0x0450	0x2173      	ADDWFC      FARG_oled_wr_str_str+1, 0, 1
0x0452	0x6EEA      	MOVWF       FSR0L+1 
0x0454	0x50EE      	MOVF        POSTINC0, 0 
0x0456	0x0A00      	XORLW       0
0x0458	0xE102      	BNZ         L_oled_wr_str64
0x045A	0x6B77      	CLRF        oled_wr_str_g_L0, 1
0x045C	0xD009      	BRA         L_oled_wr_str65
L_oled_wr_str64:
0x045E	0x5175      	MOVF        oled_wr_str_i_L0, 0, 1
0x0460	0x2572      	ADDWF       FARG_oled_wr_str_str, 0, 1
0x0462	0x6EE9      	MOVWF       FSR0L 
0x0464	0x0E00      	MOVLW       0
0x0466	0x2173      	ADDWFC      FARG_oled_wr_str_str+1, 0, 1
0x0468	0x6EEA      	MOVWF       FSR0L+1 
0x046A	0x0E20      	MOVLW       32
0x046C	0x5CEE      	SUBWF       POSTINC0, 0 
0x046E	0x6F77      	MOVWF       oled_wr_str_g_L0, 1
L_oled_wr_str65:
;oled_control.c,313 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x0470	0x6B76      	CLRF        oled_wr_str_h_L0, 1
L_oled_wr_str66:
0x0472	0x5176      	MOVF        oled_wr_str_h_L0, 0, 1
0x0474	0x0804      	SUBLW       4
0x0476	0xA0D8      	BTFSS       STATUS, 0 
0x0478	0xD09A      	BRA         L_oled_wr_str67
;oled_control.c,314 :: 		w1 = font5x8[g*5+h];
0x047A	0x0E05      	MOVLW       5
0x047C	0x0377      	MULWF       oled_wr_str_g_L0, 1
0x047E	0xF000CFF3  	MOVFF       PRODL, R0
0x0482	0xF001CFF4  	MOVFF       PRODH, R1
0x0486	0x5176      	MOVF        oled_wr_str_h_L0, 0, 1
0x0488	0x2600      	ADDWF       R0, 1 
0x048A	0x0E00      	MOVLW       0
0x048C	0x2201      	ADDWFC      R1, 1 
0x048E	0x0EE0      	MOVLW       oled_control_font5x8
0x0490	0x2400      	ADDWF       R0, 0 
0x0492	0x6EF6      	MOVWF       TBLPTR 
0x0494	0x0E65      	MOVLW       hi_addr(oled_control_font5x8)
0x0496	0x2001      	ADDWFC      R1, 0 
0x0498	0x6EF7      	MOVWF       TBLPTR+1 
0x049A	0x0E00      	MOVLW       higher_addr(oled_control_font5x8)
0x049C	0x6EF8      	MOVWF       TBLPTR+2 
0x049E	0x0E00      	MOVLW       0
0x04A0	0xBE01      	BTFSC       R1, 7 
0x04A2	0x0EFF      	MOVLW       255
0x04A4	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x04A6	0x0009      	TBLRD*+
0x04A8	0xF378CFF5  	MOVFF       TABLAT, oled_wr_str_w1_L0
;oled_control.c,315 :: 		if(page!=2 & page!=4 & page!=6) {
0x04AC	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x04AE	0x0A02      	XORLW       2
0x04B0	0x0E00      	MOVLW       0
0x04B2	0xA4D8      	BTFSS       STATUS, 2 
0x04B4	0x0E01      	MOVLW       1
0x04B6	0x6E01      	MOVWF       R1 
0x04B8	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x04BA	0x0A04      	XORLW       4
0x04BC	0x0E00      	MOVLW       0
0x04BE	0xA4D8      	BTFSS       STATUS, 2 
0x04C0	0x0E01      	MOVLW       1
0x04C2	0x6E00      	MOVWF       R0 
0x04C4	0x5000      	MOVF        R0, 0 
0x04C6	0x1601      	ANDWF       R1, 1 
0x04C8	0x5171      	MOVF        FARG_oled_wr_str_page, 0, 1
0x04CA	0x0A06      	XORLW       6
0x04CC	0x0E00      	MOVLW       0
0x04CE	0xA4D8      	BTFSS       STATUS, 2 
0x04D0	0x0E01      	MOVLW       1
0x04D2	0x6E00      	MOVWF       R0 
0x04D4	0x5001      	MOVF        R1, 0 
0x04D6	0x1600      	ANDWF       R0, 1 
0x04D8	0xE029      	BZ          L_oled_wr_str69
;oled_control.c,316 :: 		w2.B7 = w1.B7;
0x04DA	0xBF78      	BTFSC       oled_wr_str_w1_L0, 7, 1
0x04DC	0xD002      	BRA         L__oled_wr_str143
0x04DE	0x9F79      	BCF         oled_wr_str_w2_L0, 7, 1
0x04E0	0xD001      	BRA         L__oled_wr_str144
L__oled_wr_str143:
0x04E2	0x8F79      	BSF         oled_wr_str_w2_L0, 7, 1
L__oled_wr_str144:
;oled_control.c,317 :: 		w2.B6 = w1.B7;
0x04E4	0xBF78      	BTFSC       oled_wr_str_w1_L0, 7, 1
0x04E6	0xD002      	BRA         L__oled_wr_str145
0x04E8	0x9D79      	BCF         oled_wr_str_w2_L0, 6, 1
0x04EA	0xD001      	BRA         L__oled_wr_str146
L__oled_wr_str145:
0x04EC	0x8D79      	BSF         oled_wr_str_w2_L0, 6, 1
L__oled_wr_str146:
;oled_control.c,318 :: 		w2.B5 = w1.B6;
0x04EE	0xBD78      	BTFSC       oled_wr_str_w1_L0, 6, 1
0x04F0	0xD002      	BRA         L__oled_wr_str147
0x04F2	0x9B79      	BCF         oled_wr_str_w2_L0, 5, 1
0x04F4	0xD001      	BRA         L__oled_wr_str148
L__oled_wr_str147:
0x04F6	0x8B79      	BSF         oled_wr_str_w2_L0, 5, 1
L__oled_wr_str148:
;oled_control.c,319 :: 		w2.B4 = w1.B6;
0x04F8	0xBD78      	BTFSC       oled_wr_str_w1_L0, 6, 1
0x04FA	0xD002      	BRA         L__oled_wr_str149
0x04FC	0x9979      	BCF         oled_wr_str_w2_L0, 4, 1
0x04FE	0xD001      	BRA         L__oled_wr_str150
L__oled_wr_str149:
0x0500	0x8979      	BSF         oled_wr_str_w2_L0, 4, 1
L__oled_wr_str150:
;oled_control.c,320 :: 		w2.B3 = w1.B5;
0x0502	0xBB78      	BTFSC       oled_wr_str_w1_L0, 5, 1
0x0504	0xD002      	BRA         L__oled_wr_str151
0x0506	0x9779      	BCF         oled_wr_str_w2_L0, 3, 1
0x0508	0xD001      	BRA         L__oled_wr_str152
L__oled_wr_str151:
0x050A	0x8779      	BSF         oled_wr_str_w2_L0, 3, 1
L__oled_wr_str152:
;oled_control.c,321 :: 		w2.B2 = w1.B5;
0x050C	0xBB78      	BTFSC       oled_wr_str_w1_L0, 5, 1
0x050E	0xD002      	BRA         L__oled_wr_str153
0x0510	0x9579      	BCF         oled_wr_str_w2_L0, 2, 1
0x0512	0xD001      	BRA         L__oled_wr_str154
L__oled_wr_str153:
0x0514	0x8579      	BSF         oled_wr_str_w2_L0, 2, 1
L__oled_wr_str154:
;oled_control.c,322 :: 		w2.B1 = w1.B4;
0x0516	0xB978      	BTFSC       oled_wr_str_w1_L0, 4, 1
0x0518	0xD002      	BRA         L__oled_wr_str155
0x051A	0x9379      	BCF         oled_wr_str_w2_L0, 1, 1
0x051C	0xD001      	BRA         L__oled_wr_str156
L__oled_wr_str155:
0x051E	0x8379      	BSF         oled_wr_str_w2_L0, 1, 1
L__oled_wr_str156:
;oled_control.c,323 :: 		w2.B0 = w1.B4; }
0x0520	0xB978      	BTFSC       oled_wr_str_w1_L0, 4, 1
0x0522	0xD002      	BRA         L__oled_wr_str157
0x0524	0x9179      	BCF         oled_wr_str_w2_L0, 0, 1
0x0526	0xD001      	BRA         L__oled_wr_str158
L__oled_wr_str157:
0x0528	0x8179      	BSF         oled_wr_str_w2_L0, 0, 1
L__oled_wr_str158:
0x052A	0xD028      	BRA         L_oled_wr_str70
L_oled_wr_str69:
;oled_control.c,325 :: 		w2.B7 = w1.B6;
0x052C	0xBD78      	BTFSC       oled_wr_str_w1_L0, 6, 1
0x052E	0xD002      	BRA         L__oled_wr_str159
0x0530	0x9F79      	BCF         oled_wr_str_w2_L0, 7, 1
0x0532	0xD001      	BRA         L__oled_wr_str160
L__oled_wr_str159:
0x0534	0x8F79      	BSF         oled_wr_str_w2_L0, 7, 1
L__oled_wr_str160:
;oled_control.c,326 :: 		w2.B6 = w1.B6;
0x0536	0xBD78      	BTFSC       oled_wr_str_w1_L0, 6, 1
0x0538	0xD002      	BRA         L__oled_wr_str161
0x053A	0x9D79      	BCF         oled_wr_str_w2_L0, 6, 1
0x053C	0xD001      	BRA         L__oled_wr_str162
L__oled_wr_str161:
0x053E	0x8D79      	BSF         oled_wr_str_w2_L0, 6, 1
L__oled_wr_str162:
;oled_control.c,327 :: 		w2.B5 = w1.B5;
0x0540	0xBB78      	BTFSC       oled_wr_str_w1_L0, 5, 1
0x0542	0xD002      	BRA         L__oled_wr_str163
0x0544	0x9B79      	BCF         oled_wr_str_w2_L0, 5, 1
0x0546	0xD001      	BRA         L__oled_wr_str164
L__oled_wr_str163:
0x0548	0x8B79      	BSF         oled_wr_str_w2_L0, 5, 1
L__oled_wr_str164:
;oled_control.c,328 :: 		w2.B4 = w1.B5;
0x054A	0xBB78      	BTFSC       oled_wr_str_w1_L0, 5, 1
0x054C	0xD002      	BRA         L__oled_wr_str165
0x054E	0x9979      	BCF         oled_wr_str_w2_L0, 4, 1
0x0550	0xD001      	BRA         L__oled_wr_str166
L__oled_wr_str165:
0x0552	0x8979      	BSF         oled_wr_str_w2_L0, 4, 1
L__oled_wr_str166:
;oled_control.c,329 :: 		w2.B3 = w1.B4;
0x0554	0xB978      	BTFSC       oled_wr_str_w1_L0, 4, 1
0x0556	0xD002      	BRA         L__oled_wr_str167
0x0558	0x9779      	BCF         oled_wr_str_w2_L0, 3, 1
0x055A	0xD001      	BRA         L__oled_wr_str168
L__oled_wr_str167:
0x055C	0x8779      	BSF         oled_wr_str_w2_L0, 3, 1
L__oled_wr_str168:
;oled_control.c,330 :: 		w2.B2 = w1.B4;
0x055E	0xB978      	BTFSC       oled_wr_str_w1_L0, 4, 1
0x0560	0xD002      	BRA         L__oled_wr_str169
0x0562	0x9579      	BCF         oled_wr_str_w2_L0, 2, 1
0x0564	0xD001      	BRA         L__oled_wr_str170
L__oled_wr_str169:
0x0566	0x8579      	BSF         oled_wr_str_w2_L0, 2, 1
L__oled_wr_str170:
;oled_control.c,331 :: 		w2.B1 = w1.B3;
0x0568	0xB778      	BTFSC       oled_wr_str_w1_L0, 3, 1
0x056A	0xD002      	BRA         L__oled_wr_str171
0x056C	0x9379      	BCF         oled_wr_str_w2_L0, 1, 1
0x056E	0xD001      	BRA         L__oled_wr_str172
L__oled_wr_str171:
0x0570	0x8379      	BSF         oled_wr_str_w2_L0, 1, 1
L__oled_wr_str172:
;oled_control.c,332 :: 		w2.B0 = w1.B3;
0x0572	0xB778      	BTFSC       oled_wr_str_w1_L0, 3, 1
0x0574	0xD002      	BRA         L__oled_wr_str173
0x0576	0x9179      	BCF         oled_wr_str_w2_L0, 0, 1
0x0578	0xD001      	BRA         L__oled_wr_str174
L__oled_wr_str173:
0x057A	0x8179      	BSF         oled_wr_str_w2_L0, 0, 1
L__oled_wr_str174:
;oled_control.c,333 :: 		}
L_oled_wr_str70:
;oled_control.c,334 :: 		Soft_I2C_Write(w2);
0x057C	0xF37FC379  	MOVFF       oled_wr_str_w2_L0, FARG_Soft_I2C_Write_d
0x0580	0xDD4D      	RCALL       _Soft_I2C_Write
;oled_control.c,335 :: 		if(led_type==4 | led_type==5) Soft_I2C_Write(w2);  // 128*64
0x0582	0x0102      	MOVLB       2
0x0584	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0586	0x0A04      	XORLW       4
0x0588	0x0E01      	MOVLW       1
0x058A	0xA4D8      	BTFSS       STATUS, 2 
0x058C	0x0E00      	MOVLW       0
0x058E	0x6E01      	MOVWF       R1 
0x0590	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0592	0x0A05      	XORLW       5
0x0594	0x0E01      	MOVLW       1
0x0596	0xA4D8      	BTFSS       STATUS, 2 
0x0598	0x0E00      	MOVLW       0
0x059A	0x6E00      	MOVWF       R0 
0x059C	0x5001      	MOVF        R1, 0 
0x059E	0x1200      	IORWF       R0, 1 
0x05A0	0xE003      	BZ          L_oled_wr_str71
0x05A2	0xF37FC379  	MOVFF       oled_wr_str_w2_L0, FARG_Soft_I2C_Write_d
0x05A6	0xDD3A      	RCALL       _Soft_I2C_Write
L_oled_wr_str71:
;oled_control.c,313 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x05A8	0x0103      	MOVLB       3
0x05AA	0x2B76      	INCF        oled_wr_str_h_L0, 1, 1
;oled_control.c,336 :: 		}
0x05AC	0xD762      	BRA         L_oled_wr_str66
L_oled_wr_str67:
;oled_control.c,337 :: 		Soft_I2C_Write (0);
0x05AE	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x05B0	0xDD35      	RCALL       _Soft_I2C_Write
;oled_control.c,338 :: 		Soft_I2C_Write (0);
0x05B2	0x0103      	MOVLB       3
0x05B4	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x05B6	0xDD32      	RCALL       _Soft_I2C_Write
;oled_control.c,311 :: 		for (i = 0; i < leng; i++) { // write string
0x05B8	0x0103      	MOVLB       3
0x05BA	0x2B75      	INCF        oled_wr_str_i_L0, 1, 1
;oled_control.c,340 :: 		}
0x05BC	0xD741      	BRA         L_oled_wr_str61
L_oled_wr_str62:
;oled_control.c,341 :: 		Soft_I2C_Stop ();
0x05BE	0xDD89      	RCALL       _Soft_I2C_Stop
;oled_control.c,342 :: 		}
L_end_oled_wr_str:
0x05C0	0x0012      	RETURN      0
; end of _oled_wr_str
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x05C2	0x0E1D      	MOVLW       29
0x05C4	0x6E0D      	MOVWF       R13, 0
L_Delay_22us1:
0x05C6	0x2E0D      	DECFSZ      R13, 1, 0
0x05C8	0xD7FE      	BRA         L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x05CA	0x0012      	RETURN      0
; end of _Delay_22us
_NRM3232:
;__Lib_MathDouble.c,455 :: 		
;__Lib_MathDouble.c,463 :: 		
0x05CC	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,464 :: 		
0x05CE	0x6A0E      	CLRF        R14, 0
;__Lib_MathDouble.c,465 :: 		
0x05D0	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,466 :: 		
0x05D2	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,467 :: 		
0x05D4	0xF002EFFF  	GOTO        NORM3232
;__Lib_MathDouble.c,468 :: 		
0x05D8	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,469 :: 		
0x05DC	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,470 :: 		
0x05E0	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,471 :: 		
0x05E2	0x860E      	BSF         R14, 3, 0
;__Lib_MathDouble.c,473 :: 		
0x05E4	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,474 :: 		
0x05E6	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,475 :: 		
0x05E8	0xF002EFFF  	GOTO        NORM3232
;__Lib_MathDouble.c,476 :: 		
0x05EC	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,477 :: 		
0x05F0	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,478 :: 		
0x05F2	0x960E      	BCF         R14, 3, 0
;__Lib_MathDouble.c,479 :: 		
0x05F4	0x880E      	BSF         R14, 4, 0
;__Lib_MathDouble.c,481 :: 		
0x05F6	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,482 :: 		
0x05F8	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,483 :: 		
0x05FA	0xF003EF11  	GOTO        JPNRES032
;__Lib_MathDouble.c,484 :: 		
NORM3232:
;__Lib_MathDouble.c,485 :: 		
0x05FE	0x500E      	MOVF        R14, 0, 0
;__Lib_MathDouble.c,486 :: 		
0x0600	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,487 :: 		
0x0602	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,488 :: 		
0x0604	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,489 :: 		
0x0606	0xF003EF16  	GOTO        JPNSETFUN32
;__Lib_MathDouble.c,490 :: 		
0x060A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,491 :: 		
NORM3232A:
;__Lib_MathDouble.c,492 :: 		
0x060C	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,493 :: 		
0x060E	0xF003EF1B  	GOTO        JMPNFIXSIGN32
;__Lib_MathDouble.c,494 :: 		
0x0612	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,495 :: 		
0x0614	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,496 :: 		
0x0616	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,497 :: 		
0x0618	0x2E03      	DECFSZ      R3, 1, 0
;__Lib_MathDouble.c,498 :: 		
0x061A	0xF003EF06  	GOTO        NORM3232A
;__Lib_MathDouble.c,499 :: 		
0x061E	0xF003EF16  	GOTO        JPNSETFUN32
;__Lib_MathDouble.c,500 :: 		
JPNRES032:
;__Lib_MathDouble.c,501 :: 		
0x0622	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,502 :: 		
0x0624	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,504 :: 		
0x0626	0xDD4E      	RCALL       _RES032
;__Lib_MathDouble.c,506 :: 		
0x0628	0xF003EF1E  	GOTO        NORM32EEE
;__Lib_MathDouble.c,507 :: 		
JPNSETFUN32:
;__Lib_MathDouble.c,508 :: 		
0x062C	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,509 :: 		
0x062E	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,511 :: 		
0x0630	0xDDAA      	RCALL       _SETFUN32
;__Lib_MathDouble.c,513 :: 		
0x0632	0xF003EF1E  	GOTO        NORM32EEE
;__Lib_MathDouble.c,514 :: 		
JMPNFIXSIGN32:
;__Lib_MathDouble.c,515 :: 		
0x0636	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,516 :: 		
0x0638	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,518 :: 		
0x063A	0xDDB2      	RCALL       _FIXSIGN32
;__Lib_MathDouble.c,520 :: 		
NORM32EEE:
;__Lib_MathDouble.c,527 :: 		
L_end_NRM3232:
0x063C	0x0012      	RETURN      0
; end of _NRM3232
_led_send:
;oled_control.c,6 :: 		void led_send (char nible) {
;oled_control.c,8 :: 		sdata = 0;
0x063E	0x0103      	MOVLB       3
0x0640	0x6B71      	CLRF        led_send_sdata_L0, 1
;oled_control.c,9 :: 		RW = 0; E = 1;
0x0642	0x0102      	MOVLB       2
0x0644	0x6BBD      	CLRF        oled_control_RW, 1
0x0646	0x0E01      	MOVLW       1
0x0648	0x6FC0      	MOVWF       oled_control_E, 1
;oled_control.c,10 :: 		sdata = sdata + nible;
0x064A	0xF371C370  	MOVFF       FARG_led_send_nible, led_send_sdata_L0
;oled_control.c,11 :: 		sdata = sdata << 4;
0x064E	0x0103      	MOVLB       3
0x0650	0x3771      	RLCF        led_send_sdata_L0, 1, 1
0x0652	0x9171      	BCF         led_send_sdata_L0, 0, 1
0x0654	0x3771      	RLCF        led_send_sdata_L0, 1, 1
0x0656	0x9171      	BCF         led_send_sdata_L0, 0, 1
0x0658	0x3771      	RLCF        led_send_sdata_L0, 1, 1
0x065A	0x9171      	BCF         led_send_sdata_L0, 0, 1
0x065C	0x3771      	RLCF        led_send_sdata_L0, 1, 1
0x065E	0x9171      	BCF         led_send_sdata_L0, 0, 1
;oled_control.c,12 :: 		if(LED) sdata = sdata + 8;
0x0660	0x0102      	MOVLB       2
0x0662	0x53BE      	MOVF        oled_control_LED, 1, 1
0x0664	0xE003      	BZ          L_led_send0
0x0666	0x0E08      	MOVLW       8
0x0668	0x0103      	MOVLB       3
0x066A	0x2771      	ADDWF       led_send_sdata_L0, 1, 1
L_led_send0:
;oled_control.c,13 :: 		if(E) sdata = sdata + 4;
0x066C	0x0102      	MOVLB       2
0x066E	0x53C0      	MOVF        oled_control_E, 1, 1
0x0670	0xE003      	BZ          L_led_send1
0x0672	0x0E04      	MOVLW       4
0x0674	0x0103      	MOVLB       3
0x0676	0x2771      	ADDWF       led_send_sdata_L0, 1, 1
L_led_send1:
;oled_control.c,14 :: 		if(RW) sdata = sdata + 2;
0x0678	0x0102      	MOVLB       2
0x067A	0x53BD      	MOVF        oled_control_RW, 1, 1
0x067C	0xE003      	BZ          L_led_send2
0x067E	0x0E02      	MOVLW       2
0x0680	0x0103      	MOVLB       3
0x0682	0x2771      	ADDWF       led_send_sdata_L0, 1, 1
L_led_send2:
;oled_control.c,15 :: 		if(RS) sdata = sdata + 1;
0x0684	0x0102      	MOVLB       2
0x0686	0x53BF      	MOVF        oled_control_RS, 1, 1
0x0688	0xE002      	BZ          L_led_send3
0x068A	0x0103      	MOVLB       3
0x068C	0x2B71      	INCF        led_send_sdata_L0, 1, 1
L_led_send3:
;oled_control.c,17 :: 		Soft_I2C_Start();
0x068E	0xDCFD      	RCALL       _Soft_I2C_Start
;oled_control.c,18 :: 		Soft_I2C_Write(led_addr);         // device addres
0x0690	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x0694	0xDCC3      	RCALL       _Soft_I2C_Write
;oled_control.c,19 :: 		Soft_I2C_Write(sdata);              //
0x0696	0xF37FC371  	MOVFF       led_send_sdata_L0, FARG_Soft_I2C_Write_d
0x069A	0xDCC0      	RCALL       _Soft_I2C_Write
;oled_control.c,20 :: 		Soft_I2C_Stop();
0x069C	0xDD1A      	RCALL       _Soft_I2C_Stop
;oled_control.c,21 :: 		delay_ms(1);
0x069E	0x0E06      	MOVLW       6
0x06A0	0x6E0C      	MOVWF       R12, 0
0x06A2	0x0E30      	MOVLW       48
0x06A4	0x6E0D      	MOVWF       R13, 0
L_led_send4:
0x06A6	0x2E0D      	DECFSZ      R13, 1, 0
0x06A8	0xD7FE      	BRA         L_led_send4
0x06AA	0x2E0C      	DECFSZ      R12, 1, 0
0x06AC	0xD7FC      	BRA         L_led_send4
0x06AE	0x0000      	NOP
;oled_control.c,22 :: 		sdata = sdata - 4;  // E = 0
0x06B0	0x0E04      	MOVLW       4
0x06B2	0x0103      	MOVLB       3
0x06B4	0x5F71      	SUBWF       led_send_sdata_L0, 1, 1
;oled_control.c,23 :: 		Soft_I2C_Start();
0x06B6	0xDCE9      	RCALL       _Soft_I2C_Start
;oled_control.c,24 :: 		Soft_I2C_Write(led_addr);         // device addres
0x06B8	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x06BC	0xDCAF      	RCALL       _Soft_I2C_Write
;oled_control.c,25 :: 		Soft_I2C_Write(sdata);              //
0x06BE	0xF37FC371  	MOVFF       led_send_sdata_L0, FARG_Soft_I2C_Write_d
0x06C2	0xDCAC      	RCALL       _Soft_I2C_Write
;oled_control.c,26 :: 		Soft_I2C_Stop();
0x06C4	0xDD06      	RCALL       _Soft_I2C_Stop
;oled_control.c,27 :: 		delay_ms(1);
0x06C6	0x0E06      	MOVLW       6
0x06C8	0x6E0C      	MOVWF       R12, 0
0x06CA	0x0E30      	MOVLW       48
0x06CC	0x6E0D      	MOVWF       R13, 0
L_led_send5:
0x06CE	0x2E0D      	DECFSZ      R13, 1, 0
0x06D0	0xD7FE      	BRA         L_led_send5
0x06D2	0x2E0C      	DECFSZ      R12, 1, 0
0x06D4	0xD7FC      	BRA         L_led_send5
0x06D6	0x0000      	NOP
;oled_control.c,28 :: 		}
L_end_led_send:
0x06D8	0x0012      	RETURN      0
; end of _led_send
_word2double:
;__Lib_MathDouble.c,2335 :: 		
;__Lib_MathDouble.c,2344 :: 		
0x06DA	0x5000      	MOVF        R0, 0, 0
;__Lib_MathDouble.c,2345 :: 		
0x06DC	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,2346 :: 		
0x06DE	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2347 :: 		
0x06E0	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,2348 :: 		
0x06E2	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,2349 :: 		
0x06E4	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2350 :: 		
0x06E6	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,2353 :: 		
0x06E8	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,2354 :: 		
0x06EA	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,2356 :: 		
0x06EC	0x0E96      	MOVLW       150
;__Lib_MathDouble.c,2357 :: 		
0x06EE	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,2358 :: 		
0x06F0	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2360 :: 		
0x06F2	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,2361 :: 		
0x06F6	0xF000C008  	MOVFF       R8, R0
;__Lib_MathDouble.c,2362 :: 		
0x06FA	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,2363 :: 		
0x06FC	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2365 :: 		
0x06FE	0xDF66      	RCALL       _NRM3232
;__Lib_MathDouble.c,2366 :: 		
L_end_word2double:
0x0700	0x0012      	RETURN      0
; end of _word2double
_Mul_32x32_U:
;__Lib_Math.c,1616 :: 		
;__Lib_Math.c,1631 :: 		
0x0702	0x0E22      	MOVLW       34
;__Lib_Math.c,1632 :: 		
0x0704	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,1633 :: 		
0x0706	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1634 :: 		
0x0708	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1635 :: 		
0x070A	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1636 :: 		
0x070C	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1638 :: 		
_NEXT:
;__Lib_Math.c,1642 :: 		
0x070E	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1643 :: 		
0x0710	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1644 :: 		
0x0712	0xD01F      	BRA         _EXIT2
;__Lib_Math.c,1645 :: 		
0x0714	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,1647 :: 		
_LOOP:
;__Lib_Math.c,1656 :: 		
0x0716	0x320B      	RRCF        R11, 1, 0
;__Lib_Math.c,1657 :: 		
0x0718	0x320A      	RRCF        R10, 1, 0
;__Lib_Math.c,1658 :: 		
0x071A	0x3209      	RRCF        R9, 1, 0
;__Lib_Math.c,1659 :: 		
0x071C	0x3208      	RRCF        R8, 1, 0
;__Lib_Math.c,1660 :: 		
0x071E	0x3203      	RRCF        R3, 1, 0
;__Lib_Math.c,1661 :: 		
0x0720	0x3202      	RRCF        R2, 1, 0
;__Lib_Math.c,1662 :: 		
0x0722	0x3201      	RRCF        R1, 1, 0
;__Lib_Math.c,1663 :: 		
0x0724	0x3200      	RRCF        R0, 1, 0
;__Lib_Math.c,1668 :: 		
0x0726	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,1669 :: 		
0x0728	0xD7F2      	BRA         _NEXT
;__Lib_Math.c,1670 :: 		
0x072A	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1671 :: 		
0x072C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1672 :: 		
0x072E	0xD009      	BRA         _EXIT1
;__Lib_Math.c,1679 :: 		
0x0730	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1680 :: 		
0x0732	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1681 :: 		
0x0734	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1684 :: 		
0x0736	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1685 :: 		
0x0738	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1688 :: 		
0x073A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1689 :: 		
0x073C	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1692 :: 		
0x073E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1694 :: 		
0x0740	0xD7EA      	BRA         _LOOP
;__Lib_Math.c,1696 :: 		
_EXIT1:
;__Lib_Math.c,1701 :: 		
0x0742	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1702 :: 		
0x0744	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1703 :: 		
0x0746	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1706 :: 		
0x0748	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1707 :: 		
0x074A	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1710 :: 		
0x074C	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1711 :: 		
0x074E	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1714 :: 		
0x0750	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1717 :: 		
_EXIT2:
;__Lib_Math.c,1719 :: 		
L_end_Mul_32x32_U:
0x0752	0x0012      	RETURN      0
; end of _Mul_32x32_U
_NRM4032:
;__Lib_MathDouble.c,174 :: 		
;__Lib_MathDouble.c,183 :: 		
0x0754	0xB00C      	BTFSC       R12, 0, 0
;__Lib_MathDouble.c,184 :: 		
0x0756	0xF003EFEC  	GOTO        NRMRND4032
;__Lib_MathDouble.c,185 :: 		
0x075A	0xA20C      	BTFSS       R12, 1, 0
;__Lib_MathDouble.c,186 :: 		
0x075C	0xF004EF92  	GOTO        NRM40JPSETFOV32
;__Lib_MathDouble.c,188 :: 		
0x0760	0x6A0E      	CLRF        R14, 0
;__Lib_MathDouble.c,189 :: 		
0x0762	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,190 :: 		
0x0764	0x6402      	CPFSGT      R2, 0
;__Lib_MathDouble.c,191 :: 		
0x0766	0xF004EF03  	GOTO        NRM4032A
;__Lib_MathDouble.c,194 :: 		
0x076A	0x0EF0      	MOVLW       240
;__Lib_MathDouble.c,195 :: 		
0x076C	0x1402      	ANDWF       R2, 0, 0
;__Lib_MathDouble.c,196 :: 		
0x076E	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,197 :: 		
0x0770	0xF003EFCE  	GOTO        NORM4032
;__Lib_MathDouble.c,199 :: 		
0x0774	0x3A02      	SWAPF       R2, 1, 0
;__Lib_MathDouble.c,200 :: 		
0x0776	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,201 :: 		
0x0778	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,202 :: 		
0x077A	0x2602      	ADDWF       R2, 1, 0
;__Lib_MathDouble.c,204 :: 		
0x077C	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,205 :: 		
0x077E	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,206 :: 		
0x0780	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,207 :: 		
0x0782	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,208 :: 		
0x0784	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,209 :: 		
0x0786	0x2601      	ADDWF       R1, 1, 0
;__Lib_MathDouble.c,211 :: 		
0x0788	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,212 :: 		
0x078A	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,213 :: 		
0x078C	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,214 :: 		
0x078E	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,215 :: 		
0x0790	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,216 :: 		
0x0792	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,218 :: 		
0x0794	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,219 :: 		
0x0796	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,220 :: 		
0x0798	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,222 :: 		
0x079A	0x840E      	BSF         R14, 2, 0
;__Lib_MathDouble.c,224 :: 		
NORM4032:
;__Lib_MathDouble.c,225 :: 		
0x079C	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,227 :: 		
0x079E	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,228 :: 		
0x07A0	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,229 :: 		
0x07A4	0x3608      	RLCF        R8, 1, 0
;__Lib_MathDouble.c,230 :: 		
0x07A6	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,231 :: 		
0x07A8	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,232 :: 		
0x07AA	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,233 :: 		
0x07AC	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,234 :: 		
0x07AE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,235 :: 		
0x07B0	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,236 :: 		
0x07B4	0x3608      	RLCF        R8, 1, 0
;__Lib_MathDouble.c,237 :: 		
0x07B6	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,238 :: 		
0x07B8	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,239 :: 		
0x07BA	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,240 :: 		
0x07BC	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,241 :: 		
0x07BE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,242 :: 		
0x07C0	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,243 :: 		
0x07C4	0x3608      	RLCF        R8, 1, 0
;__Lib_MathDouble.c,244 :: 		
0x07C6	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,245 :: 		
0x07C8	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,246 :: 		
0x07CA	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,247 :: 		
0x07CC	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,249 :: 		
TNORMUN4032:
;__Lib_MathDouble.c,250 :: 		
0x07CE	0x500E      	MOVF        R14, 0, 0
;__Lib_MathDouble.c,251 :: 		
0x07D0	0x6403      	CPFSGT      R3, 0
;__Lib_MathDouble.c,252 :: 		
0x07D2	0xF004EF88  	GOTO        NRM40JPSETFUN32
;__Lib_MathDouble.c,253 :: 		
0x07D6	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,255 :: 		
NRMRND4032:
;__Lib_MathDouble.c,256 :: 		
0x07D8	0xBC0B      	BTFSC       R11, 6, 0
;__Lib_MathDouble.c,257 :: 		
0x07DA	0xAE08      	BTFSS       R8, 7, 0
;__Lib_MathDouble.c,258 :: 		
0x07DC	0xF004EF8D  	GOTO        NRM40JPFIXSIGN32
;__Lib_MathDouble.c,259 :: 		
0x07E0	0x80D8      	BSF         STATUS, 0, 0
;__Lib_MathDouble.c,260 :: 		
0x07E2	0x0E80      	MOVLW       128
;__Lib_MathDouble.c,261 :: 		
0x07E4	0x6408      	CPFSGT      R8, 0
;__Lib_MathDouble.c,262 :: 		
0x07E6	0x3000      	RRCF        R0, 0, 0
;__Lib_MathDouble.c,263 :: 		
0x07E8	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,264 :: 		
0x07EA	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,265 :: 		
0x07EC	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,266 :: 		
0x07EE	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,268 :: 		
0x07F0	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,269 :: 		
0x07F2	0xF004EF8D  	GOTO        NRM40JPFIXSIGN32
;__Lib_MathDouble.c,270 :: 		
0x07F6	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,271 :: 		
0x07F8	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,272 :: 		
0x07FA	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,273 :: 		
0x07FC	0x4A03      	INFSNZ      R3, 1, 0
;__Lib_MathDouble.c,274 :: 		
0x07FE	0xF004EF92  	GOTO        NRM40JPSETFOV32
;__Lib_MathDouble.c,275 :: 		
0x0802	0xF004EF8D  	GOTO        NRM40JPFIXSIGN32
;__Lib_MathDouble.c,277 :: 		
NRM4032A:
;__Lib_MathDouble.c,278 :: 		
0x0806	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,279 :: 		
0x080A	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,280 :: 		
0x080E	0xF000C008  	MOVFF       R8, R0
;__Lib_MathDouble.c,281 :: 		
0x0812	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,282 :: 		
0x0814	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,283 :: 		
0x0816	0x860E      	BSF         R14, 3, 0
;__Lib_MathDouble.c,284 :: 		
0x0818	0x6402      	CPFSGT      R2, 0
;__Lib_MathDouble.c,285 :: 		
0x081A	0xF004EF3A  	GOTO        NRM4032B
;__Lib_MathDouble.c,288 :: 		
0x081E	0x0EF0      	MOVLW       240
;__Lib_MathDouble.c,289 :: 		
0x0820	0x1402      	ANDWF       R2, 0, 0
;__Lib_MathDouble.c,290 :: 		
0x0822	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,291 :: 		
0x0824	0xF004EF22  	GOTO        NORM4032A
;__Lib_MathDouble.c,292 :: 		
0x0828	0x3A02      	SWAPF       R2, 1, 0
;__Lib_MathDouble.c,293 :: 		
0x082A	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,294 :: 		
0x082C	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,295 :: 		
0x082E	0x2602      	ADDWF       R2, 1, 0
;__Lib_MathDouble.c,297 :: 		
0x0830	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,298 :: 		
0x0832	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,299 :: 		
0x0834	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,300 :: 		
0x0836	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,301 :: 		
0x0838	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,302 :: 		
0x083A	0x2601      	ADDWF       R1, 1, 0
;__Lib_MathDouble.c,304 :: 		
0x083C	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,305 :: 		
0x083E	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,306 :: 		
0x0840	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,308 :: 		
0x0842	0x840E      	BSF         R14, 2, 0
;__Lib_MathDouble.c,310 :: 		
NORM4032A:
;__Lib_MathDouble.c,311 :: 		
0x0844	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,313 :: 		
0x0846	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,314 :: 		
0x0848	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,315 :: 		
0x084C	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,316 :: 		
0x084E	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,317 :: 		
0x0850	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,318 :: 		
0x0852	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,319 :: 		
0x0854	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,320 :: 		
0x0856	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,321 :: 		
0x085A	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,322 :: 		
0x085C	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,323 :: 		
0x085E	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,324 :: 		
0x0860	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,325 :: 		
0x0862	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,326 :: 		
0x0864	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,327 :: 		
0x0868	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,328 :: 		
0x086A	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,329 :: 		
0x086C	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,330 :: 		
0x086E	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,331 :: 		
0x0870	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,333 :: 		
NRM4032B:
;__Lib_MathDouble.c,334 :: 		
0x0874	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,335 :: 		
0x0878	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,336 :: 		
0x087C	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,337 :: 		
0x087E	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,338 :: 		
0x0880	0x960E      	BCF         R14, 3, 0
;__Lib_MathDouble.c,339 :: 		
0x0882	0x880E      	BSF         R14, 4, 0
;__Lib_MathDouble.c,340 :: 		
0x0884	0x6402      	CPFSGT      R2, 0
;__Lib_MathDouble.c,341 :: 		
0x0886	0xF004EF67  	GOTO        NRM4032C
;__Lib_MathDouble.c,344 :: 		
0x088A	0x0EF0      	MOVLW       240
;__Lib_MathDouble.c,345 :: 		
0x088C	0x1402      	ANDWF       R2, 0, 0
;__Lib_MathDouble.c,346 :: 		
0x088E	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,347 :: 		
0x0890	0xF004EF52  	GOTO        NORM4032B
;__Lib_MathDouble.c,349 :: 		
0x0894	0x3A02      	SWAPF       R2, 1, 0
;__Lib_MathDouble.c,350 :: 		
0x0896	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,351 :: 		
0x0898	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,352 :: 		
0x089A	0x2602      	ADDWF       R2, 1, 0
;__Lib_MathDouble.c,354 :: 		
0x089C	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,355 :: 		
0x089E	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,356 :: 		
0x08A0	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,358 :: 		
0x08A2	0x840E      	BSF         R14, 2, 0
;__Lib_MathDouble.c,360 :: 		
NORM4032B:
;__Lib_MathDouble.c,361 :: 		
0x08A4	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,362 :: 		
0x08A6	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,363 :: 		
0x08A8	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,364 :: 		
0x08AC	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,365 :: 		
0x08AE	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,366 :: 		
0x08B0	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,367 :: 		
0x08B2	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,368 :: 		
0x08B4	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,369 :: 		
0x08B8	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,370 :: 		
0x08BA	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,371 :: 		
0x08BC	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,372 :: 		
0x08BE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,373 :: 		
0x08C0	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,374 :: 		
0x08C4	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,375 :: 		
0x08C6	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,376 :: 		
0x08C8	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,377 :: 		
0x08CA	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,379 :: 		
NRM4032C:
;__Lib_MathDouble.c,380 :: 		
0x08CE	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,381 :: 		
0x08D2	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,382 :: 		
0x08D4	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,383 :: 		
0x08D6	0x860E      	BSF         R14, 3, 0
;__Lib_MathDouble.c,384 :: 		
0x08D8	0x6402      	CPFSGT      R2, 0
;__Lib_MathDouble.c,385 :: 		
0x08DA	0xF004EF97  	GOTO        NRM40JPRES032
;__Lib_MathDouble.c,388 :: 		
0x08DE	0x0EF0      	MOVLW       240
;__Lib_MathDouble.c,389 :: 		
0x08E0	0x1402      	ANDWF       R2, 0, 0
;__Lib_MathDouble.c,390 :: 		
0x08E2	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,391 :: 		
0x08E4	0xF004EF76  	GOTO        NORM4032C
;__Lib_MathDouble.c,392 :: 		
0x08E8	0x3A02      	SWAPF       R2, 1, 0
;__Lib_MathDouble.c,394 :: 		
0x08EA	0x840E      	BSF         R14, 2, 0
;__Lib_MathDouble.c,396 :: 		
NORM4032C:
;__Lib_MathDouble.c,397 :: 		
0x08EC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,399 :: 		
0x08EE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,400 :: 		
0x08F0	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,401 :: 		
0x08F4	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,402 :: 		
0x08F6	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,403 :: 		
0x08F8	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,404 :: 		
0x08FA	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,405 :: 		
0x08FE	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,406 :: 		
0x0900	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,407 :: 		
0x0902	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,408 :: 		
0x0904	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,409 :: 		
0x0908	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,410 :: 		
0x090A	0x2A0E      	INCF        R14, 1, 0
;__Lib_MathDouble.c,411 :: 		
0x090C	0xF003EFE7  	GOTO        TNORMUN4032
;__Lib_MathDouble.c,413 :: 		
NRM40JPSETFUN32:
;__Lib_MathDouble.c,414 :: 		
0x0910	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,415 :: 		
0x0912	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,417 :: 		
0x0914	0xDC38      	RCALL       _SETFUN32
;__Lib_MathDouble.c,419 :: 		
0x0916	0xF004EF9B  	GOTO        NRM40EEE
;__Lib_MathDouble.c,420 :: 		
NRM40JPFIXSIGN32:
;__Lib_MathDouble.c,421 :: 		
0x091A	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,422 :: 		
0x091C	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,424 :: 		
0x091E	0xDC40      	RCALL       _FIXSIGN32
;__Lib_MathDouble.c,426 :: 		
0x0920	0xF004EF9B  	GOTO        NRM40EEE
;__Lib_MathDouble.c,427 :: 		
NRM40JPSETFOV32:
;__Lib_MathDouble.c,428 :: 		
0x0924	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,429 :: 		
0x0926	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,431 :: 		
0x0928	0xDC5A      	RCALL       _SETFOV32
;__Lib_MathDouble.c,433 :: 		
0x092A	0xF004EF9B  	GOTO        NRM40EEE
;__Lib_MathDouble.c,434 :: 		
NRM40JPRES032:
;__Lib_MathDouble.c,435 :: 		
0x092E	0x0E08      	MOVLW       8
;__Lib_MathDouble.c,436 :: 		
0x0930	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,438 :: 		
0x0932	0xF000EC62  	CALL        _RES032, 0
;__Lib_MathDouble.c,440 :: 		
NRM40EEE:
;__Lib_MathDouble.c,448 :: 		
L_end_NRM4032:
0x0936	0x0012      	RETURN      0
; end of _NRM4032
_COMFREM:
;__Lib_Math.c,922 :: 		
;__Lib_Math.c,927 :: 		
0x0938	0x1E0B      	COMF        R11, 1, 0
;__Lib_Math.c,928 :: 		
0x093A	0x1E0A      	COMF        R10, 1, 0
;__Lib_Math.c,929 :: 		
0x093C	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,930 :: 		
0x093E	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,931 :: 		
0x0940	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,932 :: 		
0x0942	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,933 :: 		
0x0944	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,934 :: 		
0x0946	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,935 :: 		
0x0948	0x2A0A      	INCF        R10, 1, 0
;__Lib_Math.c,936 :: 		
0x094A	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,937 :: 		
0x094C	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,939 :: 		
L_end_COMFREM:
0x094E	0x0012      	RETURN      0
; end of _COMFREM
_SDIV3232L:
;__Lib_Math.c,553 :: 		
;__Lib_Math.c,563 :: 		
0x0950	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,564 :: 		
0x0952	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,565 :: 		
0x0954	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,566 :: 		
0x0956	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,567 :: 		
0x0958	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,568 :: 		
0x095A	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,569 :: 		
0x095C	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,570 :: 		
0x095E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,571 :: 		
0x0960	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,572 :: 		
0x0962	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,573 :: 		
0x0964	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,574 :: 		
0x0966	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,575 :: 		
0x0968	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,576 :: 		
0x096A	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,577 :: 		
0x096C	0x3603      	RLCF        R3, 1, 0
;__Lib_Math.c,579 :: 		
0x096E	0x0E07      	MOVLW       7
;__Lib_Math.c,580 :: 		
0x0970	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,582 :: 		
LOOPS3232A:
;__Lib_Math.c,583 :: 		
0x0972	0x3403      	RLCF        R3, 0, 0
;__Lib_Math.c,584 :: 		
0x0974	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,585 :: 		
0x0976	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,586 :: 		
0x0978	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,587 :: 		
0x097A	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,588 :: 		
0x097C	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,589 :: 		
0x097E	0xA003      	BTFSS       R3, 0, 0
;__Lib_Math.c,590 :: 		
0x0980	0xD00E      	BRA         SADD22LA
;__Lib_Math.c,592 :: 		
0x0982	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,593 :: 		
0x0984	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,594 :: 		
0x0986	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,595 :: 		
0x0988	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,596 :: 		
0x098A	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,597 :: 		
0x098C	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,598 :: 		
0x098E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,599 :: 		
0x0990	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,600 :: 		
0x0992	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,601 :: 		
0x0994	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,602 :: 		
0x0996	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,603 :: 		
0x0998	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,604 :: 		
0x099A	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,605 :: 		
0x099C	0xD00D      	BRA         SOK22LA
;__Lib_Math.c,607 :: 		
SADD22LA:
;__Lib_Math.c,608 :: 		
0x099E	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,609 :: 		
0x09A0	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,610 :: 		
0x09A2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,611 :: 		
0x09A4	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,612 :: 		
0x09A6	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,613 :: 		
0x09A8	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,614 :: 		
0x09AA	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,615 :: 		
0x09AC	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,616 :: 		
0x09AE	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,617 :: 		
0x09B0	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,618 :: 		
0x09B2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,619 :: 		
0x09B4	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,620 :: 		
0x09B6	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,622 :: 		
SOK22LA:
;__Lib_Math.c,623 :: 		
0x09B8	0x3603      	RLCF        R3, 1, 0
;__Lib_Math.c,625 :: 		
0x09BA	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,626 :: 		
0x09BC	0xD7DA      	BRA         LOOPS3232A
;__Lib_Math.c,628 :: 		
0x09BE	0x3402      	RLCF        R2, 0, 0
;__Lib_Math.c,629 :: 		
0x09C0	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,630 :: 		
0x09C2	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,631 :: 		
0x09C4	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,632 :: 		
0x09C6	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,633 :: 		
0x09C8	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,634 :: 		
0x09CA	0xA003      	BTFSS       R3, 0, 0
;__Lib_Math.c,635 :: 		
0x09CC	0xD00E      	BRA         SADD22L8
;__Lib_Math.c,637 :: 		
0x09CE	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,638 :: 		
0x09D0	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,639 :: 		
0x09D2	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,640 :: 		
0x09D4	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,641 :: 		
0x09D6	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,642 :: 		
0x09D8	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,643 :: 		
0x09DA	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,644 :: 		
0x09DC	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,645 :: 		
0x09DE	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,646 :: 		
0x09E0	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,647 :: 		
0x09E2	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,648 :: 		
0x09E4	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,649 :: 		
0x09E6	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,650 :: 		
0x09E8	0xD00D      	BRA         SOK22L8
;__Lib_Math.c,652 :: 		
SADD22L8:
;__Lib_Math.c,653 :: 		
0x09EA	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,654 :: 		
0x09EC	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,655 :: 		
0x09EE	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,656 :: 		
0x09F0	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,657 :: 		
0x09F2	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,658 :: 		
0x09F4	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,659 :: 		
0x09F6	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,660 :: 		
0x09F8	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,661 :: 		
0x09FA	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,662 :: 		
0x09FC	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,663 :: 		
0x09FE	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,664 :: 		
0x0A00	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,665 :: 		
0x0A02	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,667 :: 		
SOK22L8:
;__Lib_Math.c,668 :: 		
0x0A04	0x3602      	RLCF        R2, 1, 0
;__Lib_Math.c,670 :: 		
0x0A06	0x0E07      	MOVLW       7
;__Lib_Math.c,671 :: 		
0x0A08	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,673 :: 		
LOOPS3232B:
;__Lib_Math.c,674 :: 		
0x0A0A	0x3402      	RLCF        R2, 0, 0
;__Lib_Math.c,675 :: 		
0x0A0C	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,676 :: 		
0x0A0E	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,677 :: 		
0x0A10	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,678 :: 		
0x0A12	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,679 :: 		
0x0A14	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,680 :: 		
0x0A16	0xA002      	BTFSS       R2, 0, 0
;__Lib_Math.c,681 :: 		
0x0A18	0xD00E      	BRA         SADD22LB
;__Lib_Math.c,683 :: 		
0x0A1A	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,684 :: 		
0x0A1C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,685 :: 		
0x0A1E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,686 :: 		
0x0A20	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,687 :: 		
0x0A22	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,688 :: 		
0x0A24	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,689 :: 		
0x0A26	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,690 :: 		
0x0A28	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,691 :: 		
0x0A2A	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,692 :: 		
0x0A2C	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,693 :: 		
0x0A2E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,694 :: 		
0x0A30	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,695 :: 		
0x0A32	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,696 :: 		
0x0A34	0xD00D      	BRA         SOK22LB
;__Lib_Math.c,698 :: 		
SADD22LB:
;__Lib_Math.c,699 :: 		
0x0A36	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,700 :: 		
0x0A38	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,701 :: 		
0x0A3A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,702 :: 		
0x0A3C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,703 :: 		
0x0A3E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,704 :: 		
0x0A40	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,705 :: 		
0x0A42	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,706 :: 		
0x0A44	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,707 :: 		
0x0A46	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,708 :: 		
0x0A48	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,709 :: 		
0x0A4A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,710 :: 		
0x0A4C	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,711 :: 		
0x0A4E	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,713 :: 		
SOK22LB:
;__Lib_Math.c,714 :: 		
0x0A50	0x3602      	RLCF        R2, 1, 0
;__Lib_Math.c,716 :: 		
0x0A52	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,717 :: 		
0x0A54	0xD7DA      	BRA         LOOPS3232B
;__Lib_Math.c,719 :: 		
0x0A56	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,720 :: 		
0x0A58	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,721 :: 		
0x0A5A	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,722 :: 		
0x0A5C	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,723 :: 		
0x0A5E	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,724 :: 		
0x0A60	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,725 :: 		
0x0A62	0xA002      	BTFSS       R2, 0, 0
;__Lib_Math.c,726 :: 		
0x0A64	0xD00E      	BRA         SADD22L16
;__Lib_Math.c,728 :: 		
0x0A66	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,729 :: 		
0x0A68	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,730 :: 		
0x0A6A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,731 :: 		
0x0A6C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,732 :: 		
0x0A6E	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,733 :: 		
0x0A70	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,734 :: 		
0x0A72	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,735 :: 		
0x0A74	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,736 :: 		
0x0A76	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,737 :: 		
0x0A78	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,738 :: 		
0x0A7A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,739 :: 		
0x0A7C	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,740 :: 		
0x0A7E	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,741 :: 		
0x0A80	0xD00D      	BRA         SOK22L16
;__Lib_Math.c,743 :: 		
SADD22L16:
;__Lib_Math.c,744 :: 		
0x0A82	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,745 :: 		
0x0A84	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,746 :: 		
0x0A86	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,747 :: 		
0x0A88	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,748 :: 		
0x0A8A	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,749 :: 		
0x0A8C	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,750 :: 		
0x0A8E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,751 :: 		
0x0A90	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,752 :: 		
0x0A92	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,753 :: 		
0x0A94	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,754 :: 		
0x0A96	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,755 :: 		
0x0A98	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,756 :: 		
0x0A9A	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,758 :: 		
SOK22L16:
;__Lib_Math.c,759 :: 		
0x0A9C	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,761 :: 		
0x0A9E	0x0E07      	MOVLW       7
;__Lib_Math.c,762 :: 		
0x0AA0	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,764 :: 		
LOOPS3232C:
;__Lib_Math.c,765 :: 		
0x0AA2	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,766 :: 		
0x0AA4	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,767 :: 		
0x0AA6	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,768 :: 		
0x0AA8	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,769 :: 		
0x0AAA	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,770 :: 		
0x0AAC	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,771 :: 		
0x0AAE	0xA001      	BTFSS       R1, 0, 0
;__Lib_Math.c,772 :: 		
0x0AB0	0xD00E      	BRA         SADD22LC
;__Lib_Math.c,774 :: 		
0x0AB2	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,775 :: 		
0x0AB4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,776 :: 		
0x0AB6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,777 :: 		
0x0AB8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,778 :: 		
0x0ABA	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,779 :: 		
0x0ABC	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,780 :: 		
0x0ABE	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,781 :: 		
0x0AC0	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,782 :: 		
0x0AC2	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,783 :: 		
0x0AC4	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,784 :: 		
0x0AC6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,785 :: 		
0x0AC8	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,786 :: 		
0x0ACA	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,787 :: 		
0x0ACC	0xD00D      	BRA         SOK22LC
;__Lib_Math.c,789 :: 		
SADD22LC:
;__Lib_Math.c,790 :: 		
0x0ACE	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,791 :: 		
0x0AD0	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,792 :: 		
0x0AD2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,793 :: 		
0x0AD4	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,794 :: 		
0x0AD6	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,795 :: 		
0x0AD8	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,796 :: 		
0x0ADA	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,797 :: 		
0x0ADC	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,798 :: 		
0x0ADE	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,799 :: 		
0x0AE0	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,800 :: 		
0x0AE2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,801 :: 		
0x0AE4	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,802 :: 		
0x0AE6	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,804 :: 		
SOK22LC:
;__Lib_Math.c,805 :: 		
0x0AE8	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,807 :: 		
0x0AEA	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,808 :: 		
0x0AEC	0xD7DA      	BRA         LOOPS3232C
;__Lib_Math.c,810 :: 		
0x0AEE	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c,811 :: 		
0x0AF0	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,812 :: 		
0x0AF2	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,813 :: 		
0x0AF4	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,814 :: 		
0x0AF6	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,815 :: 		
0x0AF8	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,816 :: 		
0x0AFA	0xA001      	BTFSS       R1, 0, 0
;__Lib_Math.c,817 :: 		
0x0AFC	0xD00E      	BRA         SADD22L24
;__Lib_Math.c,819 :: 		
0x0AFE	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,820 :: 		
0x0B00	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,821 :: 		
0x0B02	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,822 :: 		
0x0B04	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,823 :: 		
0x0B06	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,824 :: 		
0x0B08	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,825 :: 		
0x0B0A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,826 :: 		
0x0B0C	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,827 :: 		
0x0B0E	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,828 :: 		
0x0B10	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,829 :: 		
0x0B12	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,830 :: 		
0x0B14	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,831 :: 		
0x0B16	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,832 :: 		
0x0B18	0xD00D      	BRA         SOK22L24
;__Lib_Math.c,834 :: 		
SADD22L24:
;__Lib_Math.c,835 :: 		
0x0B1A	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,836 :: 		
0x0B1C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,837 :: 		
0x0B1E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,838 :: 		
0x0B20	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,839 :: 		
0x0B22	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,840 :: 		
0x0B24	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,841 :: 		
0x0B26	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,842 :: 		
0x0B28	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,843 :: 		
0x0B2A	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,844 :: 		
0x0B2C	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,845 :: 		
0x0B2E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,846 :: 		
0x0B30	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,847 :: 		
0x0B32	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,849 :: 		
SOK22L24:
;__Lib_Math.c,850 :: 		
0x0B34	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,852 :: 		
0x0B36	0x0E07      	MOVLW       7
;__Lib_Math.c,853 :: 		
0x0B38	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,855 :: 		
LOOPS3232D:
;__Lib_Math.c,856 :: 		
0x0B3A	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c,857 :: 		
0x0B3C	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,858 :: 		
0x0B3E	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,859 :: 		
0x0B40	0x360A      	RLCF        R10, 1, 0
;__Lib_Math.c,860 :: 		
0x0B42	0x360B      	RLCF        R11, 1, 0
;__Lib_Math.c,861 :: 		
0x0B44	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,862 :: 		
0x0B46	0xA000      	BTFSS       R0, 0, 0
;__Lib_Math.c,863 :: 		
0x0B48	0xD00E      	BRA         SADD22LD
;__Lib_Math.c,865 :: 		
0x0B4A	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,866 :: 		
0x0B4C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,867 :: 		
0x0B4E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,868 :: 		
0x0B50	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,869 :: 		
0x0B52	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,870 :: 		
0x0B54	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,871 :: 		
0x0B56	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,872 :: 		
0x0B58	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,873 :: 		
0x0B5A	0x5E0A      	SUBWF       R10, 1, 0
;__Lib_Math.c,874 :: 		
0x0B5C	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,875 :: 		
0x0B5E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,876 :: 		
0x0B60	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,877 :: 		
0x0B62	0x5E0B      	SUBWF       R11, 1, 0
;__Lib_Math.c,878 :: 		
0x0B64	0xD00D      	BRA         SOK22LD
;__Lib_Math.c,880 :: 		
SADD22LD:
;__Lib_Math.c,881 :: 		
0x0B66	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,882 :: 		
0x0B68	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,883 :: 		
0x0B6A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,884 :: 		
0x0B6C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,885 :: 		
0x0B6E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,886 :: 		
0x0B70	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,887 :: 		
0x0B72	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,888 :: 		
0x0B74	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,889 :: 		
0x0B76	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,890 :: 		
0x0B78	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,891 :: 		
0x0B7A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,893 :: 		
0x0B7C	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,894 :: 		
0x0B7E	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,896 :: 		
SOK22LD:
;__Lib_Math.c,897 :: 		
0x0B80	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,899 :: 		
0x0B82	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,900 :: 		
0x0B84	0xD7DA      	BRA         LOOPS3232D
;__Lib_Math.c,902 :: 		
0x0B86	0xB000      	BTFSC       R0, 0, 0
;__Lib_Math.c,903 :: 		
0x0B88	0xD00E      	BRA         SOK22L
;__Lib_Math.c,904 :: 		
0x0B8A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,905 :: 		
0x0B8C	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,906 :: 		
0x0B8E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,907 :: 		
0x0B90	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,908 :: 		
0x0B92	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,909 :: 		
0x0B94	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,910 :: 		
0x0B96	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,911 :: 		
0x0B98	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,912 :: 		
0x0B9A	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_Math.c,913 :: 		
0x0B9C	0x260A      	ADDWF       R10, 1, 0
;__Lib_Math.c,914 :: 		
0x0B9E	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,915 :: 		
0x0BA0	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,916 :: 		
0x0BA2	0x3C07      	INCFSZ      R7, 0, 0
;__Lib_Math.c,917 :: 		
0x0BA4	0x260B      	ADDWF       R11, 1, 0
;__Lib_Math.c,918 :: 		
SOK22L:
;__Lib_Math.c,920 :: 		
L_end_SDIV3232L:
0x0BA6	0x0012      	RETURN      0
; end of _SDIV3232L
_ADC_Get_Sample:
;__Lib_ADC_A_D.c,34 :: 		
;__Lib_ADC_A_D.c,37 :: 		
0x0BA8	0x0E83      	MOVLW       131
0x0BAA	0x16C2      	ANDWF       ADCON0, 1 
;__Lib_ADC_A_D.c,39 :: 		
0x0BAC	0xF000C366  	MOVFF       FARG_ADC_Get_Sample_channel, R0
0x0BB0	0x3600      	RLCF        R0, 1 
0x0BB2	0x9000      	BCF         R0, 0 
0x0BB4	0x3600      	RLCF        R0, 1 
0x0BB6	0x9000      	BCF         R0, 0 
0x0BB8	0x5000      	MOVF        R0, 0 
0x0BBA	0x12C2      	IORWF       ADCON0, 1 
;__Lib_ADC_A_D.c,41 :: 		
0x0BBC	0xDD02      	RCALL       _Delay_22us
;__Lib_ADC_A_D.c,42 :: 		
0x0BBE	0x82C2      	BSF         ADCON0, 1 
;__Lib_ADC_A_D.c,43 :: 		
L_ADC_Get_Sample0:
0x0BC0	0xA2C2      	BTFSS       ADCON0, 1 
0x0BC2	0xD001      	BRA         L_ADC_Get_Sample1
;__Lib_ADC_A_D.c,44 :: 		
0x0BC4	0xD7FD      	BRA         L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC_A_D.c,45 :: 		
0x0BC6	0xF001CFC4  	MOVFF       ADRESH, R1
0x0BCA	0x6A00      	CLRF        R0 
;__Lib_ADC_A_D.c,46 :: 		
0x0BCC	0x50C3      	MOVF        ADRESL, 0 
0x0BCE	0x1200      	IORWF       R0, 1 
0x0BD0	0x0E00      	MOVLW       0
0x0BD2	0x1201      	IORWF       R1, 1 
;__Lib_ADC_A_D.c,48 :: 		
;__Lib_ADC_A_D.c,49 :: 		
L_end_ADC_Get_Sample:
0x0BD4	0x0012      	RETURN      0
; end of _ADC_Get_Sample
_int2double:
;__Lib_MathDouble.c,2285 :: 		
;__Lib_MathDouble.c,2294 :: 		
0x0BD6	0xF008C000  	MOVFF       R0, R8
;__Lib_MathDouble.c,2295 :: 		
0x0BDA	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2296 :: 		
0x0BDC	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,2297 :: 		
0x0BDE	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,2298 :: 		
0x0BE0	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2299 :: 		
0x0BE2	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,2302 :: 		
0x0BE4	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,2303 :: 		
0x0BE6	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,2304 :: 		
0x0BE8	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,2305 :: 		
0x0BEA	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2306 :: 		
0x0BEC	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,2308 :: 		
0x0BEE	0x0E96      	MOVLW       150
;__Lib_MathDouble.c,2309 :: 		
0x0BF0	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,2310 :: 		
0x0BF2	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2311 :: 		
0x0BF4	0xAE00      	BTFSS       R0, 7, 0
;__Lib_MathDouble.c,2312 :: 		
0x0BF6	0xF006EF03  	GOTO        FLO1632EEE
;__Lib_MathDouble.c,2314 :: 		
0x0BFA	0x1E08      	COMF        R8, 1, 0
;__Lib_MathDouble.c,2315 :: 		
0x0BFC	0x1E00      	COMF        R0, 1, 0
;__Lib_MathDouble.c,2317 :: 		
0x0BFE	0x2A08      	INCF        R8, 1, 0
;__Lib_MathDouble.c,2318 :: 		
0x0C00	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2319 :: 		
0x0C02	0x2A00      	INCF        R0, 1, 0
;__Lib_MathDouble.c,2321 :: 		
0x0C04	0x8E0A      	BSF         R10, 7, 0
;__Lib_MathDouble.c,2322 :: 		
FLO1632EEE:
;__Lib_MathDouble.c,2323 :: 		
0x0C06	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,2324 :: 		
0x0C0A	0xF000C008  	MOVFF       R8, R0
;__Lib_MathDouble.c,2325 :: 		
0x0C0E	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,2326 :: 		
0x0C10	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2328 :: 		
0x0C12	0xDCDC      	RCALL       _NRM3232
;__Lib_MathDouble.c,2329 :: 		
L_end_int2double:
0x0C14	0x0012      	RETURN      0
; end of _int2double
_Mul_32x32_FP:
;__Lib_MathDouble.c,1130 :: 		
;__Lib_MathDouble.c,1148 :: 		
0x0C16	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,1149 :: 		
0x0C18	0x6A09      	CLRF        R9, 0
;__Lib_MathDouble.c,1151 :: 		
0x0C1A	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1152 :: 		
0x0C1C	0x6207      	CPFSEQ      R7, 0
;__Lib_MathDouble.c,1153 :: 		
0x0C1E	0x6403      	CPFSGT      R3, 0
;__Lib_MathDouble.c,1154 :: 		
0x0C20	0xF006EF90  	GOTO        MULJPRES032
;__Lib_MathDouble.c,1157 :: 		
0x0C24	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,1158 :: 		
0x0C26	0x1806      	XORWF       R6, 0, 0
;__Lib_MathDouble.c,1159 :: 		
0x0C28	0x6E0A      	MOVWF       R10, 0
;__Lib_MathDouble.c,1161 :: 		
0x0C2A	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,1162 :: 		
0x0C2C	0x2603      	ADDWF       R3, 1, 0
;__Lib_MathDouble.c,1163 :: 		
0x0C2E	0x0E7E      	MOVLW       126
;__Lib_MathDouble.c,1164 :: 		
0x0C30	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1165 :: 		
0x0C32	0xF006EF21  	GOTO        MTUN32
;__Lib_MathDouble.c,1167 :: 		
0x0C36	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,1168 :: 		
0x0C38	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1169 :: 		
0x0C3A	0xF006EF95  	GOTO        MULJPSETFOV32
;__Lib_MathDouble.c,1170 :: 		
0x0C3E	0xF006EF25  	GOTO        MOK32
;__Lib_MathDouble.c,1172 :: 		
MTUN32:
;__Lib_MathDouble.c,1173 :: 		
0x0C42	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,1174 :: 		
0x0C44	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1175 :: 		
0x0C46	0xF006EF9A  	GOTO        MULJPSETFUN32
;__Lib_MathDouble.c,1177 :: 		
MOK32:
;__Lib_MathDouble.c,1178 :: 		
0x0C4A	0x8E02      	BSF         R2, 7, 0
;__Lib_MathDouble.c,1179 :: 		
0x0C4C	0x8E06      	BSF         R6, 7, 0
;__Lib_MathDouble.c,1181 :: 		
0x0C4E	0xF00EC002  	MOVFF       R2, R14
;__Lib_MathDouble.c,1182 :: 		
0x0C52	0xF00BC001  	MOVFF       R1, R11
;__Lib_MathDouble.c,1183 :: 		
0x0C56	0xF00DC000  	MOVFF       R0, R13
;__Lib_MathDouble.c,1185 :: 		
0x0C5A	0x5000      	MOVF        R0, 0, 0
;__Lib_MathDouble.c,1186 :: 		
0x0C5C	0x0204      	MULWF       R4, 0
;__Lib_MathDouble.c,1187 :: 		
0x0C5E	0xF00CCFF4  	MOVFF       PRODH, R12
;__Lib_MathDouble.c,1189 :: 		
0x0C62	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,1190 :: 		
0x0C64	0x0205      	MULWF       R5, 0
;__Lib_MathDouble.c,1191 :: 		
0x0C66	0xF000CFF4  	MOVFF       PRODH, R0
;__Lib_MathDouble.c,1192 :: 		
0x0C6A	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_MathDouble.c,1194 :: 		
0x0C6E	0x0204      	MULWF       R4, 0
;__Lib_MathDouble.c,1195 :: 		
0x0C70	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1196 :: 		
0x0C72	0x260C      	ADDWF       R12, 1, 0
;__Lib_MathDouble.c,1197 :: 		
0x0C74	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1198 :: 		
0x0C76	0x2208      	ADDWFC      R8, 1, 0
;__Lib_MathDouble.c,1199 :: 		
0x0C78	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1200 :: 		
0x0C7A	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1202 :: 		
0x0C7C	0x500D      	MOVF        R13, 0, 0
;__Lib_MathDouble.c,1203 :: 		
0x0C7E	0x0205      	MULWF       R5, 0
;__Lib_MathDouble.c,1204 :: 		
0x0C80	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1205 :: 		
0x0C82	0x260C      	ADDWF       R12, 1, 0
;__Lib_MathDouble.c,1206 :: 		
0x0C84	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1207 :: 		
0x0C86	0x2208      	ADDWFC      R8, 1, 0
;__Lib_MathDouble.c,1208 :: 		
0x0C88	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1209 :: 		
0x0C8A	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1211 :: 		
0x0C8C	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,1212 :: 		
0x0C8E	0x0204      	MULWF       R4, 0
;__Lib_MathDouble.c,1213 :: 		
0x0C90	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1214 :: 		
0x0C92	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,1215 :: 		
0x0C94	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1216 :: 		
0x0C96	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1217 :: 		
0x0C98	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,1218 :: 		
0x0C9A	0x0205      	MULWF       R5, 0
;__Lib_MathDouble.c,1219 :: 		
0x0C9C	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,1220 :: 		
0x0C9E	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1221 :: 		
0x0CA0	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1222 :: 		
0x0CA2	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1223 :: 		
0x0CA4	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,1224 :: 		
0x0CA6	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1225 :: 		
0x0CA8	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1227 :: 		
0x0CAA	0x500D      	MOVF        R13, 0, 0
;__Lib_MathDouble.c,1228 :: 		
0x0CAC	0x0206      	MULWF       R6, 0
;__Lib_MathDouble.c,1229 :: 		
0x0CAE	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1230 :: 		
0x0CB0	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,1231 :: 		
0x0CB2	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1232 :: 		
0x0CB4	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1233 :: 		
0x0CB6	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,1234 :: 		
0x0CB8	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1235 :: 		
0x0CBA	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1236 :: 		
0x0CBC	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1238 :: 		
0x0CBE	0x500B      	MOVF        R11, 0, 0
;__Lib_MathDouble.c,1239 :: 		
0x0CC0	0x0206      	MULWF       R6, 0
;__Lib_MathDouble.c,1240 :: 		
0x0CC2	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1241 :: 		
0x0CC4	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,1242 :: 		
0x0CC6	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1243 :: 		
0x0CC8	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1244 :: 		
0x0CCA	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1245 :: 		
0x0CCC	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1247 :: 		
0x0CCE	0x500E      	MOVF        R14, 0, 0
;__Lib_MathDouble.c,1248 :: 		
0x0CD0	0x0206      	MULWF       R6, 0
;__Lib_MathDouble.c,1249 :: 		
0x0CD2	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_MathDouble.c,1250 :: 		
0x0CD4	0x2601      	ADDWF       R1, 1, 0
;__Lib_MathDouble.c,1251 :: 		
0x0CD6	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_MathDouble.c,1252 :: 		
0x0CD8	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1254 :: 		
0x0CDA	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,1255 :: 		
0x0CDC	0xF006EF78  	GOTO        MROUND32
;__Lib_MathDouble.c,1256 :: 		
0x0CE0	0x3608      	RLCF        R8, 1, 0
;__Lib_MathDouble.c,1257 :: 		
0x0CE2	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,1258 :: 		
0x0CE4	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,1259 :: 		
0x0CE6	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,1260 :: 		
0x0CE8	0x0603      	DECF        R3, 1, 0
;__Lib_MathDouble.c,1261 :: 		
0x0CEA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1262 :: 		
0x0CEC	0xF006EF9A  	GOTO        MULJPSETFUN32
;__Lib_MathDouble.c,1264 :: 		
MROUND32:
;__Lib_MathDouble.c,1267 :: 		
0x0CF0	0xF006EF8B  	GOTO        MUL32OK
;__Lib_MathDouble.c,1268 :: 		
0x0CF4	0x80D8      	BSF         STATUS, 0, 0
;__Lib_MathDouble.c,1269 :: 		
0x0CF6	0x0E80      	MOVLW       128
;__Lib_MathDouble.c,1270 :: 		
0x0CF8	0x6408      	CPFSGT      R8, 0
;__Lib_MathDouble.c,1271 :: 		
0x0CFA	0x3000      	RRCF        R0, 0, 0
;__Lib_MathDouble.c,1272 :: 		
0x0CFC	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1273 :: 		
0x0CFE	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1274 :: 		
0x0D00	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1275 :: 		
0x0D02	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1277 :: 		
0x0D04	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1278 :: 		
0x0D06	0xF006EF8B  	GOTO        MUL32OK
;__Lib_MathDouble.c,1279 :: 		
0x0D0A	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,1280 :: 		
0x0D0C	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,1281 :: 		
0x0D0E	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,1282 :: 		
0x0D10	0x4A03      	INFSNZ      R3, 1, 0
;__Lib_MathDouble.c,1283 :: 		
0x0D12	0xF006EF95  	GOTO        MULJPSETFOV32
;__Lib_MathDouble.c,1285 :: 		
MUL32OK:
;__Lib_MathDouble.c,1286 :: 		
0x0D16	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,1287 :: 		
0x0D18	0x9E02      	BCF         R2, 7, 0
;__Lib_MathDouble.c,1289 :: 		
0x0D1A	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1290 :: 		
0x0D1C	0xF006EF9D  	GOTO        MULEEE
;__Lib_MathDouble.c,1291 :: 		
MULJPRES032:
;__Lib_MathDouble.c,1292 :: 		
0x0D20	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,1295 :: 		
0x0D22	0xF000EC62  	CALL        _RES032, 0
;__Lib_MathDouble.c,1297 :: 		
0x0D26	0xF006EF9D  	GOTO        MULEEE
;__Lib_MathDouble.c,1298 :: 		
MULJPSETFOV32:
;__Lib_MathDouble.c,1299 :: 		
0x0D2A	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,1302 :: 		
0x0D2C	0xF000ECEF  	CALL        _SETFOV32, 0
;__Lib_MathDouble.c,1304 :: 		
0x0D30	0xF006EF9D  	GOTO        MULEEE
;__Lib_MathDouble.c,1305 :: 		
MULJPSETFUN32:
;__Lib_MathDouble.c,1306 :: 		
0x0D34	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,1309 :: 		
0x0D36	0xF000ECC3  	CALL        _SETFUN32, 0
;__Lib_MathDouble.c,1311 :: 		
MULEEE:
;__Lib_MathDouble.c,1318 :: 		
L_end_Mul_32x32_FP:
0x0D3A	0x0012      	RETURN      0
; end of _Mul_32x32_FP
_double2int:
;__Lib_MathDouble.c,1897 :: 		
;__Lib_MathDouble.c,1906 :: 		
0x0D3C	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,1907 :: 		
0x0D3E	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,1908 :: 		
0x0D40	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1909 :: 		
0x0D42	0xF006EFE4  	GOTO        IRES016
;__Lib_MathDouble.c,1910 :: 		
0x0D46	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,1911 :: 		
0x0D48	0x6E0A      	MOVWF       R10, 0
;__Lib_MathDouble.c,1912 :: 		
0x0D4A	0x8E02      	BSF         R2, 7, 0
;__Lib_MathDouble.c,1914 :: 		
0x0D4C	0x0E8E      	MOVLW       142
;__Lib_MathDouble.c,1915 :: 		
0x0D4E	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,1916 :: 		
0x0D50	0xAE03      	BTFSS       R3, 7, 0
;__Lib_MathDouble.c,1917 :: 		
0x0D52	0xF006EFE8  	GOTO        SETIOV16
;__Lib_MathDouble.c,1918 :: 		
0x0D56	0x6C03      	NEGF        R3, 0
;__Lib_MathDouble.c,1920 :: 		
0x0D58	0x0E08      	MOVLW       8
;__Lib_MathDouble.c,1921 :: 		
0x0D5A	0x5C03      	SUBWF       R3, 0, 0
;__Lib_MathDouble.c,1922 :: 		
0x0D5C	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1923 :: 		
0x0D5E	0xF006EFC3  	GOTO        TSHIFT3216
;__Lib_MathDouble.c,1924 :: 		
0x0D62	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,1925 :: 		
0x0D64	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,1926 :: 		
0x0D66	0xF001C002  	MOVFF       R2, R1
;__Lib_MathDouble.c,1927 :: 		
0x0D6A	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,1929 :: 		
0x0D6C	0x0E08      	MOVLW       8
;__Lib_MathDouble.c,1930 :: 		
0x0D6E	0x5C03      	SUBWF       R3, 0, 0
;__Lib_MathDouble.c,1931 :: 		
0x0D70	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1932 :: 		
0x0D72	0xF006EFC3  	GOTO        TSHIFT3216
;__Lib_MathDouble.c,1933 :: 		
0x0D76	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,1934 :: 		
0x0D78	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,1935 :: 		
0x0D7A	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,1937 :: 		
0x0D7C	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,1938 :: 		
0x0D7E	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,1939 :: 		
0x0D80	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1940 :: 		
0x0D82	0xF006EFCD  	GOTO        SHIFT3216OK
;__Lib_MathDouble.c,1941 :: 		
TSHIFT3216:
;__Lib_MathDouble.c,1942 :: 		
0x0D86	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,1943 :: 		
0x0D88	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1944 :: 		
0x0D8A	0xF006EFCD  	GOTO        SHIFT3216OK
;__Lib_MathDouble.c,1945 :: 		
SHIFT3216:
;__Lib_MathDouble.c,1946 :: 		
0x0D8E	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1947 :: 		
0x0D90	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,1948 :: 		
0x0D92	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,1949 :: 		
0x0D94	0x2E03      	DECFSZ      R3, 1, 0
;__Lib_MathDouble.c,1950 :: 		
0x0D96	0xF006EFC7  	GOTO        SHIFT3216
;__Lib_MathDouble.c,1951 :: 		
SHIFT3216OK:
;__Lib_MathDouble.c,1952 :: 		
0x0D9A	0xBC0B      	BTFSC       R11, 6, 0
;__Lib_MathDouble.c,1953 :: 		
0x0D9C	0xA001      	BTFSS       R1, 0, 0
;__Lib_MathDouble.c,1954 :: 		
0x0D9E	0xF006EFDA  	GOTO        INT3216OK
;__Lib_MathDouble.c,1955 :: 		
0x0DA2	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1956 :: 		
0x0DA4	0xF006EFDA  	GOTO        INT3216OK
;__Lib_MathDouble.c,1957 :: 		
0x0DA8	0x2A01      	INCF        R1, 1, 0
;__Lib_MathDouble.c,1958 :: 		
0x0DAA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1959 :: 		
0x0DAC	0x2A02      	INCF        R2, 1, 0
;__Lib_MathDouble.c,1960 :: 		
0x0DAE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,1961 :: 		
0x0DB0	0xF006EFF7  	GOTO        JPJSETIOV3224
;__Lib_MathDouble.c,1962 :: 		
INT3216OK:
;__Lib_MathDouble.c,1963 :: 		
0x0DB4	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,1964 :: 		
0x0DB6	0xF006EFFD  	GOTO        INT3216EOK
;__Lib_MathDouble.c,1966 :: 		
0x0DBA	0x1E02      	COMF        R2, 1, 0
;__Lib_MathDouble.c,1967 :: 		
0x0DBC	0x1E01      	COMF        R1, 1, 0
;__Lib_MathDouble.c,1968 :: 		
0x0DBE	0x2A01      	INCF        R1, 1, 0
;__Lib_MathDouble.c,1969 :: 		
0x0DC0	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1970 :: 		
0x0DC2	0x2A02      	INCF        R2, 1, 0
;__Lib_MathDouble.c,1971 :: 		
0x0DC4	0xF006EFFD  	GOTO        INT3216EOK
;__Lib_MathDouble.c,1973 :: 		
IRES016:
;__Lib_MathDouble.c,1974 :: 		
0x0DC8	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,1975 :: 		
0x0DCA	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,1976 :: 		
0x0DCC	0xF006EFFD  	GOTO        INT3216EOK
;__Lib_MathDouble.c,1977 :: 		
SETIOV16:
;__Lib_MathDouble.c,1978 :: 		
0x0DD0	0x800B      	BSF         R11, 0, 0
;__Lib_MathDouble.c,1979 :: 		
0x0DD2	0xAE0B      	BTFSS       R11, 7, 0
;__Lib_MathDouble.c,1980 :: 		
0x0DD4	0xF007EF01  	GOTO        INT3216EER
;__Lib_MathDouble.c,1982 :: 		
0x0DD8	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,1983 :: 		
0x0DDA	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,1984 :: 		
0x0DDC	0xF007EF01  	GOTO        INT3216EER
;__Lib_MathDouble.c,1985 :: 		
0x0DE0	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,1986 :: 		
0x0DE2	0x6E02      	MOVWF       R2, 0
;__Lib_MathDouble.c,1987 :: 		
0x0DE4	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,1988 :: 		
0x0DE6	0x360A      	RLCF        R10, 1, 0
;__Lib_MathDouble.c,1989 :: 		
0x0DE8	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,1990 :: 		
0x0DEA	0xF007EF01  	GOTO        INT3216EER
;__Lib_MathDouble.c,1992 :: 		
JPJSETIOV3224:
;__Lib_MathDouble.c,1993 :: 		
0x0DEE	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,1994 :: 		
0x0DF0	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,1996 :: 		
0x0DF2	0xF000ECFB  	CALL        _SETIOV3224, 0
;__Lib_MathDouble.c,1998 :: 		
0x0DF6	0xF007EF03  	GOTO        INT3216EEE
;__Lib_MathDouble.c,1999 :: 		
INT3216EOK:
;__Lib_MathDouble.c,2000 :: 		
0x0DFA	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,2001 :: 		
0x0DFC	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,2002 :: 		
0x0DFE	0xF007EF03  	GOTO        INT3216EEE
;__Lib_MathDouble.c,2003 :: 		
INT3216EER:
;__Lib_MathDouble.c,2004 :: 		
0x0E02	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,2005 :: 		
0x0E04	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,2006 :: 		
INT3216EEE:
;__Lib_MathDouble.c,2007 :: 		
0x0E06	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2008 :: 		
0x0E08	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,2009 :: 		
0x0E0A	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,2010 :: 		
0x0E0C	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,2015 :: 		
L_end_double2int:
0x0E0E	0x0012      	RETURN      0
; end of _double2int
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x0E10	0x0E03      	MOVLW       3
0x0E12	0x6E0C      	MOVWF       R12, 0
0x0E14	0x0E95      	MOVLW       149
0x0E16	0x6E0D      	MOVWF       R13, 0
L_Delay_500us4:
0x0E18	0x2E0D      	DECFSZ      R13, 1, 0
0x0E1A	0xD7FE      	BRA         L_Delay_500us4
0x0E1C	0x2E0C      	DECFSZ      R12, 1, 0
0x0E1E	0xD7FC      	BRA         L_Delay_500us4
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x0E20	0x0012      	RETURN      0
; end of _Delay_500us
_IntToStr:
;__Lib_Conversions.c,195 :: 		
;__Lib_Conversions.c,201 :: 		
0x0E22	0x0103      	MOVLB       3
0x0E24	0x6B6C      	CLRF        IntToStr_negative_L0, 1
0x0E26	0x6B6D      	CLRF        IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,202 :: 		
0x0E28	0xF36EC366  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x0E2C	0xF36FC367  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,203 :: 		
0x0E30	0x0E80      	MOVLW       128
0x0E32	0x1967      	XORWF       FARG_IntToStr_input+1, 0, 1
0x0E34	0x6E00      	MOVWF       R0 
0x0E36	0x0E80      	MOVLW       128
0x0E38	0x5C00      	SUBWF       R0, 0 
0x0E3A	0xE102      	BNZ         L__IntToStr387
0x0E3C	0x0E00      	MOVLW       0
0x0E3E	0x5D66      	SUBWF       FARG_IntToStr_input, 0, 1
L__IntToStr387:
0x0E40	0xE20B      	BC          L_IntToStr37
;__Lib_Conversions.c,204 :: 		
0x0E42	0x0E01      	MOVLW       1
0x0E44	0x6F6C      	MOVWF       IntToStr_negative_L0, 1
0x0E46	0x0E00      	MOVLW       0
0x0E48	0x6F6D      	MOVWF       IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,205 :: 		
0x0E4A	0x5166      	MOVF        FARG_IntToStr_input, 0, 1
0x0E4C	0x0800      	SUBLW       0
0x0E4E	0x6F6E      	MOVWF       IntToStr_inword_L0, 1
0x0E50	0xF36FC367  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x0E54	0x0E00      	MOVLW       0
0x0E56	0x576F      	SUBFWB      IntToStr_inword_L0+1, 1, 1
;__Lib_Conversions.c,206 :: 		
L_IntToStr37:
;__Lib_Conversions.c,207 :: 		
0x0E58	0xF370C36E  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x0E5C	0xF371C36F  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x0E60	0xF372C368  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x0E64	0xF373C369  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x0E68	0xF001EC09  	CALL        _WordToStr, 0
;__Lib_Conversions.c,209 :: 		
0x0E6C	0x0E06      	MOVLW       6
0x0E6E	0x6F6A      	MOVWF       IntToStr_i_L0, 1
0x0E70	0x0E00      	MOVLW       0
0x0E72	0x6F6B      	MOVWF       IntToStr_i_L0+1, 1
;__Lib_Conversions.c,210 :: 		
L_IntToStr38:
0x0E74	0x0E00      	MOVLW       0
0x0E76	0x6E00      	MOVWF       R0 
0x0E78	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0E7A	0x5C00      	SUBWF       R0, 0 
0x0E7C	0xE102      	BNZ         L__IntToStr388
0x0E7E	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x0E80	0x0800      	SUBLW       0
L__IntToStr388:
0x0E82	0xE219      	BC          L_IntToStr39
;__Lib_Conversions.c,211 :: 		
0x0E84	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x0E86	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x0E88	0x6EE1      	MOVWF       FSR1L 
0x0E8A	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0E8C	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0E8E	0x6EE2      	MOVWF       FSR1L+1 
0x0E90	0x0E01      	MOVLW       1
0x0E92	0x5D6A      	SUBWF       IntToStr_i_L0, 0, 1
0x0E94	0x6E00      	MOVWF       R0 
0x0E96	0x0E00      	MOVLW       0
0x0E98	0x596B      	SUBWFB      IntToStr_i_L0+1, 0, 1
0x0E9A	0x6E01      	MOVWF       R1 
0x0E9C	0x5000      	MOVF        R0, 0 
0x0E9E	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x0EA0	0x6EE9      	MOVWF       FSR0L 
0x0EA2	0x5001      	MOVF        R1, 0 
0x0EA4	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0EA6	0x6EEA      	MOVWF       FSR0L+1 
0x0EA8	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,212 :: 		
0x0EAC	0x0E01      	MOVLW       1
0x0EAE	0x5F6A      	SUBWF       IntToStr_i_L0, 1, 1
0x0EB0	0x0E00      	MOVLW       0
0x0EB2	0x5B6B      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,213 :: 		
0x0EB4	0xD7DF      	BRA         L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c,214 :: 		
0x0EB6	0xFFE1C368  	MOVFF       FARG_IntToStr_output, FSR1L
0x0EBA	0xFFE2C369  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x0EBE	0x0E20      	MOVLW       32
0x0EC0	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,215 :: 		
0x0EC2	0x516C      	MOVF        IntToStr_negative_L0, 0, 1
0x0EC4	0x116D      	IORWF       IntToStr_negative_L0+1, 0, 1
0x0EC6	0xE01A      	BZ          L_IntToStr40
;__Lib_Conversions.c,216 :: 		
0x0EC8	0x6B6A      	CLRF        IntToStr_i_L0, 1
0x0ECA	0x6B6B      	CLRF        IntToStr_i_L0+1, 1
;__Lib_Conversions.c,217 :: 		
L_IntToStr41:
0x0ECC	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x0ECE	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x0ED0	0x6EE9      	MOVWF       FSR0L 
0x0ED2	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0ED4	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0ED6	0x6EEA      	MOVWF       FSR0L+1 
0x0ED8	0x50EE      	MOVF        POSTINC0, 0 
0x0EDA	0x0A20      	XORLW       32
0x0EDC	0xE103      	BNZ         L_IntToStr42
0x0EDE	0x4B6A      	INFSNZ      IntToStr_i_L0, 1, 1
0x0EE0	0x2B6B      	INCF        IntToStr_i_L0+1, 1, 1
0x0EE2	0xD7F4      	BRA         L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c,218 :: 		
0x0EE4	0x0E01      	MOVLW       1
0x0EE6	0x5F6A      	SUBWF       IntToStr_i_L0, 1, 1
0x0EE8	0x0E00      	MOVLW       0
0x0EEA	0x5B6B      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,219 :: 		
0x0EEC	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x0EEE	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x0EF0	0x6EE1      	MOVWF       FSR1L 
0x0EF2	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0EF4	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0EF6	0x6EE2      	MOVWF       FSR1L+1 
0x0EF8	0x0E2D      	MOVLW       45
0x0EFA	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr40:
;__Lib_Conversions.c,220 :: 		
L_end_IntToStr:
0x0EFC	0x0012      	RETURN      0
; end of _IntToStr
_led_wr_str:
;oled_control.c,250 :: 		void led_wr_str (char col, char pos, char str[], char leng ) {  //
;oled_control.c,252 :: 		if(led_type==4 | led_type==5) oled_wr_str(pos, col, str, leng); // 128*64  OLED display
0x0EFE	0x0102      	MOVLB       2
0x0F00	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0F02	0x0A04      	XORLW       4
0x0F04	0x0E01      	MOVLW       1
0x0F06	0xA4D8      	BTFSS       STATUS, 2 
0x0F08	0x0E00      	MOVLW       0
0x0F0A	0x6E01      	MOVWF       R1 
0x0F0C	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0F0E	0x0A05      	XORLW       5
0x0F10	0x0E01      	MOVLW       1
0x0F12	0xA4D8      	BTFSS       STATUS, 2 
0x0F14	0x0E00      	MOVLW       0
0x0F16	0x6E00      	MOVWF       R0 
0x0F18	0x5001      	MOVF        R1, 0 
0x0F1A	0x1200      	IORWF       R0, 1 
0x0F1C	0xE00D      	BZ          L_led_wr_str43
0x0F1E	0xF370C367  	MOVFF       FARG_led_wr_str_pos, FARG_oled_wr_str_col
0x0F22	0xF371C366  	MOVFF       FARG_led_wr_str_col, FARG_oled_wr_str_page
0x0F26	0xF372C368  	MOVFF       FARG_led_wr_str_str, FARG_oled_wr_str_str
0x0F2A	0xF373C369  	MOVFF       FARG_led_wr_str_str+1, FARG_oled_wr_str_str+1
0x0F2E	0xF374C36A  	MOVFF       FARG_led_wr_str_leng, FARG_oled_wr_str_leng
0x0F32	0xF001EC52  	CALL        _oled_wr_str, 0
0x0F36	0xD05D      	BRA         L_led_wr_str44
L_led_wr_str43:
;oled_control.c,253 :: 		else if(led_type==2 | led_type==3) oled_wr_str(7*pos+4, col*2, str, leng); // 128*32   OLED display
0x0F38	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0F3A	0x0A02      	XORLW       2
0x0F3C	0x0E01      	MOVLW       1
0x0F3E	0xA4D8      	BTFSS       STATUS, 2 
0x0F40	0x0E00      	MOVLW       0
0x0F42	0x6E01      	MOVWF       R1 
0x0F44	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x0F46	0x0A03      	XORLW       3
0x0F48	0x0E01      	MOVLW       1
0x0F4A	0xA4D8      	BTFSS       STATUS, 2 
0x0F4C	0x0E00      	MOVLW       0
0x0F4E	0x6E00      	MOVWF       R0 
0x0F50	0x5001      	MOVF        R1, 0 
0x0F52	0x1200      	IORWF       R0, 1 
0x0F54	0xE014      	BZ          L_led_wr_str45
0x0F56	0x0E07      	MOVLW       7
0x0F58	0x0103      	MOVLB       3
0x0F5A	0x0367      	MULWF       FARG_led_wr_str_pos, 1
0x0F5C	0xF370CFF3  	MOVFF       PRODL, FARG_oled_wr_str_col
0x0F60	0x0E04      	MOVLW       4
0x0F62	0x2770      	ADDWF       FARG_oled_wr_str_col, 1, 1
0x0F64	0xF371C366  	MOVFF       FARG_led_wr_str_col, FARG_oled_wr_str_page
0x0F68	0x3771      	RLCF        FARG_oled_wr_str_page, 1, 1
0x0F6A	0x9171      	BCF         FARG_oled_wr_str_page, 0, 1
0x0F6C	0xF372C368  	MOVFF       FARG_led_wr_str_str, FARG_oled_wr_str_str
0x0F70	0xF373C369  	MOVFF       FARG_led_wr_str_str+1, FARG_oled_wr_str_str+1
0x0F74	0xF374C36A  	MOVFF       FARG_led_wr_str_leng, FARG_oled_wr_str_leng
0x0F78	0xF001EC52  	CALL        _oled_wr_str, 0
0x0F7C	0xD03A      	BRA         L_led_wr_str46
L_led_wr_str45:
;oled_control.c,256 :: 		RS = 0;
0x0F7E	0x6BBF      	CLRF        oled_control_RS, 1
;oled_control.c,257 :: 		led_send(8 + col*4);
0x0F80	0xF000C366  	MOVFF       FARG_led_wr_str_col, R0
0x0F84	0x3600      	RLCF        R0, 1 
0x0F86	0x9000      	BCF         R0, 0 
0x0F88	0x3600      	RLCF        R0, 1 
0x0F8A	0x9000      	BCF         R0, 0 
0x0F8C	0x5000      	MOVF        R0, 0 
0x0F8E	0x0F08      	ADDLW       8
0x0F90	0x0103      	MOVLB       3
0x0F92	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x0F94	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,258 :: 		led_send(pos);
0x0F98	0xF370C367  	MOVFF       FARG_led_wr_str_pos, FARG_led_send_nible
0x0F9C	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,260 :: 		RS = 1;
0x0FA0	0x0E01      	MOVLW       1
0x0FA2	0x6FBF      	MOVWF       oled_control_RS, 1
;oled_control.c,261 :: 		for (i = 0; i < leng; i++) { // write string
0x0FA4	0x0103      	MOVLB       3
0x0FA6	0x6B6B      	CLRF        led_wr_str_i_L0, 1
L_led_wr_str47:
0x0FA8	0x516A      	MOVF        FARG_led_wr_str_leng, 0, 1
0x0FAA	0x5D6B      	SUBWF       led_wr_str_i_L0, 0, 1
0x0FAC	0xE222      	BC          L_led_wr_str48
;oled_control.c,263 :: 		led_send(str[i] >> 4);
0x0FAE	0x516B      	MOVF        led_wr_str_i_L0, 0, 1
0x0FB0	0x2568      	ADDWF       FARG_led_wr_str_str, 0, 1
0x0FB2	0x6EE9      	MOVWF       FSR0L 
0x0FB4	0x0E00      	MOVLW       0
0x0FB6	0x2169      	ADDWFC      FARG_led_wr_str_str+1, 0, 1
0x0FB8	0x6EEA      	MOVWF       FSR0L+1 
0x0FBA	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0FBE	0xF370C001  	MOVFF       R1, FARG_led_send_nible
0x0FC2	0x3370      	RRCF        FARG_led_send_nible, 1, 1
0x0FC4	0x9F70      	BCF         FARG_led_send_nible, 7, 1
0x0FC6	0x3370      	RRCF        FARG_led_send_nible, 1, 1
0x0FC8	0x9F70      	BCF         FARG_led_send_nible, 7, 1
0x0FCA	0x3370      	RRCF        FARG_led_send_nible, 1, 1
0x0FCC	0x9F70      	BCF         FARG_led_send_nible, 7, 1
0x0FCE	0x3370      	RRCF        FARG_led_send_nible, 1, 1
0x0FD0	0x9F70      	BCF         FARG_led_send_nible, 7, 1
0x0FD2	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,264 :: 		led_send(str[i]);
0x0FD6	0x0103      	MOVLB       3
0x0FD8	0x516B      	MOVF        led_wr_str_i_L0, 0, 1
0x0FDA	0x2568      	ADDWF       FARG_led_wr_str_str, 0, 1
0x0FDC	0x6EE9      	MOVWF       FSR0L 
0x0FDE	0x0E00      	MOVLW       0
0x0FE0	0x2169      	ADDWFC      FARG_led_wr_str_str+1, 0, 1
0x0FE2	0x6EEA      	MOVWF       FSR0L+1 
0x0FE4	0xF370CFEE  	MOVFF       POSTINC0, FARG_led_send_nible
0x0FE8	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,261 :: 		for (i = 0; i < leng; i++) { // write string
0x0FEC	0x0103      	MOVLB       3
0x0FEE	0x2B6B      	INCF        led_wr_str_i_L0, 1, 1
;oled_control.c,265 :: 		}
0x0FF0	0xD7DB      	BRA         L_led_wr_str47
L_led_wr_str48:
;oled_control.c,267 :: 		}
L_led_wr_str46:
L_led_wr_str44:
;oled_control.c,268 :: 		}
L_end_led_wr_str:
0x0FF2	0x0012      	RETURN      0
; end of _led_wr_str
_SETFDZ32:
;__Lib_MathDouble.c,106 :: 		
;__Lib_MathDouble.c,110 :: 		
0x0FF4	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,111 :: 		
0x0FF6	0x860B      	BSF         R11, 3, 0
;__Lib_MathDouble.c,112 :: 		
0x0FF8	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,114 :: 		
L_end_SETFDZ32:
0x0FFA	0x0012      	RETURN      0
; end of _SETFDZ32
_send_command:
;oled_control.c,222 :: 		void send_command (char oled_command) {
;oled_control.c,223 :: 		Soft_I2C_Start();
0x0FFC	0xF000EC45  	CALL        _Soft_I2C_Start, 0
;oled_control.c,224 :: 		Soft_I2C_Write(led_addr);         // device addres
0x1000	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x1004	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,225 :: 		Soft_I2C_Write(128);              // 128 - command, 192 - data
0x1008	0x0E80      	MOVLW       128
0x100A	0x0103      	MOVLB       3
0x100C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x100E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,226 :: 		Soft_I2C_Write(oled_command);
0x1012	0xF37FC35F  	MOVFF       FARG_send_command_oled_command, FARG_Soft_I2C_Write_d
0x1016	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,227 :: 		Soft_I2C_Stop();
0x101A	0xF000EC69  	CALL        _Soft_I2C_Stop, 0
;oled_control.c,228 :: 		}
L_end_send_command:
0x101E	0x0012      	RETURN      0
; end of _send_command
_lcd_ind:
;main.c,830 :: 		void lcd_ind() {
;main.c,832 :: 		asm CLRWDT;
0x1020	0x0004      	CLRWDT
;main.c,834 :: 		work_int = 0;
0x1022	0x0102      	MOVLB       2
0x1024	0x6BF6      	CLRF        _work_int, 1
0x1026	0x6BF7      	CLRF        _work_int+1, 1
;main.c,835 :: 		if (ind.B0)
0x1028	0xA175      	BTFSS       main_ind, 0, 1
0x102A	0xD004      	BRA         L_lcd_ind399
;main.c,836 :: 		work_int += Ind1;
0x102C	0x51F4      	MOVF        _Ind1, 0, 1
0x102E	0x27F6      	ADDWF       _work_int, 1, 1
0x1030	0x51F5      	MOVF        _Ind1+1, 0, 1
0x1032	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind399:
;main.c,837 :: 		if (ind.B1)
0x1034	0xA375      	BTFSS       main_ind, 1, 1
0x1036	0xD004      	BRA         L_lcd_ind400
;main.c,838 :: 		work_int += Ind2;
0x1038	0x51F2      	MOVF        _Ind2, 0, 1
0x103A	0x27F6      	ADDWF       _work_int, 1, 1
0x103C	0x51F3      	MOVF        _Ind2+1, 0, 1
0x103E	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind400:
;main.c,839 :: 		if (ind.B2)
0x1040	0xA575      	BTFSS       main_ind, 2, 1
0x1042	0xD004      	BRA         L_lcd_ind401
;main.c,840 :: 		work_int += Ind3;
0x1044	0x51FC      	MOVF        _Ind3, 0, 1
0x1046	0x27F6      	ADDWF       _work_int, 1, 1
0x1048	0x51FD      	MOVF        _Ind3+1, 0, 1
0x104A	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind401:
;main.c,841 :: 		if (ind.B3)
0x104C	0xA775      	BTFSS       main_ind, 3, 1
0x104E	0xD004      	BRA         L_lcd_ind402
;main.c,842 :: 		work_int += Ind4;
0x1050	0x51FA      	MOVF        _Ind4, 0, 1
0x1052	0x27F6      	ADDWF       _work_int, 1, 1
0x1054	0x51FB      	MOVF        _Ind4+1, 0, 1
0x1056	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind402:
;main.c,843 :: 		if (ind.B4)
0x1058	0xA975      	BTFSS       main_ind, 4, 1
0x105A	0xD004      	BRA         L_lcd_ind403
;main.c,844 :: 		work_int += Ind5;
0x105C	0x51F8      	MOVF        _Ind5, 0, 1
0x105E	0x27F6      	ADDWF       _work_int, 1, 1
0x1060	0x51F9      	MOVF        _Ind5+1, 0, 1
0x1062	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind403:
;main.c,845 :: 		if (ind.B5)
0x1064	0xAB75      	BTFSS       main_ind, 5, 1
0x1066	0xD004      	BRA         L_lcd_ind404
;main.c,846 :: 		work_int += Ind6;
0x1068	0x51F0      	MOVF        _Ind6, 0, 1
0x106A	0x27F6      	ADDWF       _work_int, 1, 1
0x106C	0x51F1      	MOVF        _Ind6+1, 0, 1
0x106E	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind404:
;main.c,847 :: 		if (ind.B6)
0x1070	0xAD75      	BTFSS       main_ind, 6, 1
0x1072	0xD004      	BRA         L_lcd_ind405
;main.c,848 :: 		work_int += Ind7;
0x1074	0x51EE      	MOVF        _Ind7, 0, 1
0x1076	0x27F6      	ADDWF       _work_int, 1, 1
0x1078	0x51EF      	MOVF        _Ind7+1, 0, 1
0x107A	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind405:
;main.c,849 :: 		if (work_int > 9999) { // more then 9999 nH
0x107C	0x0E80      	MOVLW       128
0x107E	0x0A27      	XORLW       39
0x1080	0x6E00      	MOVWF       R0 
0x1082	0x0E80      	MOVLW       128
0x1084	0x19F7      	XORWF       _work_int+1, 0, 1
0x1086	0x5C00      	SUBWF       R0, 0 
0x1088	0xE102      	BNZ         L__lcd_ind678
0x108A	0x51F6      	MOVF        _work_int, 0, 1
0x108C	0x080F      	SUBLW       15
L__lcd_ind678:
0x108E	0xE21E      	BC          L_lcd_ind406
;main.c,850 :: 		work_int += 50; // round
0x1090	0x0E32      	MOVLW       50
0x1092	0x25F6      	ADDWF       _work_int, 0, 1
0x1094	0x6E00      	MOVWF       R0 
0x1096	0x0E00      	MOVLW       0
0x1098	0x21F7      	ADDWFC      _work_int+1, 0, 1
0x109A	0x6E01      	MOVWF       R1 
0x109C	0xF2F6C000  	MOVFF       R0, _work_int
0x10A0	0xF2F7C001  	MOVFF       R1, _work_int+1
;main.c,851 :: 		IntToStr(work_int, work_str);
0x10A4	0xF366C000  	MOVFF       R0, FARG_IntToStr_input
0x10A8	0xF367C001  	MOVFF       R1, FARG_IntToStr_input+1
0x10AC	0x0EE7      	MOVLW       _work_str
0x10AE	0x0103      	MOVLB       3
0x10B0	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x10B2	0x0E02      	MOVLW       hi_addr(_work_str)
0x10B4	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x10B6	0xDEB5      	RCALL       _IntToStr
;main.c,852 :: 		work_str_2[0] = work_str[1];
0x10B8	0xF2E0C2E8  	MOVFF       _work_str+1, _work_str_2
;main.c,853 :: 		work_str_2[1] = work_str[2];
0x10BC	0xF2E1C2E9  	MOVFF       _work_str+2, _work_str_2+1
;main.c,854 :: 		work_str_2[2] = '.';
0x10C0	0x0E2E      	MOVLW       46
0x10C2	0x0102      	MOVLB       2
0x10C4	0x6FE2      	MOVWF       _work_str_2+2, 1
;main.c,855 :: 		work_str_2[3] = work_str[3];
0x10C6	0xF2E3C2EA  	MOVFF       _work_str+3, _work_str_2+3
;main.c,856 :: 		} else {
0x10CA	0xD025      	BRA         L_lcd_ind407
L_lcd_ind406:
;main.c,857 :: 		IntToStr(work_int, work_str);
0x10CC	0xF366C2F6  	MOVFF       _work_int, FARG_IntToStr_input
0x10D0	0xF367C2F7  	MOVFF       _work_int+1, FARG_IntToStr_input+1
0x10D4	0x0EE7      	MOVLW       _work_str
0x10D6	0x0103      	MOVLB       3
0x10D8	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x10DA	0x0E02      	MOVLW       hi_addr(_work_str)
0x10DC	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x10DE	0xDEA1      	RCALL       _IntToStr
;main.c,858 :: 		if (work_str[2] != ' ')
0x10E0	0x0102      	MOVLB       2
0x10E2	0x51E9      	MOVF        _work_str+2, 0, 1
0x10E4	0x0A20      	XORLW       32
0x10E6	0xE003      	BZ          L_lcd_ind408
;main.c,859 :: 		work_str_2[0] = work_str[2];
0x10E8	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
0x10EC	0xD002      	BRA         L_lcd_ind409
L_lcd_ind408:
;main.c,861 :: 		work_str_2[0] = '0';
0x10EE	0x0E30      	MOVLW       48
0x10F0	0x6FE0      	MOVWF       _work_str_2, 1
L_lcd_ind409:
;main.c,862 :: 		work_str_2[1] = '.';
0x10F2	0x0E2E      	MOVLW       46
0x10F4	0x6FE1      	MOVWF       _work_str_2+1, 1
;main.c,863 :: 		if (work_str[3] != ' ')
0x10F6	0x51EA      	MOVF        _work_str+3, 0, 1
0x10F8	0x0A20      	XORLW       32
0x10FA	0xE003      	BZ          L_lcd_ind410
;main.c,864 :: 		work_str_2[2] = work_str[3];
0x10FC	0xF2E2C2EA  	MOVFF       _work_str+3, _work_str_2+2
0x1100	0xD002      	BRA         L_lcd_ind411
L_lcd_ind410:
;main.c,866 :: 		work_str_2[2] = '0';
0x1102	0x0E30      	MOVLW       48
0x1104	0x6FE2      	MOVWF       _work_str_2+2, 1
L_lcd_ind411:
;main.c,867 :: 		if (work_str[4] != ' ')
0x1106	0x51EB      	MOVF        _work_str+4, 0, 1
0x1108	0x0A20      	XORLW       32
0x110A	0xE003      	BZ          L_lcd_ind412
;main.c,868 :: 		work_str_2[3] = work_str[4];
0x110C	0xF2E3C2EB  	MOVFF       _work_str+4, _work_str_2+3
0x1110	0xD002      	BRA         L_lcd_ind413
L_lcd_ind412:
;main.c,870 :: 		work_str_2[3] = '0';
0x1112	0x0E30      	MOVLW       48
0x1114	0x6FE3      	MOVWF       _work_str_2+3, 1
L_lcd_ind413:
;main.c,871 :: 		}
L_lcd_ind407:
;main.c,872 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x1116	0x51D7      	MOVF        _type, 0, 1
0x1118	0x0A04      	XORLW       4
0x111A	0x0E01      	MOVLW       1
0x111C	0xA4D8      	BTFSS       STATUS, 2 
0x111E	0x0E00      	MOVLW       0
0x1120	0x6E01      	MOVWF       R1 
0x1122	0x51D7      	MOVF        _type, 0, 1
0x1124	0x0A05      	XORLW       5
0x1126	0x0E01      	MOVLW       1
0x1128	0xA4D8      	BTFSS       STATUS, 2 
0x112A	0x0E00      	MOVLW       0
0x112C	0x6E00      	MOVWF       R0 
0x112E	0x5001      	MOVF        R1, 0 
0x1130	0x1200      	IORWF       R0, 1 
0x1132	0xE02E      	BZ          L_lcd_ind414
;main.c,873 :: 		if (SW == 1)
0x1134	0x5173      	MOVF        main_SW, 0, 1
0x1136	0x0A01      	XORLW       1
0x1138	0xE104      	BNZ         L_lcd_ind415
;main.c,874 :: 		column = 4;
0x113A	0x0E04      	MOVLW       4
0x113C	0x0103      	MOVLB       3
0x113E	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
0x1140	0xD003      	BRA         L_lcd_ind416
L_lcd_ind415:
0x1142	0x0103      	MOVLB       3
;main.c,876 :: 		column = 6;
0x1144	0x0E06      	MOVLW       6
0x1146	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
L_lcd_ind416:
;main.c,877 :: 		led_wr_str(column, 16, "L=", 2);
0x1148	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x114C	0x0E10      	MOVLW       16
0x114E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1150	0x0E94      	MOVLW       ?lstr77_main
0x1152	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1154	0x0E02      	MOVLW       hi_addr(?lstr77_main)
0x1156	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1158	0x0E02      	MOVLW       2
0x115A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x115C	0xDED0      	RCALL       _led_wr_str
;main.c,878 :: 		led_wr_str(column, 16 + 6 * 12, "uH", 2);
0x115E	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1162	0x0E58      	MOVLW       88
0x1164	0x0103      	MOVLB       3
0x1166	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1168	0x0E91      	MOVLW       ?lstr78_main
0x116A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x116C	0x0E02      	MOVLW       hi_addr(?lstr78_main)
0x116E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1170	0x0E02      	MOVLW       2
0x1172	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1174	0xDEC4      	RCALL       _led_wr_str
;main.c,879 :: 		led_wr_str(column, 16 + 2 * 12, work_str_2, 4);
0x1176	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x117A	0x0E28      	MOVLW       40
0x117C	0x0103      	MOVLB       3
0x117E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1180	0x0EE0      	MOVLW       _work_str_2
0x1182	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1184	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x1186	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1188	0x0E04      	MOVLW       4
0x118A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x118C	0xDEB8      	RCALL       _led_wr_str
;main.c,880 :: 		} else if (type == 2 | type == 3) { // 128*32 OLED
0x118E	0xD06D      	BRA         L_lcd_ind417
L_lcd_ind414:
0x1190	0x0102      	MOVLB       2
0x1192	0x51D7      	MOVF        _type, 0, 1
0x1194	0x0A02      	XORLW       2
0x1196	0x0E01      	MOVLW       1
0x1198	0xA4D8      	BTFSS       STATUS, 2 
0x119A	0x0E00      	MOVLW       0
0x119C	0x6E01      	MOVWF       R1 
0x119E	0x51D7      	MOVF        _type, 0, 1
0x11A0	0x0A03      	XORLW       3
0x11A2	0x0E01      	MOVLW       1
0x11A4	0xA4D8      	BTFSS       STATUS, 2 
0x11A6	0x0E00      	MOVLW       0
0x11A8	0x6E00      	MOVWF       R0 
0x11AA	0x5001      	MOVF        R1, 0 
0x11AC	0x1200      	IORWF       R0, 1 
0x11AE	0xE02D      	BZ          L_lcd_ind418
;main.c,881 :: 		if (SW == 1)
0x11B0	0x5173      	MOVF        main_SW, 0, 1
0x11B2	0x0A01      	XORLW       1
0x11B4	0xE103      	BNZ         L_lcd_ind419
;main.c,882 :: 		column = 0;
0x11B6	0x0103      	MOVLB       3
0x11B8	0x6B5F      	CLRF        lcd_ind_column_L0, 1
0x11BA	0xD003      	BRA         L_lcd_ind420
L_lcd_ind419:
0x11BC	0x0103      	MOVLB       3
;main.c,884 :: 		column = 1;
0x11BE	0x0E01      	MOVLW       1
0x11C0	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
L_lcd_ind420:
;main.c,885 :: 		led_wr_str(column, 9, "L=", 2);
0x11C2	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x11C6	0x0E09      	MOVLW       9
0x11C8	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x11CA	0x0E8E      	MOVLW       ?lstr79_main
0x11CC	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x11CE	0x0E02      	MOVLW       hi_addr(?lstr79_main)
0x11D0	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x11D2	0x0E02      	MOVLW       2
0x11D4	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x11D6	0xDE93      	RCALL       _led_wr_str
;main.c,886 :: 		led_wr_str(column, 15, "uH", 2);
0x11D8	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x11DC	0x0E0F      	MOVLW       15
0x11DE	0x0103      	MOVLB       3
0x11E0	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x11E2	0x0EA4      	MOVLW       ?lstr80_main
0x11E4	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x11E6	0x0E02      	MOVLW       hi_addr(?lstr80_main)
0x11E8	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x11EA	0x0E02      	MOVLW       2
0x11EC	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x11EE	0xDE87      	RCALL       _led_wr_str
;main.c,887 :: 		led_wr_str(column, 11, work_str_2, 4);
0x11F0	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x11F4	0x0E0B      	MOVLW       11
0x11F6	0x0103      	MOVLB       3
0x11F8	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x11FA	0x0EE0      	MOVLW       _work_str_2
0x11FC	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x11FE	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x1200	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1202	0x0E04      	MOVLW       4
0x1204	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1206	0xDE7B      	RCALL       _led_wr_str
;main.c,888 :: 		} else if (type == 1) { //  1602 LCD
0x1208	0xD030      	BRA         L_lcd_ind421
L_lcd_ind418:
0x120A	0x0102      	MOVLB       2
0x120C	0x51D7      	MOVF        _type, 0, 1
0x120E	0x0A01      	XORLW       1
0x1210	0xE12C      	BNZ         L_lcd_ind422
;main.c,889 :: 		if (SW == 1)
0x1212	0x5173      	MOVF        main_SW, 0, 1
0x1214	0x0A01      	XORLW       1
0x1216	0xE103      	BNZ         L_lcd_ind423
;main.c,890 :: 		column = 0;
0x1218	0x0103      	MOVLB       3
0x121A	0x6B5F      	CLRF        lcd_ind_column_L0, 1
0x121C	0xD003      	BRA         L_lcd_ind424
L_lcd_ind423:
0x121E	0x0103      	MOVLB       3
;main.c,892 :: 		column = 1;
0x1220	0x0E01      	MOVLW       1
0x1222	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
L_lcd_ind424:
;main.c,893 :: 		led_wr_str(column, 9, "L=", 2);
0x1224	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1228	0x0E09      	MOVLW       9
0x122A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x122C	0x0EA1      	MOVLW       ?lstr81_main
0x122E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1230	0x0E02      	MOVLW       hi_addr(?lstr81_main)
0x1232	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1234	0x0E02      	MOVLW       2
0x1236	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1238	0xDE62      	RCALL       _led_wr_str
;main.c,894 :: 		led_wr_str(column, 15, "u", 1);
0x123A	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x123E	0x0E0F      	MOVLW       15
0x1240	0x0103      	MOVLB       3
0x1242	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1244	0x0E9F      	MOVLW       ?lstr82_main
0x1246	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1248	0x0E02      	MOVLW       hi_addr(?lstr82_main)
0x124A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x124C	0x0E01      	MOVLW       1
0x124E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1250	0xDE56      	RCALL       _led_wr_str
;main.c,895 :: 		led_wr_str(column, 11, work_str_2, 4);
0x1252	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1256	0x0E0B      	MOVLW       11
0x1258	0x0103      	MOVLB       3
0x125A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x125C	0x0EE0      	MOVLW       _work_str_2
0x125E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1260	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x1262	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1264	0x0E04      	MOVLW       4
0x1266	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1268	0xDE4A      	RCALL       _led_wr_str
;main.c,896 :: 		}
L_lcd_ind422:
L_lcd_ind421:
L_lcd_ind417:
;main.c,898 :: 		asm CLRWDT;
0x126A	0x0004      	CLRWDT
;main.c,900 :: 		work_int = 0;
0x126C	0x0102      	MOVLB       2
0x126E	0x6BF6      	CLRF        _work_int, 1
0x1270	0x6BF7      	CLRF        _work_int+1, 1
;main.c,901 :: 		if (cap.B0)
0x1272	0xA15D      	BTFSS       main_cap, 0, 1
0x1274	0xD008      	BRA         L_lcd_ind426
;main.c,902 :: 		work_int += Cap1;
0x1276	0x0103      	MOVLB       3
0x1278	0x510B      	MOVF        _Cap1, 0, 1
0x127A	0x0102      	MOVLB       2
0x127C	0x27F6      	ADDWF       _work_int, 1, 1
0x127E	0x0103      	MOVLB       3
0x1280	0x510C      	MOVF        _Cap1+1, 0, 1
0x1282	0x0102      	MOVLB       2
0x1284	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind426:
;main.c,903 :: 		if (cap.B1)
0x1286	0xA35D      	BTFSS       main_cap, 1, 1
0x1288	0xD008      	BRA         L_lcd_ind427
;main.c,904 :: 		work_int += Cap2;
0x128A	0x0103      	MOVLB       3
0x128C	0x5109      	MOVF        _Cap2, 0, 1
0x128E	0x0102      	MOVLB       2
0x1290	0x27F6      	ADDWF       _work_int, 1, 1
0x1292	0x0103      	MOVLB       3
0x1294	0x510A      	MOVF        _Cap2+1, 0, 1
0x1296	0x0102      	MOVLB       2
0x1298	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind427:
;main.c,905 :: 		if (cap.B2)
0x129A	0xA55D      	BTFSS       main_cap, 2, 1
0x129C	0xD008      	BRA         L_lcd_ind428
;main.c,906 :: 		work_int += Cap3;
0x129E	0x0103      	MOVLB       3
0x12A0	0x5107      	MOVF        _Cap3, 0, 1
0x12A2	0x0102      	MOVLB       2
0x12A4	0x27F6      	ADDWF       _work_int, 1, 1
0x12A6	0x0103      	MOVLB       3
0x12A8	0x5108      	MOVF        _Cap3+1, 0, 1
0x12AA	0x0102      	MOVLB       2
0x12AC	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind428:
;main.c,907 :: 		if (cap.B3)
0x12AE	0xA75D      	BTFSS       main_cap, 3, 1
0x12B0	0xD008      	BRA         L_lcd_ind429
;main.c,908 :: 		work_int += Cap4;
0x12B2	0x0103      	MOVLB       3
0x12B4	0x5105      	MOVF        _Cap4, 0, 1
0x12B6	0x0102      	MOVLB       2
0x12B8	0x27F6      	ADDWF       _work_int, 1, 1
0x12BA	0x0103      	MOVLB       3
0x12BC	0x5106      	MOVF        _Cap4+1, 0, 1
0x12BE	0x0102      	MOVLB       2
0x12C0	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind429:
;main.c,909 :: 		if (cap.B4)
0x12C2	0xA95D      	BTFSS       main_cap, 4, 1
0x12C4	0xD008      	BRA         L_lcd_ind430
;main.c,910 :: 		work_int += Cap5;
0x12C6	0x0103      	MOVLB       3
0x12C8	0x5103      	MOVF        _Cap5, 0, 1
0x12CA	0x0102      	MOVLB       2
0x12CC	0x27F6      	ADDWF       _work_int, 1, 1
0x12CE	0x0103      	MOVLB       3
0x12D0	0x5104      	MOVF        _Cap5+1, 0, 1
0x12D2	0x0102      	MOVLB       2
0x12D4	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind430:
;main.c,911 :: 		if (cap.B5)
0x12D6	0xAB5D      	BTFSS       main_cap, 5, 1
0x12D8	0xD008      	BRA         L_lcd_ind431
;main.c,912 :: 		work_int += Cap6;
0x12DA	0x0103      	MOVLB       3
0x12DC	0x5101      	MOVF        _Cap6, 0, 1
0x12DE	0x0102      	MOVLB       2
0x12E0	0x27F6      	ADDWF       _work_int, 1, 1
0x12E2	0x0103      	MOVLB       3
0x12E4	0x5102      	MOVF        _Cap6+1, 0, 1
0x12E6	0x0102      	MOVLB       2
0x12E8	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind431:
;main.c,913 :: 		if (cap.B6)
0x12EA	0xAD5D      	BTFSS       main_cap, 6, 1
0x12EC	0xD004      	BRA         L_lcd_ind432
;main.c,914 :: 		work_int += Cap7;
0x12EE	0x51FE      	MOVF        _Cap7, 0, 1
0x12F0	0x27F6      	ADDWF       _work_int, 1, 1
0x12F2	0x51FF      	MOVF        _Cap7+1, 0, 1
0x12F4	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind432:
;main.c,915 :: 		if (mem_offset == band_160m)
0x12F6	0x5172      	MOVF        _mem_offset, 0, 1
0x12F8	0x195A      	XORWF       _band_160m, 0, 1
0x12FA	0xE104      	BNZ         L_lcd_ind433
;main.c,916 :: 		work_int += C8_value;
0x12FC	0x519D      	MOVF        _C8_value, 0, 1
0x12FE	0x27F6      	ADDWF       _work_int, 1, 1
0x1300	0x519E      	MOVF        _C8_value+1, 0, 1
0x1302	0x23F7      	ADDWFC      _work_int+1, 1, 1
L_lcd_ind433:
;main.c,917 :: 		IntToStr(work_int, work_str);
0x1304	0xF366C2F6  	MOVFF       _work_int, FARG_IntToStr_input
0x1308	0xF367C2F7  	MOVFF       _work_int+1, FARG_IntToStr_input+1
0x130C	0x0EE7      	MOVLW       _work_str
0x130E	0x0103      	MOVLB       3
0x1310	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x1312	0x0E02      	MOVLW       hi_addr(_work_str)
0x1314	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x1316	0xDD85      	RCALL       _IntToStr
;main.c,918 :: 		work_str_2[0] = work_str[2];
0x1318	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
;main.c,919 :: 		work_str_2[1] = work_str[3];
0x131C	0xF2E1C2EA  	MOVFF       _work_str+3, _work_str_2+1
;main.c,920 :: 		work_str_2[2] = work_str[4];
0x1320	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,921 :: 		work_str_2[3] = work_str[5];
0x1324	0xF2E3C2EC  	MOVFF       _work_str+5, _work_str_2+3
;main.c,923 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x1328	0x0102      	MOVLB       2
0x132A	0x51D7      	MOVF        _type, 0, 1
0x132C	0x0A04      	XORLW       4
0x132E	0x0E01      	MOVLW       1
0x1330	0xA4D8      	BTFSS       STATUS, 2 
0x1332	0x0E00      	MOVLW       0
0x1334	0x6E01      	MOVWF       R1 
0x1336	0x51D7      	MOVF        _type, 0, 1
0x1338	0x0A05      	XORLW       5
0x133A	0x0E01      	MOVLW       1
0x133C	0xA4D8      	BTFSS       STATUS, 2 
0x133E	0x0E00      	MOVLW       0
0x1340	0x6E00      	MOVWF       R0 
0x1342	0x5001      	MOVF        R1, 0 
0x1344	0x1200      	IORWF       R0, 1 
0x1346	0xE02E      	BZ          L_lcd_ind434
;main.c,924 :: 		if (SW == 1)
0x1348	0x5173      	MOVF        main_SW, 0, 1
0x134A	0x0A01      	XORLW       1
0x134C	0xE104      	BNZ         L_lcd_ind435
;main.c,925 :: 		column = 6;
0x134E	0x0E06      	MOVLW       6
0x1350	0x0103      	MOVLB       3
0x1352	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
0x1354	0xD003      	BRA         L_lcd_ind436
L_lcd_ind435:
0x1356	0x0103      	MOVLB       3
;main.c,927 :: 		column = 4;
0x1358	0x0E04      	MOVLW       4
0x135A	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
L_lcd_ind436:
;main.c,928 :: 		led_wr_str(column, 16, "C=", 2);
0x135C	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1360	0x0E10      	MOVLW       16
0x1362	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1364	0x0E9A      	MOVLW       ?lstr83_main
0x1366	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1368	0x0E02      	MOVLW       hi_addr(?lstr83_main)
0x136A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x136C	0x0E02      	MOVLW       2
0x136E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1370	0xDDC6      	RCALL       _led_wr_str
;main.c,929 :: 		led_wr_str(column, 16 + 6 * 12, "pF", 2);
0x1372	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1376	0x0E58      	MOVLW       88
0x1378	0x0103      	MOVLB       3
0x137A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x137C	0x0E97      	MOVLW       ?lstr84_main
0x137E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1380	0x0E02      	MOVLW       hi_addr(?lstr84_main)
0x1382	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1384	0x0E02      	MOVLW       2
0x1386	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1388	0xDDBA      	RCALL       _led_wr_str
;main.c,930 :: 		led_wr_str(column, 16 + 2 * 12, work_str_2, 4);
0x138A	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x138E	0x0E28      	MOVLW       40
0x1390	0x0103      	MOVLB       3
0x1392	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1394	0x0EE0      	MOVLW       _work_str_2
0x1396	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1398	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x139A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x139C	0x0E04      	MOVLW       4
0x139E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x13A0	0xDDAE      	RCALL       _led_wr_str
;main.c,931 :: 		} else if (type == 2 | type == 3) { // 128*32 OLED
0x13A2	0xD06D      	BRA         L_lcd_ind437
L_lcd_ind434:
0x13A4	0x0102      	MOVLB       2
0x13A6	0x51D7      	MOVF        _type, 0, 1
0x13A8	0x0A02      	XORLW       2
0x13AA	0x0E01      	MOVLW       1
0x13AC	0xA4D8      	BTFSS       STATUS, 2 
0x13AE	0x0E00      	MOVLW       0
0x13B0	0x6E01      	MOVWF       R1 
0x13B2	0x51D7      	MOVF        _type, 0, 1
0x13B4	0x0A03      	XORLW       3
0x13B6	0x0E01      	MOVLW       1
0x13B8	0xA4D8      	BTFSS       STATUS, 2 
0x13BA	0x0E00      	MOVLW       0
0x13BC	0x6E00      	MOVWF       R0 
0x13BE	0x5001      	MOVF        R1, 0 
0x13C0	0x1200      	IORWF       R0, 1 
0x13C2	0xE02D      	BZ          L_lcd_ind438
;main.c,932 :: 		if (SW == 1)
0x13C4	0x5173      	MOVF        main_SW, 0, 1
0x13C6	0x0A01      	XORLW       1
0x13C8	0xE104      	BNZ         L_lcd_ind439
;main.c,933 :: 		column = 1;
0x13CA	0x0E01      	MOVLW       1
0x13CC	0x0103      	MOVLB       3
0x13CE	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
0x13D0	0xD002      	BRA         L_lcd_ind440
L_lcd_ind439:
0x13D2	0x0103      	MOVLB       3
;main.c,935 :: 		column = 0;
0x13D4	0x6B5F      	CLRF        lcd_ind_column_L0, 1
L_lcd_ind440:
;main.c,936 :: 		led_wr_str(column, 9, "C=", 2);
0x13D6	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x13DA	0x0E09      	MOVLW       9
0x13DC	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x13DE	0x0EE5      	MOVLW       ?lstr85_main
0x13E0	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x13E2	0x0E00      	MOVLW       hi_addr(?lstr85_main)
0x13E4	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x13E6	0x0E02      	MOVLW       2
0x13E8	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x13EA	0xDD89      	RCALL       _led_wr_str
;main.c,937 :: 		led_wr_str(column, 15, "pF", 2);
0x13EC	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x13F0	0x0E0F      	MOVLW       15
0x13F2	0x0103      	MOVLB       3
0x13F4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x13F6	0x0EE2      	MOVLW       ?lstr86_main
0x13F8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x13FA	0x0E00      	MOVLW       hi_addr(?lstr86_main)
0x13FC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x13FE	0x0E02      	MOVLW       2
0x1400	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1402	0xDD7D      	RCALL       _led_wr_str
;main.c,938 :: 		led_wr_str(column, 11, work_str_2, 4);
0x1404	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1408	0x0E0B      	MOVLW       11
0x140A	0x0103      	MOVLB       3
0x140C	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x140E	0x0EE0      	MOVLW       _work_str_2
0x1410	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1412	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x1414	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1416	0x0E04      	MOVLW       4
0x1418	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x141A	0xDD71      	RCALL       _led_wr_str
;main.c,939 :: 		} else if (type == 1) { // 1602 LCD
0x141C	0xD030      	BRA         L_lcd_ind441
L_lcd_ind438:
0x141E	0x0102      	MOVLB       2
0x1420	0x51D7      	MOVF        _type, 0, 1
0x1422	0x0A01      	XORLW       1
0x1424	0xE12C      	BNZ         L_lcd_ind442
;main.c,940 :: 		if (SW == 1)
0x1426	0x5173      	MOVF        main_SW, 0, 1
0x1428	0x0A01      	XORLW       1
0x142A	0xE104      	BNZ         L_lcd_ind443
;main.c,941 :: 		column = 1;
0x142C	0x0E01      	MOVLW       1
0x142E	0x0103      	MOVLB       3
0x1430	0x6F5F      	MOVWF       lcd_ind_column_L0, 1
0x1432	0xD002      	BRA         L_lcd_ind444
L_lcd_ind443:
0x1434	0x0103      	MOVLB       3
;main.c,943 :: 		column = 0;
0x1436	0x6B5F      	CLRF        lcd_ind_column_L0, 1
L_lcd_ind444:
;main.c,944 :: 		led_wr_str(column, 9, "C=", 2);
0x1438	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x143C	0x0E09      	MOVLW       9
0x143E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1440	0x0EDF      	MOVLW       ?lstr87_main
0x1442	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1444	0x0E00      	MOVLW       hi_addr(?lstr87_main)
0x1446	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1448	0x0E02      	MOVLW       2
0x144A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x144C	0xDD58      	RCALL       _led_wr_str
;main.c,945 :: 		led_wr_str(column, 15, "p", 1);
0x144E	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x1452	0x0E0F      	MOVLW       15
0x1454	0x0103      	MOVLB       3
0x1456	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1458	0x0EE8      	MOVLW       ?lstr88_main
0x145A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x145C	0x0E00      	MOVLW       hi_addr(?lstr88_main)
0x145E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1460	0x0E01      	MOVLW       1
0x1462	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x1464	0xDD4C      	RCALL       _led_wr_str
;main.c,946 :: 		led_wr_str(column, 11, work_str_2, 4);
0x1466	0xF366C35F  	MOVFF       lcd_ind_column_L0, FARG_led_wr_str_col
0x146A	0x0E0B      	MOVLW       11
0x146C	0x0103      	MOVLB       3
0x146E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x1470	0x0EE0      	MOVLW       _work_str_2
0x1472	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x1474	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x1476	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x1478	0x0E04      	MOVLW       4
0x147A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x147C	0xDD40      	RCALL       _led_wr_str
;main.c,947 :: 		}
L_lcd_ind442:
L_lcd_ind441:
L_lcd_ind437:
;main.c,949 :: 		asm CLRWDT;
0x147E	0x0004      	CLRWDT
;main.c,950 :: 		return;
;main.c,951 :: 		}
L_end_lcd_ind:
0x1480	0x0012      	RETURN      0
; end of _lcd_ind
_Button:
;__Lib_Button.c,6 :: 		
;__Lib_Button.c,8 :: 		
0x1482	0x0103      	MOVLB       3
0x1484	0x6B65      	CLRF        Button_rslt_L0, 1
;__Lib_Button.c,11 :: 		
0x1486	0xF001C361  	MOVFF       FARG_Button_pin, R1
0x148A	0x0E01      	MOVLW       1
0x148C	0x6E00      	MOVWF       R0 
0x148E	0x5001      	MOVF        R1, 0 
L__Button5:
0x1490	0xE004      	BZ          L__Button6
0x1492	0x3600      	RLCF        R0, 1 
0x1494	0x9000      	BCF         R0, 0 
0x1496	0x0FFF      	ADDLW       255
0x1498	0xD7FB      	BRA         L__Button5
L__Button6:
0x149A	0xF364C000  	MOVFF       R0, Button_pMask_L0
;__Lib_Button.c,13 :: 		
0x149E	0xFFE9C35F  	MOVFF       FARG_Button_port, FSR0L
0x14A2	0xFFEAC360  	MOVFF       FARG_Button_port+1, FSR0H
0x14A6	0x5000      	MOVF        R0, 0 
0x14A8	0x14EE      	ANDWF       POSTINC0, 0 
0x14AA	0x6E01      	MOVWF       R1 
0x14AC	0x5201      	MOVF        R1, 1 
0x14AE	0x0E01      	MOVLW       1
0x14B0	0xA4D8      	BTFSS       STATUS, 2 
0x14B2	0x0E00      	MOVLW       0
0x14B4	0x6E00      	MOVWF       R0 
0x14B6	0x5163      	MOVF        FARG_Button_active_state, 0, 1
0x14B8	0x1A00      	XORWF       R0, 1 
0x14BA	0xE018      	BZ          L_Button0
;__Lib_Button.c,15 :: 		
L_Button1:
0x14BC	0x5162      	MOVF        FARG_Button_time_ms, 0, 1
0x14BE	0x0800      	SUBLW       0
0x14C0	0xE204      	BC          L_Button2
;__Lib_Button.c,16 :: 		
0x14C2	0xDCA6      	RCALL       _Delay_500us
;__Lib_Button.c,17 :: 		
0x14C4	0xDCA5      	RCALL       _Delay_500us
;__Lib_Button.c,18 :: 		
0x14C6	0x0762      	DECF        FARG_Button_time_ms, 1, 1
;__Lib_Button.c,19 :: 		
0x14C8	0xD7F9      	BRA         L_Button1
L_Button2:
;__Lib_Button.c,21 :: 		
0x14CA	0xFFE9C35F  	MOVFF       FARG_Button_port, FSR0L
0x14CE	0xFFEAC360  	MOVFF       FARG_Button_port+1, FSR0H
0x14D2	0x5164      	MOVF        Button_pMask_L0, 0, 1
0x14D4	0x14EE      	ANDWF       POSTINC0, 0 
0x14D6	0x6E01      	MOVWF       R1 
0x14D8	0x5201      	MOVF        R1, 1 
0x14DA	0x0E01      	MOVLW       1
0x14DC	0xA4D8      	BTFSS       STATUS, 2 
0x14DE	0x0E00      	MOVLW       0
0x14E0	0x6E00      	MOVWF       R0 
0x14E2	0x5163      	MOVF        FARG_Button_active_state, 0, 1
0x14E4	0x1A00      	XORWF       R0, 1 
0x14E6	0xE002      	BZ          L_Button3
;__Lib_Button.c,22 :: 		
0x14E8	0x0EFF      	MOVLW       255
0x14EA	0x6F65      	MOVWF       Button_rslt_L0, 1
L_Button3:
;__Lib_Button.c,23 :: 		
L_Button0:
;__Lib_Button.c,25 :: 		
0x14EC	0xF000C365  	MOVFF       Button_rslt_L0, R0
;__Lib_Button.c,26 :: 		
L_end_Button:
0x14F0	0x0012      	RETURN      0
; end of _Button
_VDelay_ms:
;__Lib_Delays.c,123 :: 		void VDelay_ms(unsigned Time_ms){
;__Lib_Delays.c,126 :: 		NumberOfCyc = Clock_kHz()>>2;
0x14F2	0x0EA0      	MOVLW       160
0x14F4	0x0103      	MOVLB       3
0x14F6	0x6F61      	MOVWF       VDelay_ms_NumberOfCyc_L0, 1
0x14F8	0x0E0F      	MOVLW       15
0x14FA	0x6F62      	MOVWF       VDelay_ms_NumberOfCyc_L0+1, 1
0x14FC	0x0E00      	MOVLW       0
0x14FE	0x6F63      	MOVWF       VDelay_ms_NumberOfCyc_L0+2, 1
0x1500	0x6F64      	MOVWF       VDelay_ms_NumberOfCyc_L0+3, 1
;__Lib_Delays.c,127 :: 		NumberOfCyc *= Time_ms;
0x1502	0x0EA0      	MOVLW       160
0x1504	0x6E00      	MOVWF       R0 
0x1506	0x0E0F      	MOVLW       15
0x1508	0x6E01      	MOVWF       R1 
0x150A	0x0E00      	MOVLW       0
0x150C	0x6E02      	MOVWF       R2 
0x150E	0x0E00      	MOVLW       0
0x1510	0x6E03      	MOVWF       R3 
0x1512	0xF004C35F  	MOVFF       FARG_VDelay_ms_Time_ms, R4
0x1516	0xF005C360  	MOVFF       FARG_VDelay_ms_Time_ms+1, R5
0x151A	0x0E00      	MOVLW       0
0x151C	0x6E06      	MOVWF       R6 
0x151E	0x6E07      	MOVWF       R7 
0x1520	0xF003EC81  	CALL        _Mul_32x32_U, 0
0x1524	0xF361C000  	MOVFF       R0, VDelay_ms_NumberOfCyc_L0
0x1528	0xF362C001  	MOVFF       R1, VDelay_ms_NumberOfCyc_L0+1
0x152C	0xF363C002  	MOVFF       R2, VDelay_ms_NumberOfCyc_L0+2
0x1530	0xF364C003  	MOVFF       R3, VDelay_ms_NumberOfCyc_L0+3
;__Lib_Delays.c,128 :: 		if (NumberOfCyc < 660)
0x1534	0x0E00      	MOVLW       0
0x1536	0x5C03      	SUBWF       R3, 0 
0x1538	0xE108      	BNZ         L__VDelay_ms54
0x153A	0x0E00      	MOVLW       0
0x153C	0x5C02      	SUBWF       R2, 0 
0x153E	0xE105      	BNZ         L__VDelay_ms54
0x1540	0x0E02      	MOVLW       2
0x1542	0x5C01      	SUBWF       R1, 0 
0x1544	0xE102      	BNZ         L__VDelay_ms54
0x1546	0x0E94      	MOVLW       148
0x1548	0x5C00      	SUBWF       R0, 0 
L__VDelay_ms54:
0x154A	0xE201      	BC          L_VDelay_ms23
;__Lib_Delays.c,129 :: 		return;
0x154C	0xD031      	BRA         L_end_VDelay_ms
L_VDelay_ms23:
;__Lib_Delays.c,130 :: 		NumberOfCyc -= 660;
0x154E	0x0E94      	MOVLW       148
0x1550	0x5F61      	SUBWF       VDelay_ms_NumberOfCyc_L0, 1, 1
0x1552	0x0E02      	MOVLW       2
0x1554	0x5B62      	SUBWFB      VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x1556	0x0E00      	MOVLW       0
0x1558	0x5B63      	SUBWFB      VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x155A	0x5B64      	SUBWFB      VDelay_ms_NumberOfCyc_L0+3, 1, 1
;__Lib_Delays.c,131 :: 		NumberOfCyc >>=  5;
0x155C	0x0E05      	MOVLW       5
0x155E	0x6E00      	MOVWF       R0 
0x1560	0x5000      	MOVF        R0, 0 
L__VDelay_ms55:
0x1562	0xE007      	BZ          L__VDelay_ms56
0x1564	0x3364      	RRCF        VDelay_ms_NumberOfCyc_L0+3, 1, 1
0x1566	0x3363      	RRCF        VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x1568	0x3362      	RRCF        VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x156A	0x3361      	RRCF        VDelay_ms_NumberOfCyc_L0, 1, 1
0x156C	0x9F64      	BCF         VDelay_ms_NumberOfCyc_L0+3, 7, 1
0x156E	0x0FFF      	ADDLW       255
0x1570	0xD7F8      	BRA         L__VDelay_ms55
L__VDelay_ms56:
;__Lib_Delays.c,133 :: 		while (NumberOfCyc--)
L_VDelay_ms24:
0x1572	0xF000C361  	MOVFF       VDelay_ms_NumberOfCyc_L0, R0
0x1576	0xF001C362  	MOVFF       VDelay_ms_NumberOfCyc_L0+1, R1
0x157A	0xF002C363  	MOVFF       VDelay_ms_NumberOfCyc_L0+2, R2
0x157E	0xF003C364  	MOVFF       VDelay_ms_NumberOfCyc_L0+3, R3
0x1582	0x0E01      	MOVLW       1
0x1584	0x5F61      	SUBWF       VDelay_ms_NumberOfCyc_L0, 1, 1
0x1586	0x0E00      	MOVLW       0
0x1588	0x5B62      	SUBWFB      VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x158A	0x5B63      	SUBWFB      VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x158C	0x5B64      	SUBWFB      VDelay_ms_NumberOfCyc_L0+3, 1, 1
0x158E	0x5000      	MOVF        R0, 0 
0x1590	0x1001      	IORWF       R1, 0 
0x1592	0x1002      	IORWF       R2, 0 
0x1594	0x1003      	IORWF       R3, 0 
0x1596	0xE00C      	BZ          L_VDelay_ms25
;__Lib_Delays.c,135 :: 		asm nop;
0x1598	0x0000      	NOP
;__Lib_Delays.c,136 :: 		asm nop;
0x159A	0x0000      	NOP
;__Lib_Delays.c,137 :: 		asm nop;
0x159C	0x0000      	NOP
;__Lib_Delays.c,138 :: 		asm nop;
0x159E	0x0000      	NOP
;__Lib_Delays.c,139 :: 		asm nop;
0x15A0	0x0000      	NOP
;__Lib_Delays.c,140 :: 		asm nop;
0x15A2	0x0000      	NOP
;__Lib_Delays.c,141 :: 		asm nop;
0x15A4	0x0000      	NOP
;__Lib_Delays.c,142 :: 		asm nop;
0x15A6	0x0000      	NOP
;__Lib_Delays.c,143 :: 		asm nop;
0x15A8	0x0000      	NOP
;__Lib_Delays.c,144 :: 		asm nop;
0x15AA	0x0000      	NOP
;__Lib_Delays.c,145 :: 		asm nop;
0x15AC	0x0000      	NOP
;__Lib_Delays.c,146 :: 		}
0x15AE	0xD7E1      	BRA         L_VDelay_ms24
L_VDelay_ms25:
;__Lib_Delays.c,147 :: 		}
L_end_VDelay_ms:
0x15B0	0x0012      	RETURN      0
; end of _VDelay_ms
_Compare_Double:
;__Lib_MathDouble.c,2518 :: 		
;__Lib_MathDouble.c,2529 :: 		
0x15B2	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2530 :: 		
0x15B4	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,2531 :: 		
0x15B6	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,2532 :: 		
0x15B8	0x800A      	BSF         R10, 0, 0
;__Lib_MathDouble.c,2533 :: 		
0x15BA	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,2534 :: 		
0x15BC	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,2535 :: 		
0x15BE	0x820A      	BSF         R10, 1, 0
;__Lib_MathDouble.c,2537 :: 		
0x15C0	0x500A      	MOVF        R10, 0, 0
;__Lib_MathDouble.c,2538 :: 		
0x15C2	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2539 :: 		
0x15C4	0xF00BEF3C  	GOTO        COMPARE_EQU
;__Lib_MathDouble.c,2540 :: 		
0x15C8	0x0A03      	XORLW       3
;__Lib_MathDouble.c,2541 :: 		
0x15CA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2542 :: 		
0x15CC	0xF00AEFF5  	GOTO        COMPARE_NOTZERO
;__Lib_MathDouble.c,2544 :: 		
0x15D0	0xB00A      	BTFSC       R10, 0, 0
;__Lib_MathDouble.c,2545 :: 		
0x15D2	0xF00AEFF0  	GOTO        COMPARE_XNOTZERO
;__Lib_MathDouble.c,2547 :: 		
0x15D6	0xAE06      	BTFSS       R6, 7, 0
;__Lib_MathDouble.c,2548 :: 		
0x15D8	0xF00BEF3A  	GOTO        COMPARE_LT
;__Lib_MathDouble.c,2549 :: 		
0x15DC	0xF00BEF38  	GOTO        COMPARE_GT
;__Lib_MathDouble.c,2550 :: 		
COMPARE_XNOTZERO:
;__Lib_MathDouble.c,2551 :: 		
0x15E0	0xAE02      	BTFSS       R2, 7, 0
;__Lib_MathDouble.c,2552 :: 		
0x15E2	0xF00BEF38  	GOTO        COMPARE_GT
;__Lib_MathDouble.c,2553 :: 		
0x15E6	0xF00BEF3A  	GOTO        COMPARE_LT
;__Lib_MathDouble.c,2555 :: 		
COMPARE_NOTZERO:
;__Lib_MathDouble.c,2556 :: 		
0x15EA	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,2557 :: 		
0x15EC	0x0B80      	ANDLW       128
;__Lib_MathDouble.c,2558 :: 		
0x15EE	0x6E0A      	MOVWF       R10, 0
;__Lib_MathDouble.c,2559 :: 		
0x15F0	0x9E02      	BCF         R2, 7, 0
;__Lib_MathDouble.c,2561 :: 		
0x15F2	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,2562 :: 		
0x15F4	0x0B80      	ANDLW       128
;__Lib_MathDouble.c,2563 :: 		
0x15F6	0x9E06      	BCF         R6, 7, 0
;__Lib_MathDouble.c,2565 :: 		
0x15F8	0x180A      	XORWF       R10, 0, 0
;__Lib_MathDouble.c,2566 :: 		
0x15FA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2567 :: 		
0x15FC	0xF00BEF06  	GOTO        COMPARE_TESTALL
;__Lib_MathDouble.c,2569 :: 		
0x1600	0x500A      	MOVF        R10, 0, 0
;__Lib_MathDouble.c,2570 :: 		
0x1602	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2571 :: 		
0x1604	0xF00BEF38  	GOTO        COMPARE_GT
;__Lib_MathDouble.c,2572 :: 		
0x1608	0xF00BEF3A  	GOTO        COMPARE_LT
;__Lib_MathDouble.c,2574 :: 		
COMPARE_TESTALL:
;__Lib_MathDouble.c,2575 :: 		
0x160C	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,2576 :: 		
0x160E	0x5C03      	SUBWF       R3, 0, 0
;__Lib_MathDouble.c,2577 :: 		
0x1610	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2578 :: 		
0x1612	0xF00BEF10  	GOTO        COMPARE_C1
;__Lib_MathDouble.c,2579 :: 		
0x1616	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,2580 :: 		
0x1618	0xF00BEF2C  	GOTO        GT_FALSE
;__Lib_MathDouble.c,2581 :: 		
0x161C	0xF00BEF32  	GOTO        GT_TRUE
;__Lib_MathDouble.c,2582 :: 		
COMPARE_C1:
;__Lib_MathDouble.c,2583 :: 		
0x1620	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,2584 :: 		
0x1622	0x5C02      	SUBWF       R2, 0, 0
;__Lib_MathDouble.c,2585 :: 		
0x1624	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2586 :: 		
0x1626	0xF00BEF1A  	GOTO        COMPARE_C2
;__Lib_MathDouble.c,2587 :: 		
0x162A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,2588 :: 		
0x162C	0xF00BEF2C  	GOTO        GT_FALSE
;__Lib_MathDouble.c,2589 :: 		
0x1630	0xF00BEF32  	GOTO        GT_TRUE
;__Lib_MathDouble.c,2590 :: 		
COMPARE_C2:
;__Lib_MathDouble.c,2591 :: 		
0x1634	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,2592 :: 		
0x1636	0x5C01      	SUBWF       R1, 0, 0
;__Lib_MathDouble.c,2593 :: 		
0x1638	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2594 :: 		
0x163A	0xF00BEF24  	GOTO        COMPARE_C3
;__Lib_MathDouble.c,2595 :: 		
0x163E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,2596 :: 		
0x1640	0xF00BEF2C  	GOTO        GT_FALSE
;__Lib_MathDouble.c,2597 :: 		
0x1644	0xF00BEF32  	GOTO        GT_TRUE
;__Lib_MathDouble.c,2598 :: 		
COMPARE_C3:
;__Lib_MathDouble.c,2599 :: 		
0x1648	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,2600 :: 		
0x164A	0x5C00      	SUBWF       R0, 0, 0
;__Lib_MathDouble.c,2601 :: 		
0x164C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2602 :: 		
0x164E	0xF00BEF3C  	GOTO        COMPARE_EQU
;__Lib_MathDouble.c,2603 :: 		
0x1652	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,2604 :: 		
0x1654	0xF00BEF32  	GOTO        GT_TRUE
;__Lib_MathDouble.c,2606 :: 		
GT_FALSE:
;__Lib_MathDouble.c,2607 :: 		
0x1658	0x520A      	MOVF        R10, 1, 0
;__Lib_MathDouble.c,2608 :: 		
0x165A	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2609 :: 		
0x165C	0xF00BEF3A  	GOTO        COMPARE_LT
;__Lib_MathDouble.c,2610 :: 		
0x1660	0xF00BEF38  	GOTO        COMPARE_GT
;__Lib_MathDouble.c,2611 :: 		
GT_TRUE:
;__Lib_MathDouble.c,2612 :: 		
0x1664	0x520A      	MOVF        R10, 1, 0
;__Lib_MathDouble.c,2613 :: 		
0x1666	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2614 :: 		
0x1668	0xF00BEF38  	GOTO        COMPARE_GT
;__Lib_MathDouble.c,2615 :: 		
0x166C	0xF00BEF3A  	GOTO        COMPARE_LT
;__Lib_MathDouble.c,2617 :: 		
COMPARE_GT:
;__Lib_MathDouble.c,2620 :: 		
0x1670	0x80D8      	BSF         STATUS, 0, 0
;__Lib_MathDouble.c,2621 :: 		
0x1672	0x0012      	RETURN      0
;__Lib_MathDouble.c,2622 :: 		
COMPARE_LT:
;__Lib_MathDouble.c,2625 :: 		
0x1674	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,2626 :: 		
0x1676	0x0012      	RETURN      0
;__Lib_MathDouble.c,2627 :: 		
COMPARE_EQU:
;__Lib_MathDouble.c,2630 :: 		
0x1678	0x80D8      	BSF         STATUS, 0, 0
;__Lib_MathDouble.c,2631 :: 		
0x167A	0x84D8      	BSF         STATUS, 2, 0
;__Lib_MathDouble.c,2632 :: 		
0x167C	0x0012      	RETURN      0
;__Lib_MathDouble.c,2634 :: 		
L_end_Compare_Double:
0x167E	0x0012      	RETURN      0
; end of _Compare_Double
_get_forward:
;main.h,90 :: 		int get_forward() {
;main.h,92 :: 		Forward = ADC_Get_Sample(0);
0x1680	0x0103      	MOVLB       3
0x1682	0x6B66      	CLRF        FARG_ADC_Get_Sample_channel, 1
0x1684	0xF005ECD4  	CALL        _ADC_Get_Sample, 0
0x1688	0xF35FC000  	MOVFF       R0, get_forward_Forward_L0
0x168C	0xF360C001  	MOVFF       R1, get_forward_Forward_L0+1
;main.h,93 :: 		if (Forward > 1000)
0x1690	0x0E80      	MOVLW       128
0x1692	0x0A03      	XORLW       3
0x1694	0x6E02      	MOVWF       R2 
0x1696	0x0E80      	MOVLW       128
0x1698	0x1801      	XORWF       R1, 0 
0x169A	0x5C02      	SUBWF       R2, 0 
0x169C	0xE102      	BNZ         L__get_forward482
0x169E	0x5000      	MOVF        R0, 0 
0x16A0	0x08E8      	SUBLW       232
L__get_forward482:
0x16A2	0xE204      	BC          L_get_forward25
;main.h,94 :: 		Overload = 1;
0x16A4	0x0E01      	MOVLW       1
0x16A6	0x0100      	MOVLB       0
0x16A8	0x6FDC      	MOVWF       main_Overload, 1
0x16AA	0xD002      	BRA         L_get_forward26
L_get_forward25:
0x16AC	0x0100      	MOVLB       0
;main.h,96 :: 		Overload = 0;
0x16AE	0x6BDC      	CLRF        main_Overload, 1
L_get_forward26:
;main.h,97 :: 		return Forward * 4.883; // zwraca napięcie w mV
0x16B0	0xF000C35F  	MOVFF       get_forward_Forward_L0, R0
0x16B4	0xF001C360  	MOVFF       get_forward_Forward_L0+1, R1
0x16B8	0xF005ECEB  	CALL        _int2double, 0
0x16BC	0x0E89      	MOVLW       137
0x16BE	0x6E04      	MOVWF       R4 
0x16C0	0x0E41      	MOVLW       65
0x16C2	0x6E05      	MOVWF       R5 
0x16C4	0x0E1C      	MOVLW       28
0x16C6	0x6E06      	MOVWF       R6 
0x16C8	0x0E81      	MOVLW       129
0x16CA	0x6E07      	MOVWF       R7 
0x16CC	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x16D0	0xF006EC9E  	CALL        _double2int, 0
;main.h,98 :: 		}
L_end_get_forward:
0x16D4	0x0012      	RETURN      0
; end of _get_forward
_get_reverse:
;main.h,85 :: 		int get_reverse() {
;main.h,86 :: 		return ADC_Get_Sample(1) * 4.883; // zwraca napięcie w mV
0x16D6	0x0E01      	MOVLW       1
0x16D8	0x0103      	MOVLB       3
0x16DA	0x6F66      	MOVWF       FARG_ADC_Get_Sample_channel, 1
0x16DC	0xF005ECD4  	CALL        _ADC_Get_Sample, 0
0x16E0	0xF003EC6D  	CALL        _word2double, 0
0x16E4	0x0E89      	MOVLW       137
0x16E6	0x6E04      	MOVWF       R4 
0x16E8	0x0E41      	MOVLW       65
0x16EA	0x6E05      	MOVWF       R5 
0x16EC	0x0E1C      	MOVLW       28
0x16EE	0x6E06      	MOVWF       R6 
0x16F0	0x0E81      	MOVLW       129
0x16F2	0x6E07      	MOVWF       R7 
0x16F4	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x16F8	0xF006EC9E  	CALL        _double2int, 0
;main.h,87 :: 		}
L_end_get_reverse:
0x16FC	0x0012      	RETURN      0
; end of _get_reverse
_Add_32x32_FP:
;__Lib_MathDouble.c,563 :: 		
;__Lib_MathDouble.c,578 :: 		
0x16FE	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,579 :: 		
0x1700	0x1806      	XORWF       R6, 0, 0
;__Lib_MathDouble.c,580 :: 		
0x1702	0x6E0E      	MOVWF       R14, 0
;__Lib_MathDouble.c,582 :: 		
0x1704	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,583 :: 		
0x1706	0x6A09      	CLRF        R9, 0
;__Lib_MathDouble.c,584 :: 		
0x1708	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,586 :: 		
0x170A	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,587 :: 		
0x170C	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,588 :: 		
0x170E	0xF00CEF72  	GOTO        USEA32
;__Lib_MathDouble.c,591 :: 		
0x1712	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,592 :: 		
0x1714	0x6E0A      	MOVWF       R10, 0
;__Lib_MathDouble.c,593 :: 		
0x1716	0x8E06      	BSF         R6, 7, 0
;__Lib_MathDouble.c,594 :: 		
0x1718	0x8E02      	BSF         R2, 7, 0
;__Lib_MathDouble.c,596 :: 		
0x171A	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,597 :: 		
0x171C	0x6E0B      	MOVWF       R11, 0
;__Lib_MathDouble.c,598 :: 		
0x171E	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,599 :: 		
0x1720	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,601 :: 		
0x1722	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,602 :: 		
0x1724	0x640B      	CPFSGT      R11, 0
;__Lib_MathDouble.c,603 :: 		
0x1726	0xF00BEFC2  	GOTO        BRETURN32
;__Lib_MathDouble.c,604 :: 		
0x172A	0x500B      	MOVF        R11, 0, 0
;__Lib_MathDouble.c,605 :: 		
0x172C	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,606 :: 		
0x172E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,607 :: 		
0x1730	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,609 :: 		
0x1734	0x0E07      	MOVLW       7
;__Lib_MathDouble.c,610 :: 		
0x1736	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,611 :: 		
0x1738	0xF00CEF31  	GOTO        BNIB32
;__Lib_MathDouble.c,613 :: 		
0x173C	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,614 :: 		
0x173E	0xF008C000  	MOVFF       R0, R8
;__Lib_MathDouble.c,615 :: 		
0x1742	0xF000C001  	MOVFF       R1, R0
;__Lib_MathDouble.c,616 :: 		
0x1746	0xF001C002  	MOVFF       R2, R1
;__Lib_MathDouble.c,617 :: 		
0x174A	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,618 :: 		
0x174C	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,619 :: 		
0x174E	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,621 :: 		
0x1752	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,622 :: 		
0x1754	0xF00CEF06  	GOTO        BNIB32A
;__Lib_MathDouble.c,623 :: 		
0x1758	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,624 :: 		
0x175A	0xF008C000  	MOVFF       R0, R8
;__Lib_MathDouble.c,625 :: 		
0x175E	0xF000C001  	MOVFF       R1, R0
;__Lib_MathDouble.c,626 :: 		
0x1762	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,627 :: 		
0x1764	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,628 :: 		
0x1766	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,630 :: 		
0x176A	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,631 :: 		
0x176C	0xF00BEFE4  	GOTO        BNIB32B
;__Lib_MathDouble.c,632 :: 		
0x1770	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,633 :: 		
0x1772	0xF008C000  	MOVFF       R0, R8
;__Lib_MathDouble.c,634 :: 		
0x1776	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,635 :: 		
0x1778	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,636 :: 		
0x177A	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,638 :: 		
0x177E	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,639 :: 		
0x1780	0xF00BEFCB  	GOTO        BNIB32C
;__Lib_MathDouble.c,641 :: 		
BRETURN32:
;__Lib_MathDouble.c,642 :: 		
0x1784	0xF002C00A  	MOVFF       R10, R2
;__Lib_MathDouble.c,643 :: 		
0x1788	0xF001C005  	MOVFF       R5, R1
;__Lib_MathDouble.c,644 :: 		
0x178C	0xF000C004  	MOVFF       R4, R0
;__Lib_MathDouble.c,645 :: 		
0x1790	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,646 :: 		
0x1792	0xF00DEF8F  	GOTO        ADDEOK
;__Lib_MathDouble.c,648 :: 		
BNIB32C:
;__Lib_MathDouble.c,649 :: 		
0x1796	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,650 :: 		
0x1798	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,651 :: 		
0x179A	0xF00BEFD6  	GOTO        BLOOP32C
;__Lib_MathDouble.c,652 :: 		
0x179E	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,653 :: 		
0x17A0	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,654 :: 		
0x17A2	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,655 :: 		
0x17A4	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,656 :: 		
0x17A6	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,657 :: 		
0x17A8	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,659 :: 		
BLOOP32C:
;__Lib_MathDouble.c,660 :: 		
0x17AC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,661 :: 		
0x17AE	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,662 :: 		
0x17B0	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,663 :: 		
0x17B2	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,664 :: 		
0x17B6	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,665 :: 		
0x17B8	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,666 :: 		
0x17BA	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,667 :: 		
0x17BC	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,668 :: 		
0x17C0	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,669 :: 		
0x17C2	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,670 :: 		
0x17C4	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,672 :: 		
BNIB32B:
;__Lib_MathDouble.c,673 :: 		
0x17C8	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,674 :: 		
0x17CA	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,675 :: 		
0x17CC	0xF00BEFF5  	GOTO        BLOOP32B
;__Lib_MathDouble.c,676 :: 		
0x17D0	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,677 :: 		
0x17D2	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,678 :: 		
0x17D4	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,679 :: 		
0x17D6	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,680 :: 		
0x17D8	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,681 :: 		
0x17DA	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,682 :: 		
0x17DC	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,683 :: 		
0x17DE	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,684 :: 		
0x17E0	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,685 :: 		
0x17E2	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,686 :: 		
0x17E4	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,687 :: 		
0x17E6	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,689 :: 		
BLOOP32B:
;__Lib_MathDouble.c,690 :: 		
0x17EA	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,691 :: 		
0x17EC	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,692 :: 		
0x17EE	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,693 :: 		
0x17F0	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,694 :: 		
0x17F2	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,695 :: 		
0x17F6	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,696 :: 		
0x17F8	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,697 :: 		
0x17FA	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,698 :: 		
0x17FC	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,699 :: 		
0x17FE	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,700 :: 		
0x1802	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,701 :: 		
0x1804	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,702 :: 		
0x1806	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,703 :: 		
0x1808	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,705 :: 		
BNIB32A:
;__Lib_MathDouble.c,706 :: 		
0x180C	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,707 :: 		
0x180E	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,708 :: 		
0x1810	0xF00CEF1D  	GOTO        BLOOP32A
;__Lib_MathDouble.c,709 :: 		
0x1814	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,710 :: 		
0x1816	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,711 :: 		
0x1818	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,712 :: 		
0x181A	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,713 :: 		
0x181C	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,714 :: 		
0x181E	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,715 :: 		
0x1820	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,716 :: 		
0x1822	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,717 :: 		
0x1824	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,718 :: 		
0x1826	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,719 :: 		
0x1828	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,720 :: 		
0x182A	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,721 :: 		
0x182C	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,722 :: 		
0x182E	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,723 :: 		
0x1830	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,724 :: 		
0x1832	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,725 :: 		
0x1834	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,726 :: 		
0x1836	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,728 :: 		
BLOOP32A:
;__Lib_MathDouble.c,729 :: 		
0x183A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,730 :: 		
0x183C	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,731 :: 		
0x183E	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,732 :: 		
0x1840	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,733 :: 		
0x1842	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,734 :: 		
0x1844	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,735 :: 		
0x1848	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,736 :: 		
0x184A	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,737 :: 		
0x184C	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,738 :: 		
0x184E	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,739 :: 		
0x1850	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,740 :: 		
0x1852	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,741 :: 		
0x1856	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,742 :: 		
0x1858	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,743 :: 		
0x185A	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,744 :: 		
0x185C	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,745 :: 		
0x185E	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,747 :: 		
BNIB32:
;__Lib_MathDouble.c,748 :: 		
0x1862	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,749 :: 		
0x1864	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,750 :: 		
0x1866	0xF00CEF4E  	GOTO        BLOOP32
;__Lib_MathDouble.c,751 :: 		
0x186A	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,752 :: 		
0x186C	0x3808      	SWAPF       R8, 0, 0
;__Lib_MathDouble.c,753 :: 		
0x186E	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,754 :: 		
0x1870	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,755 :: 		
0x1872	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,756 :: 		
0x1874	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,757 :: 		
0x1876	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,758 :: 		
0x1878	0x3800      	SWAPF       R0, 0, 0
;__Lib_MathDouble.c,759 :: 		
0x187A	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,760 :: 		
0x187C	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,761 :: 		
0x187E	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,762 :: 		
0x1880	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,763 :: 		
0x1882	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,764 :: 		
0x1884	0x3801      	SWAPF       R1, 0, 0
;__Lib_MathDouble.c,765 :: 		
0x1886	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,766 :: 		
0x1888	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,767 :: 		
0x188A	0x3802      	SWAPF       R2, 0, 0
;__Lib_MathDouble.c,768 :: 		
0x188C	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,769 :: 		
0x188E	0x2601      	ADDWF       R1, 1, 0
;__Lib_MathDouble.c,770 :: 		
0x1890	0x3802      	SWAPF       R2, 0, 0
;__Lib_MathDouble.c,771 :: 		
0x1892	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,772 :: 		
0x1894	0x6E02      	MOVWF       R2, 0
;__Lib_MathDouble.c,773 :: 		
0x1896	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,774 :: 		
0x1898	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,776 :: 		
BLOOP32:
;__Lib_MathDouble.c,777 :: 		
0x189C	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,778 :: 		
0x189E	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,779 :: 		
0x18A0	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,780 :: 		
0x18A2	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,781 :: 		
0x18A4	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,782 :: 		
0x18A6	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,783 :: 		
0x18A8	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,784 :: 		
0x18AC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,785 :: 		
0x18AE	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,786 :: 		
0x18B0	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,787 :: 		
0x18B2	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,788 :: 		
0x18B4	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,789 :: 		
0x18B6	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,790 :: 		
0x18B8	0xF00CEF63  	GOTO        BLIGNED32
;__Lib_MathDouble.c,791 :: 		
0x18BC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,792 :: 		
0x18BE	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,793 :: 		
0x18C0	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,794 :: 		
0x18C2	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,795 :: 		
0x18C4	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,797 :: 		
BLIGNED32:
;__Lib_MathDouble.c,798 :: 		
0x18C6	0x6A09      	CLRF        R9, 0
;__Lib_MathDouble.c,799 :: 		
0x18C8	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,800 :: 		
0x18CA	0xAE0E      	BTFSS       R14, 7, 0
;__Lib_MathDouble.c,801 :: 		
0x18CC	0xF00DEF57  	GOTO        AOK32
;__Lib_MathDouble.c,802 :: 		
0x18D0	0x1E08      	COMF        R8, 1, 0
;__Lib_MathDouble.c,803 :: 		
0x18D2	0x1E00      	COMF        R0, 1, 0
;__Lib_MathDouble.c,804 :: 		
0x18D4	0x1E01      	COMF        R1, 1, 0
;__Lib_MathDouble.c,805 :: 		
0x18D6	0x1E02      	COMF        R2, 1, 0
;__Lib_MathDouble.c,806 :: 		
0x18D8	0x2A08      	INCF        R8, 1, 0
;__Lib_MathDouble.c,807 :: 		
0x18DA	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,808 :: 		
0x18DC	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,809 :: 		
0x18DE	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,810 :: 		
0x18E0	0xF00DEF57  	GOTO        AOK32
;__Lib_MathDouble.c,812 :: 		
USEA32:
;__Lib_MathDouble.c,813 :: 		
0x18E4	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,814 :: 		
0x18E6	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,815 :: 		
0x18E8	0xF00CEF78  	GOTO        BNE032
;__Lib_MathDouble.c,816 :: 		
0x18EC	0xF00DEF8F  	GOTO        ADDEOK
;__Lib_MathDouble.c,818 :: 		
BNE032:
;__Lib_MathDouble.c,819 :: 		
0x18F0	0x6A09      	CLRF        R9, 0
;__Lib_MathDouble.c,820 :: 		
0x18F2	0xF00AC002  	MOVFF       R2, R10
;__Lib_MathDouble.c,821 :: 		
0x18F6	0x8E02      	BSF         R2, 7, 0
;__Lib_MathDouble.c,822 :: 		
0x18F8	0x8E06      	BSF         R6, 7, 0
;__Lib_MathDouble.c,824 :: 		
0x18FA	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,825 :: 		
0x18FC	0x5C03      	SUBWF       R3, 0, 0
;__Lib_MathDouble.c,826 :: 		
0x18FE	0x6E07      	MOVWF       R7, 0
;__Lib_MathDouble.c,827 :: 		
0x1900	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,828 :: 		
0x1902	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,830 :: 		
0x1906	0x0E07      	MOVLW       7
;__Lib_MathDouble.c,831 :: 		
0x1908	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,832 :: 		
0x190A	0xF00DEF18  	GOTO        ANIB32
;__Lib_MathDouble.c,833 :: 		
0x190E	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,834 :: 		
0x1910	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,835 :: 		
0x1912	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,836 :: 		
0x1914	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,837 :: 		
0x1916	0x6E04      	MOVWF       R4, 0
;__Lib_MathDouble.c,838 :: 		
0x1918	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,839 :: 		
0x191A	0x6E05      	MOVWF       R5, 0
;__Lib_MathDouble.c,840 :: 		
0x191C	0x6A06      	CLRF        R6, 0
;__Lib_MathDouble.c,841 :: 		
0x191E	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,842 :: 		
0x1920	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,844 :: 		
0x1924	0x0E07      	MOVLW       7
;__Lib_MathDouble.c,845 :: 		
0x1926	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,846 :: 		
0x1928	0xF00CEFED  	GOTO        ANIB32A
;__Lib_MathDouble.c,847 :: 		
0x192C	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,848 :: 		
0x192E	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,849 :: 		
0x1930	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,850 :: 		
0x1932	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,851 :: 		
0x1934	0x6E04      	MOVWF       R4, 0
;__Lib_MathDouble.c,852 :: 		
0x1936	0x6A05      	CLRF        R5, 0
;__Lib_MathDouble.c,853 :: 		
0x1938	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,854 :: 		
0x193A	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,856 :: 		
0x193E	0x0E07      	MOVLW       7
;__Lib_MathDouble.c,857 :: 		
0x1940	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,858 :: 		
0x1942	0xF00CEFCB  	GOTO        ANIB32B
;__Lib_MathDouble.c,859 :: 		
0x1946	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,860 :: 		
0x1948	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,861 :: 		
0x194A	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,862 :: 		
0x194C	0x6A04      	CLRF        R4, 0
;__Lib_MathDouble.c,863 :: 		
0x194E	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,864 :: 		
0x1950	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,866 :: 		
0x1954	0x0E07      	MOVLW       7
;__Lib_MathDouble.c,867 :: 		
0x1956	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,868 :: 		
0x1958	0xF00CEFB2  	GOTO        ANIB32C
;__Lib_MathDouble.c,870 :: 		
0x195C	0xF002C00A  	MOVFF       R10, R2
;__Lib_MathDouble.c,871 :: 		
0x1960	0xF00DEF8F  	GOTO        ADDEOK
;__Lib_MathDouble.c,873 :: 		
ANIB32C:
;__Lib_MathDouble.c,874 :: 		
0x1964	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,875 :: 		
0x1966	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,876 :: 		
0x1968	0xF00CEFBD  	GOTO        ALOOP32C
;__Lib_MathDouble.c,877 :: 		
0x196C	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,878 :: 		
0x196E	0x3809      	SWAPF       R9, 0, 0
;__Lib_MathDouble.c,879 :: 		
0x1970	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,880 :: 		
0x1972	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,881 :: 		
0x1974	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,882 :: 		
0x1976	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,884 :: 		
ALOOP32C:
;__Lib_MathDouble.c,885 :: 		
0x197A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,886 :: 		
0x197C	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,887 :: 		
0x197E	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,888 :: 		
0x1980	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,889 :: 		
0x1984	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,890 :: 		
0x1986	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,891 :: 		
0x1988	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,892 :: 		
0x198A	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,893 :: 		
0x198E	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,894 :: 		
0x1990	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,895 :: 		
0x1992	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,897 :: 		
ANIB32B:
;__Lib_MathDouble.c,898 :: 		
0x1996	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,899 :: 		
0x1998	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,900 :: 		
0x199A	0xF00CEFDC  	GOTO        ALOOP32B
;__Lib_MathDouble.c,901 :: 		
0x199E	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,902 :: 		
0x19A0	0x3809      	SWAPF       R9, 0, 0
;__Lib_MathDouble.c,903 :: 		
0x19A2	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,904 :: 		
0x19A4	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,905 :: 		
0x19A6	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,906 :: 		
0x19A8	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,907 :: 		
0x19AA	0x2609      	ADDWF       R9, 1, 0
;__Lib_MathDouble.c,908 :: 		
0x19AC	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,909 :: 		
0x19AE	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,910 :: 		
0x19B0	0x6E04      	MOVWF       R4, 0
;__Lib_MathDouble.c,911 :: 		
0x19B2	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,912 :: 		
0x19B4	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,914 :: 		
ALOOP32B:
;__Lib_MathDouble.c,915 :: 		
0x19B8	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,916 :: 		
0x19BA	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,917 :: 		
0x19BC	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,918 :: 		
0x19BE	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,919 :: 		
0x19C0	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,920 :: 		
0x19C4	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,921 :: 		
0x19C6	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,922 :: 		
0x19C8	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,923 :: 		
0x19CA	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,924 :: 		
0x19CC	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,925 :: 		
0x19D0	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,926 :: 		
0x19D2	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,927 :: 		
0x19D4	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,928 :: 		
0x19D6	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,930 :: 		
ANIB32A:
;__Lib_MathDouble.c,931 :: 		
0x19DA	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,932 :: 		
0x19DC	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,933 :: 		
0x19DE	0xF00DEF04  	GOTO        ALOOP32A
;__Lib_MathDouble.c,934 :: 		
0x19E2	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,935 :: 		
0x19E4	0x3809      	SWAPF       R9, 0, 0
;__Lib_MathDouble.c,936 :: 		
0x19E6	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,937 :: 		
0x19E8	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,938 :: 		
0x19EA	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,939 :: 		
0x19EC	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,940 :: 		
0x19EE	0x2609      	ADDWF       R9, 1, 0
;__Lib_MathDouble.c,941 :: 		
0x19F0	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,942 :: 		
0x19F2	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,943 :: 		
0x19F4	0x6E04      	MOVWF       R4, 0
;__Lib_MathDouble.c,944 :: 		
0x19F6	0x3805      	SWAPF       R5, 0, 0
;__Lib_MathDouble.c,945 :: 		
0x19F8	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,946 :: 		
0x19FA	0x2604      	ADDWF       R4, 1, 0
;__Lib_MathDouble.c,947 :: 		
0x19FC	0x3805      	SWAPF       R5, 0, 0
;__Lib_MathDouble.c,948 :: 		
0x19FE	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,949 :: 		
0x1A00	0x6E05      	MOVWF       R5, 0
;__Lib_MathDouble.c,950 :: 		
0x1A02	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,951 :: 		
0x1A04	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,953 :: 		
ALOOP32A:
;__Lib_MathDouble.c,954 :: 		
0x1A08	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,955 :: 		
0x1A0A	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,956 :: 		
0x1A0C	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,957 :: 		
0x1A0E	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,958 :: 		
0x1A10	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,959 :: 		
0x1A12	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,960 :: 		
0x1A16	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,961 :: 		
0x1A18	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,962 :: 		
0x1A1A	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,963 :: 		
0x1A1C	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,964 :: 		
0x1A1E	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,965 :: 		
0x1A20	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,966 :: 		
0x1A24	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,967 :: 		
0x1A26	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,968 :: 		
0x1A28	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,969 :: 		
0x1A2A	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,970 :: 		
0x1A2C	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,972 :: 		
ANIB32:
;__Lib_MathDouble.c,973 :: 		
0x1A30	0x0E03      	MOVLW       3
;__Lib_MathDouble.c,974 :: 		
0x1A32	0x6407      	CPFSGT      R7, 0
;__Lib_MathDouble.c,975 :: 		
0x1A34	0xF00DEF35  	GOTO        ALOOP32
;__Lib_MathDouble.c,976 :: 		
0x1A38	0x5E07      	SUBWF       R7, 1, 0
;__Lib_MathDouble.c,977 :: 		
0x1A3A	0x3809      	SWAPF       R9, 0, 0
;__Lib_MathDouble.c,978 :: 		
0x1A3C	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,979 :: 		
0x1A3E	0x6E09      	MOVWF       R9, 0
;__Lib_MathDouble.c,980 :: 		
0x1A40	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,981 :: 		
0x1A42	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,982 :: 		
0x1A44	0x2609      	ADDWF       R9, 1, 0
;__Lib_MathDouble.c,983 :: 		
0x1A46	0x3804      	SWAPF       R4, 0, 0
;__Lib_MathDouble.c,984 :: 		
0x1A48	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,985 :: 		
0x1A4A	0x6E04      	MOVWF       R4, 0
;__Lib_MathDouble.c,986 :: 		
0x1A4C	0x3805      	SWAPF       R5, 0, 0
;__Lib_MathDouble.c,987 :: 		
0x1A4E	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,988 :: 		
0x1A50	0x2604      	ADDWF       R4, 1, 0
;__Lib_MathDouble.c,989 :: 		
0x1A52	0x3805      	SWAPF       R5, 0, 0
;__Lib_MathDouble.c,990 :: 		
0x1A54	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,991 :: 		
0x1A56	0x6E05      	MOVWF       R5, 0
;__Lib_MathDouble.c,992 :: 		
0x1A58	0x3806      	SWAPF       R6, 0, 0
;__Lib_MathDouble.c,993 :: 		
0x1A5A	0x0BF0      	ANDLW       240
;__Lib_MathDouble.c,994 :: 		
0x1A5C	0x2605      	ADDWF       R5, 1, 0
;__Lib_MathDouble.c,995 :: 		
0x1A5E	0x3806      	SWAPF       R6, 0, 0
;__Lib_MathDouble.c,996 :: 		
0x1A60	0x0B0F      	ANDLW       15
;__Lib_MathDouble.c,997 :: 		
0x1A62	0x6E06      	MOVWF       R6, 0
;__Lib_MathDouble.c,998 :: 		
0x1A64	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,999 :: 		
0x1A66	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,1001 :: 		
ALOOP32:
;__Lib_MathDouble.c,1002 :: 		
0x1A6A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1003 :: 		
0x1A6C	0x3206      	RRCF        R6, 1, 0
;__Lib_MathDouble.c,1004 :: 		
0x1A6E	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,1005 :: 		
0x1A70	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,1006 :: 		
0x1A72	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,1007 :: 		
0x1A74	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,1008 :: 		
0x1A76	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,1009 :: 		
0x1A7A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1010 :: 		
0x1A7C	0x3206      	RRCF        R6, 1, 0
;__Lib_MathDouble.c,1011 :: 		
0x1A7E	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,1012 :: 		
0x1A80	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,1013 :: 		
0x1A82	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,1014 :: 		
0x1A84	0x4E07      	DCFSNZ      R7, 1, 0
;__Lib_MathDouble.c,1015 :: 		
0x1A86	0xF00DEF4A  	GOTO        ALIGNED32
;__Lib_MathDouble.c,1016 :: 		
0x1A8A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1017 :: 		
0x1A8C	0x3206      	RRCF        R6, 1, 0
;__Lib_MathDouble.c,1018 :: 		
0x1A8E	0x3205      	RRCF        R5, 1, 0
;__Lib_MathDouble.c,1019 :: 		
0x1A90	0x3204      	RRCF        R4, 1, 0
;__Lib_MathDouble.c,1020 :: 		
0x1A92	0x3209      	RRCF        R9, 1, 0
;__Lib_MathDouble.c,1022 :: 		
ALIGNED32:
;__Lib_MathDouble.c,1023 :: 		
0x1A94	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,1024 :: 		
0x1A96	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1025 :: 		
0x1A98	0xAE0E      	BTFSS       R14, 7, 0
;__Lib_MathDouble.c,1026 :: 		
0x1A9A	0xF00DEF57  	GOTO        AOK32
;__Lib_MathDouble.c,1027 :: 		
0x1A9E	0x1E09      	COMF        R9, 1, 0
;__Lib_MathDouble.c,1028 :: 		
0x1AA0	0x1E04      	COMF        R4, 1, 0
;__Lib_MathDouble.c,1029 :: 		
0x1AA2	0x1E05      	COMF        R5, 1, 0
;__Lib_MathDouble.c,1030 :: 		
0x1AA4	0x1E06      	COMF        R6, 1, 0
;__Lib_MathDouble.c,1031 :: 		
0x1AA6	0x2A09      	INCF        R9, 1, 0
;__Lib_MathDouble.c,1032 :: 		
0x1AA8	0x2204      	ADDWFC      R4, 1, 0
;__Lib_MathDouble.c,1033 :: 		
0x1AAA	0x2205      	ADDWFC      R5, 1, 0
;__Lib_MathDouble.c,1034 :: 		
0x1AAC	0x2206      	ADDWFC      R6, 1, 0
;__Lib_MathDouble.c,1036 :: 		
AOK32:
;__Lib_MathDouble.c,1037 :: 		
0x1AAE	0x5009      	MOVF        R9, 0, 0
;__Lib_MathDouble.c,1038 :: 		
0x1AB0	0x2608      	ADDWF       R8, 1, 0
;__Lib_MathDouble.c,1039 :: 		
0x1AB2	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,1040 :: 		
0x1AB4	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1041 :: 		
0x1AB6	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,1042 :: 		
0x1AB8	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1043 :: 		
0x1ABA	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,1044 :: 		
0x1ABC	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1046 :: 		
0x1ABE	0xBE0E      	BTFSC       R14, 7, 0
;__Lib_MathDouble.c,1047 :: 		
0x1AC0	0xF00DEF6E  	GOTO        ACOMP32
;__Lib_MathDouble.c,1048 :: 		
0x1AC4	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1049 :: 		
0x1AC6	0xF00DEF7D  	GOTO        ADDJPNRMRND4032
;__Lib_MathDouble.c,1051 :: 		
0x1ACA	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,1052 :: 		
0x1ACC	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,1053 :: 		
0x1ACE	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,1054 :: 		
0x1AD0	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,1055 :: 		
0x1AD2	0x3E03      	INCFSZ      R3, 1, 0
;__Lib_MathDouble.c,1056 :: 		
0x1AD4	0xF00DEF7D  	GOTO        ADDJPNRMRND4032
;__Lib_MathDouble.c,1057 :: 		
0x1AD8	0xF00DEF89  	GOTO        ADDJPSETFOV32
;__Lib_MathDouble.c,1059 :: 		
ACOMP32:
;__Lib_MathDouble.c,1060 :: 		
0x1ADC	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1061 :: 		
0x1ADE	0xF00DEF83  	GOTO        ADDJPNRM4032
;__Lib_MathDouble.c,1062 :: 		
0x1AE2	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1063 :: 		
0x1AE4	0x1E08      	COMF        R8, 1, 0
;__Lib_MathDouble.c,1064 :: 		
0x1AE6	0x1E00      	COMF        R0, 1, 0
;__Lib_MathDouble.c,1065 :: 		
0x1AE8	0x1E01      	COMF        R1, 1, 0
;__Lib_MathDouble.c,1066 :: 		
0x1AEA	0x1E02      	COMF        R2, 1, 0
;__Lib_MathDouble.c,1067 :: 		
0x1AEC	0x2A08      	INCF        R8, 1, 0
;__Lib_MathDouble.c,1068 :: 		
0x1AEE	0x2200      	ADDWFC      R0, 1, 0
;__Lib_MathDouble.c,1069 :: 		
0x1AF0	0x2201      	ADDWFC      R1, 1, 0
;__Lib_MathDouble.c,1070 :: 		
0x1AF2	0x2202      	ADDWFC      R2, 1, 0
;__Lib_MathDouble.c,1071 :: 		
0x1AF4	0x7E0A      	BTG         R10, 7, 0
;__Lib_MathDouble.c,1072 :: 		
0x1AF6	0xF00DEF83  	GOTO        ADDJPNRM4032
;__Lib_MathDouble.c,1074 :: 		
ADDJPNRMRND4032:
;__Lib_MathDouble.c,1075 :: 		
0x1AFA	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,1076 :: 		
0x1AFC	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,1078 :: 		
0x1AFE	0xF003ECAA  	CALL        _NRM4032, 0
;__Lib_MathDouble.c,1080 :: 		
0x1B02	0xF00DEF91  	GOTO        ADDEEE
;__Lib_MathDouble.c,1081 :: 		
ADDJPNRM4032:
;__Lib_MathDouble.c,1082 :: 		
0x1B06	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,1083 :: 		
0x1B08	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,1085 :: 		
0x1B0A	0xF003ECAA  	CALL        _NRM4032, 0
;__Lib_MathDouble.c,1087 :: 		
0x1B0E	0xF00DEF91  	GOTO        ADDEEE
;__Lib_MathDouble.c,1088 :: 		
ADDJPSETFOV32:
;__Lib_MathDouble.c,1089 :: 		
0x1B12	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,1090 :: 		
0x1B14	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,1092 :: 		
0x1B16	0xF000ECEF  	CALL        _SETFOV32, 0
;__Lib_MathDouble.c,1094 :: 		
0x1B1A	0xF00DEF91  	GOTO        ADDEEE
;__Lib_MathDouble.c,1095 :: 		
ADDEOK:
;__Lib_MathDouble.c,1096 :: 		
0x1B1E	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,1097 :: 		
0x1B20	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,1098 :: 		
ADDEEE:
;__Lib_MathDouble.c,1105 :: 		
L_end_Add_32x32_FP:
0x1B22	0x0012      	RETURN      0
; end of _Add_32x32_FP
_longint2double:
;__Lib_MathDouble.c,2374 :: 		
;__Lib_MathDouble.c,2383 :: 		
0x1B24	0x5000      	MOVF        R0, 0, 0
;__Lib_MathDouble.c,2384 :: 		
0x1B26	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,2385 :: 		
0x1B28	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2386 :: 		
0x1B2A	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,2387 :: 		
0x1B2C	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,2388 :: 		
0x1B2E	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,2389 :: 		
0x1B30	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,2390 :: 		
0x1B32	0x6E02      	MOVWF       R2, 0
;__Lib_MathDouble.c,2391 :: 		
0x1B34	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,2394 :: 		
0x1B36	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,2395 :: 		
0x1B38	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,2397 :: 		
0x1B3A	0x0E9E      	MOVLW       158
;__Lib_MathDouble.c,2398 :: 		
0x1B3C	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,2399 :: 		
0x1B3E	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2400 :: 		
0x1B40	0xAE02      	BTFSS       R2, 7, 0
;__Lib_MathDouble.c,2401 :: 		
0x1B42	0xF00DEFAF  	GOTO        FLO3232EEE
;__Lib_MathDouble.c,2402 :: 		
0x1B46	0x1E08      	COMF        R8, 1, 0
;__Lib_MathDouble.c,2403 :: 		
0x1B48	0x1E00      	COMF        R0, 1, 0
;__Lib_MathDouble.c,2404 :: 		
0x1B4A	0x1E01      	COMF        R1, 1, 0
;__Lib_MathDouble.c,2405 :: 		
0x1B4C	0x1E02      	COMF        R2, 1, 0
;__Lib_MathDouble.c,2406 :: 		
0x1B4E	0x2A08      	INCF        R8, 1, 0
;__Lib_MathDouble.c,2407 :: 		
0x1B50	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2408 :: 		
0x1B52	0x2A00      	INCF        R0, 1, 0
;__Lib_MathDouble.c,2409 :: 		
0x1B54	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2410 :: 		
0x1B56	0x2A01      	INCF        R1, 1, 0
;__Lib_MathDouble.c,2411 :: 		
0x1B58	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2412 :: 		
0x1B5A	0x2A02      	INCF        R2, 1, 0
;__Lib_MathDouble.c,2413 :: 		
0x1B5C	0x8E0A      	BSF         R10, 7, 0
;__Lib_MathDouble.c,2414 :: 		
FLO3232EEE:
;__Lib_MathDouble.c,2415 :: 		
0x1B5E	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,2416 :: 		
0x1B60	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,2418 :: 		
0x1B62	0xF003ECAA  	CALL        _NRM4032, 0
;__Lib_MathDouble.c,2419 :: 		
L_end_longint2double:
0x1B66	0x0012      	RETURN      0
; end of _longint2double
_Div_32x32_S:
;__Lib_Math.c,942 :: 		
;__Lib_Math.c,955 :: 		
0x1B68	0x5004      	MOVF        R4, 0 
0x1B6A	0x0A00      	XORLW       0
0x1B6C	0xE112      	BNZ         L_Div_32x32_S6
;__Lib_Math.c,956 :: 		
0x1B6E	0x5005      	MOVF        R5, 0 
0x1B70	0x0A00      	XORLW       0
0x1B72	0xE10F      	BNZ         L_Div_32x32_S7
;__Lib_Math.c,957 :: 		
0x1B74	0x5006      	MOVF        R6, 0 
0x1B76	0x0A00      	XORLW       0
0x1B78	0xE10C      	BNZ         L_Div_32x32_S8
;__Lib_Math.c,958 :: 		
0x1B7A	0x5007      	MOVF        R7, 0 
0x1B7C	0x0A00      	XORLW       0
0x1B7E	0xE109      	BNZ         L_Div_32x32_S9
;__Lib_Math.c,959 :: 		
0x1B80	0x0EFF      	MOVLW       255
0x1B82	0x6E00      	MOVWF       R0 
;__Lib_Math.c,960 :: 		
0x1B84	0x0EFF      	MOVLW       255
0x1B86	0x6E01      	MOVWF       R1 
;__Lib_Math.c,961 :: 		
0x1B88	0x0EFF      	MOVLW       255
0x1B8A	0x6E02      	MOVWF       R2 
;__Lib_Math.c,962 :: 		
0x1B8C	0x0E7F      	MOVLW       127
0x1B8E	0x6E03      	MOVWF       R3 
;__Lib_Math.c,963 :: 		
0x1B90	0xD099      	BRA         L_end_Div_32x32_S
;__Lib_Math.c,964 :: 		
L_Div_32x32_S9:
L_Div_32x32_S8:
L_Div_32x32_S7:
L_Div_32x32_S6:
;__Lib_Math.c,968 :: 		
0x1B92	0x6A0C      	CLRF        R12, 0
;__Lib_Math.c,969 :: 		
0x1B94	0xBE07      	BTFSC       R7, 7, 0
;__Lib_Math.c,970 :: 		
0x1B96	0x2A0C      	INCF        R12, 1, 0
;__Lib_Math.c,972 :: 		
0x1B98	0x6A0D      	CLRF        R13, 0
;__Lib_Math.c,973 :: 		
0x1B9A	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,974 :: 		
0x1B9C	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,975 :: 		
0x1B9E	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,976 :: 		
0x1BA0	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,977 :: 		
0x1BA2	0x5003      	MOVF        R3, 0, 0
;__Lib_Math.c,978 :: 		
0x1BA4	0x1002      	IORWF       R2, 0, 0
;__Lib_Math.c,979 :: 		
0x1BA6	0x1001      	IORWF       R1, 0, 0
;__Lib_Math.c,980 :: 		
0x1BA8	0x1000      	IORWF       R0, 0, 0
;__Lib_Math.c,981 :: 		
0x1BAA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,982 :: 		
0x1BAC	0xD085      	BRA         END_ALL
;__Lib_Math.c,986 :: 		
0x1BAE	0x5003      	MOVF        R3, 0, 0
;__Lib_Math.c,987 :: 		
0x1BB0	0x1807      	XORWF       R7, 0, 0
;__Lib_Math.c,988 :: 		
0x1BB2	0x6E0E      	MOVWF       R14, 0
;__Lib_Math.c,989 :: 		
0x1BB4	0xBE0E      	BTFSC       R14, 7, 0
;__Lib_Math.c,990 :: 		
0x1BB6	0x1E0D      	COMF        R13, 1, 0
;__Lib_Math.c,993 :: 		
0x1BB8	0xAE07      	BTFSS       R7, 7, 0
;__Lib_Math.c,994 :: 		
0x1BBA	0xD00B      	BRA         CA3232S
;__Lib_Math.c,996 :: 		
0x1BBC	0x1E04      	COMF        R4, 1, 0
;__Lib_Math.c,997 :: 		
0x1BBE	0x1E05      	COMF        R5, 1, 0
;__Lib_Math.c,998 :: 		
0x1BC0	0x1E06      	COMF        R6, 1, 0
;__Lib_Math.c,999 :: 		
0x1BC2	0x1E07      	COMF        R7, 1, 0
;__Lib_Math.c,1000 :: 		
0x1BC4	0x2A04      	INCF        R4, 1, 0
;__Lib_Math.c,1001 :: 		
0x1BC6	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1002 :: 		
0x1BC8	0x2A05      	INCF        R5, 1, 0
;__Lib_Math.c,1003 :: 		
0x1BCA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1004 :: 		
0x1BCC	0x2A06      	INCF        R6, 1, 0
;__Lib_Math.c,1005 :: 		
0x1BCE	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1006 :: 		
0x1BD0	0x2A07      	INCF        R7, 1, 0
;__Lib_Math.c,1008 :: 		
CA3232S:
;__Lib_Math.c,1009 :: 		
0x1BD2	0xAE03      	BTFSS       R3, 7, 0
;__Lib_Math.c,1010 :: 		
0x1BD4	0xD00B      	BRA         C3232SX
;__Lib_Math.c,1012 :: 		
0x1BD6	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,1013 :: 		
0x1BD8	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,1014 :: 		
0x1BDA	0x1E02      	COMF        R2, 1, 0
;__Lib_Math.c,1015 :: 		
0x1BDC	0x1E03      	COMF        R3, 1, 0
;__Lib_Math.c,1016 :: 		
0x1BDE	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,1017 :: 		
0x1BE0	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1018 :: 		
0x1BE2	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,1019 :: 		
0x1BE4	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1020 :: 		
0x1BE6	0x2A02      	INCF        R2, 1, 0
;__Lib_Math.c,1021 :: 		
0x1BE8	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1022 :: 		
0x1BEA	0x2A03      	INCF        R3, 1, 0
;__Lib_Math.c,1024 :: 		
C3232SX:
;__Lib_Math.c,1025 :: 		
0x1BEC	0x5003      	MOVF        R3, 0, 0
;__Lib_Math.c,1026 :: 		
0x1BEE	0x1007      	IORWF       R7, 0, 0
;__Lib_Math.c,1027 :: 		
0x1BF0	0x6E0E      	MOVWF       R14, 0
;__Lib_Math.c,1028 :: 		
0x1BF2	0xBE0E      	BTFSC       R14, 7, 0
;__Lib_Math.c,1029 :: 		
0x1BF4	0xD01D      	BRA         C3232SX1
;__Lib_Math.c,1030 :: 		
C3232S:
;__Lib_Math.c,1034 :: 		
0x1BF6	0xF004ECA8  	CALL        _SDIV3232L, 0
;__Lib_Math.c,1038 :: 		
0x1BFA	0xBE0C      	BTFSC       R12, 7, 0
;__Lib_Math.c,1039 :: 		
0x1BFC	0xD036      	BRA         C3232SX4
;__Lib_Math.c,1041 :: 		
C3232SOK:
;__Lib_Math.c,1042 :: 		
0x1BFE	0xAE0D      	BTFSS       R13, 7, 0
;__Lib_Math.c,1043 :: 		
0x1C00	0xD05B      	BRA         END_ALL
;__Lib_Math.c,1045 :: 		
0x1C02	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,1046 :: 		
0x1C04	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,1047 :: 		
0x1C06	0x1E02      	COMF        R2, 1, 0
;__Lib_Math.c,1048 :: 		
0x1C08	0x1E03      	COMF        R3, 1, 0
;__Lib_Math.c,1049 :: 		
0x1C0A	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,1050 :: 		
0x1C0C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1051 :: 		
0x1C0E	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,1052 :: 		
0x1C10	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1053 :: 		
0x1C12	0x2A02      	INCF        R2, 1, 0
;__Lib_Math.c,1054 :: 		
0x1C14	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1055 :: 		
0x1C16	0x2A03      	INCF        R3, 1, 0
;__Lib_Math.c,1057 :: 		
0x1C18	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,1058 :: 		
0x1C1A	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,1059 :: 		
0x1C1C	0x1E0A      	COMF        R10, 1, 0
;__Lib_Math.c,1060 :: 		
0x1C1E	0x1E0B      	COMF        R11, 1, 0
;__Lib_Math.c,1061 :: 		
0x1C20	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,1062 :: 		
0x1C22	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1063 :: 		
0x1C24	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,1064 :: 		
0x1C26	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1065 :: 		
0x1C28	0x2A0A      	INCF        R10, 1, 0
;__Lib_Math.c,1066 :: 		
0x1C2A	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1067 :: 		
0x1C2C	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,1068 :: 		
0x1C2E	0xD044      	BRA         END_ALL
;__Lib_Math.c,1069 :: 		
C3232SX1:
;__Lib_Math.c,1072 :: 		
0x1C30	0xAE07      	BTFSS       R7, 7, 0
;__Lib_Math.c,1073 :: 		
0x1C32	0xD015      	BRA         C3232SX3
;__Lib_Math.c,1074 :: 		
0x1C34	0xBE03      	BTFSC       R3, 7, 0
;__Lib_Math.c,1075 :: 		
0x1C36	0xD00D      	BRA         C3232SX2
;__Lib_Math.c,1076 :: 		
0x1C38	0x5003      	MOVF        R3, 0, 0
;__Lib_Math.c,1077 :: 		
0x1C3A	0x6E0B      	MOVWF       R11, 0
;__Lib_Math.c,1078 :: 		
0x1C3C	0x5002      	MOVF        R2, 0, 0
;__Lib_Math.c,1079 :: 		
0x1C3E	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,1080 :: 		
0x1C40	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,1081 :: 		
0x1C42	0x6E09      	MOVWF       R9, 0
;__Lib_Math.c,1082 :: 		
0x1C44	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,1083 :: 		
0x1C46	0x6E08      	MOVWF       R8, 0
;__Lib_Math.c,1084 :: 		
0x1C48	0x6A03      	CLRF        R3, 0
;__Lib_Math.c,1085 :: 		
0x1C4A	0x6A02      	CLRF        R2, 0
;__Lib_Math.c,1086 :: 		
0x1C4C	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,1087 :: 		
0x1C4E	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,1088 :: 		
0x1C50	0xD7D6      	BRA         C3232SOK
;__Lib_Math.c,1089 :: 		
C3232SX2:
;__Lib_Math.c,1090 :: 		
0x1C52	0x6A03      	CLRF        R3, 0
;__Lib_Math.c,1091 :: 		
0x1C54	0x6A02      	CLRF        R2, 0
;__Lib_Math.c,1092 :: 		
0x1C56	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,1093 :: 		
0x1C58	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,1094 :: 		
0x1C5A	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,1095 :: 		
0x1C5C	0x0C00      	RETLW       0
;__Lib_Math.c,1097 :: 		
C3232SX3:
;__Lib_Math.c,1098 :: 		
0x1C5E	0x1E03      	COMF        R3, 1, 0
;__Lib_Math.c,1099 :: 		
0x1C60	0x1E02      	COMF        R2, 1, 0
;__Lib_Math.c,1100 :: 		
0x1C62	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,1101 :: 		
0x1C64	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,1103 :: 		
0x1C66	0x8E0C      	BSF         R12, 7, 0
;__Lib_Math.c,1104 :: 		
0x1C68	0xD7C6      	BRA         C3232S
;__Lib_Math.c,1105 :: 		
C3232SX4:
;__Lib_Math.c,1108 :: 		
0x1C6A	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,1109 :: 		
0x1C6C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1110 :: 		
0x1C6E	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,1111 :: 		
0x1C70	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1112 :: 		
0x1C72	0x2A0A      	INCF        R10, 1, 0
;__Lib_Math.c,1113 :: 		
0x1C74	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1114 :: 		
0x1C76	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,1115 :: 		
0x1C78	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1116 :: 		
0x1C7A	0x5C08      	SUBWF       R8, 0, 0
;__Lib_Math.c,1117 :: 		
0x1C7C	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,1118 :: 		
0x1C7E	0xD7BF      	BRA         C3232SOK
;__Lib_Math.c,1119 :: 		
0x1C80	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1120 :: 		
0x1C82	0x5C09      	SUBWF       R9, 0, 0
;__Lib_Math.c,1121 :: 		
0x1C84	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,1122 :: 		
0x1C86	0xD7BB      	BRA         C3232SOK
;__Lib_Math.c,1123 :: 		
0x1C88	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1124 :: 		
0x1C8A	0x5C0A      	SUBWF       R10, 0, 0
;__Lib_Math.c,1125 :: 		
0x1C8C	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,1126 :: 		
0x1C8E	0xD7B7      	BRA         C3232SOK
;__Lib_Math.c,1127 :: 		
0x1C90	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1128 :: 		
0x1C92	0x5C0B      	SUBWF       R11, 0, 0
;__Lib_Math.c,1129 :: 		
0x1C94	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,1130 :: 		
0x1C96	0xD7B3      	BRA         C3232SOK
;__Lib_Math.c,1131 :: 		
0x1C98	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1132 :: 		
0x1C9A	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1133 :: 		
0x1C9C	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1134 :: 		
0x1C9E	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1135 :: 		
0x1CA0	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,1136 :: 		
0x1CA2	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1137 :: 		
0x1CA4	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,1138 :: 		
0x1CA6	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1139 :: 		
0x1CA8	0x2A02      	INCF        R2, 1, 0
;__Lib_Math.c,1140 :: 		
0x1CAA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1141 :: 		
0x1CAC	0x2A03      	INCF        R3, 1, 0
;__Lib_Math.c,1142 :: 		
0x1CAE	0xAE03      	BTFSS       R3, 7, 0
;__Lib_Math.c,1143 :: 		
0x1CB0	0xD7A6      	BRA         C3232SOK
;__Lib_Math.c,1144 :: 		
0x1CB2	0x6A0E      	CLRF        R14, 0
;__Lib_Math.c,1145 :: 		
0x1CB4	0x880E      	BSF         R14, 4, 0
;__Lib_Math.c,1146 :: 		
0x1CB6	0x0CFF      	RETLW       255
;__Lib_Math.c,1147 :: 		
END_ALL:
;__Lib_Math.c,1148 :: 		
0x1CB8	0x6A0E      	CLRF        R14, 0
;__Lib_Math.c,1149 :: 		
0x1CBA	0xA00C      	BTFSS       R12, 0, 0
;__Lib_Math.c,1150 :: 		
0x1CBC	0xD002      	BRA         avoid_comfrem
;__Lib_Math.c,1153 :: 		
0x1CBE	0xF004EC9C  	CALL        _COMFREM, 0
;__Lib_Math.c,1155 :: 		
avoid_comfrem:
;__Lib_Math.c,1156 :: 		
0x1CC2	0x0F00      	ADDLW       0
;__Lib_Math.c,1158 :: 		
L_end_Div_32x32_S:
0x1CC4	0x0012      	RETURN      0
; end of _Div_32x32_S
_byte2double:
;__Lib_MathDouble.c,2253 :: 		
;__Lib_MathDouble.c,2262 :: 		
0x1CC6	0xF008C000  	MOVFF       R0, R8
;__Lib_MathDouble.c,2265 :: 		
0x1CCA	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,2266 :: 		
0x1CCC	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,2268 :: 		
0x1CCE	0x0E9E      	MOVLW       158
;__Lib_MathDouble.c,2269 :: 		
0x1CD0	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,2270 :: 		
0x1CD2	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2271 :: 		
0x1CD4	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2272 :: 		
0x1CD6	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,2273 :: 		
0x1CD8	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,2274 :: 		
0x1CDA	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,2275 :: 		
0x1CDC	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,2277 :: 		
0x1CDE	0xF003ECAA  	CALL        _NRM4032, 0
;__Lib_MathDouble.c,2278 :: 		
L_end_byte2double:
0x1CE2	0x0012      	RETURN      0
; end of _byte2double
_Div_32x32_FP:
;__Lib_MathDouble.c,1325 :: 		
;__Lib_MathDouble.c,1339 :: 		
0x1CE4	0x5004      	MOVF        R4, 0 
0x1CE6	0x0A00      	XORLW       0
0x1CE8	0xE112      	BNZ         L_Div_32x32_FP11
;__Lib_MathDouble.c,1340 :: 		
0x1CEA	0x5005      	MOVF        R5, 0 
0x1CEC	0x0A00      	XORLW       0
0x1CEE	0xE10F      	BNZ         L_Div_32x32_FP12
;__Lib_MathDouble.c,1341 :: 		
0x1CF0	0x5006      	MOVF        R6, 0 
0x1CF2	0x0A00      	XORLW       0
0x1CF4	0xE10C      	BNZ         L_Div_32x32_FP13
;__Lib_MathDouble.c,1342 :: 		
0x1CF6	0x5007      	MOVF        R7, 0 
0x1CF8	0x0A00      	XORLW       0
0x1CFA	0xE109      	BNZ         L_Div_32x32_FP14
;__Lib_MathDouble.c,1343 :: 		
0x1CFC	0x0EFF      	MOVLW       255
0x1CFE	0x6E00      	MOVWF       R0 
;__Lib_MathDouble.c,1344 :: 		
0x1D00	0x0EFF      	MOVLW       255
0x1D02	0x6E01      	MOVWF       R1 
;__Lib_MathDouble.c,1345 :: 		
0x1D04	0x0E7F      	MOVLW       127
0x1D06	0x6E02      	MOVWF       R2 
;__Lib_MathDouble.c,1346 :: 		
0x1D08	0x0EFF      	MOVLW       255
0x1D0A	0x6E03      	MOVWF       R3 
;__Lib_MathDouble.c,1347 :: 		
0x1D0C	0xD0A8      	BRA         L_end_Div_32x32_FP
;__Lib_MathDouble.c,1348 :: 		
L_Div_32x32_FP14:
L_Div_32x32_FP13:
L_Div_32x32_FP12:
L_Div_32x32_FP11:
;__Lib_MathDouble.c,1353 :: 		
0x1D0E	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,1354 :: 		
0x1D10	0x6A09      	CLRF        R9, 0
;__Lib_MathDouble.c,1356 :: 		
0x1D12	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,1357 :: 		
0x1D14	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1358 :: 		
0x1D16	0xF00FEF1D  	GOTO        JPDSETFDZ32
;__Lib_MathDouble.c,1360 :: 		
0x1D1A	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,1361 :: 		
0x1D1C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1362 :: 		
0x1D1E	0xF00FEF22  	GOTO        JPDRES032
;__Lib_MathDouble.c,1364 :: 		
0x1D22	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,1365 :: 		
0x1D24	0x1806      	XORWF       R6, 0, 0
;__Lib_MathDouble.c,1366 :: 		
0x1D26	0x6E0A      	MOVWF       R10, 0
;__Lib_MathDouble.c,1367 :: 		
0x1D28	0x8E02      	BSF         R2, 7, 0
;__Lib_MathDouble.c,1368 :: 		
0x1D2A	0x8E06      	BSF         R6, 7, 0
;__Lib_MathDouble.c,1370 :: 		
0x1D2C	0x6A0E      	CLRF        R14, 0
;__Lib_MathDouble.c,1371 :: 		
0x1D2E	0xF008C002  	MOVFF       R2, R8
;__Lib_MathDouble.c,1372 :: 		
0x1D32	0xF00CC001  	MOVFF       R1, R12
;__Lib_MathDouble.c,1373 :: 		
0x1D36	0xF00DC000  	MOVFF       R0, R13
;__Lib_MathDouble.c,1375 :: 		
0x1D3A	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,1376 :: 		
0x1D3C	0x5E0D      	SUBWF       R13, 1, 0
;__Lib_MathDouble.c,1377 :: 		
0x1D3E	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,1378 :: 		
0x1D40	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1379 :: 		
0x1D42	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_MathDouble.c,1381 :: 		
0x1D44	0x5E0C      	SUBWF       R12, 1, 0
;__Lib_MathDouble.c,1382 :: 		
0x1D46	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,1383 :: 		
0x1D48	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1384 :: 		
0x1D4A	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_MathDouble.c,1386 :: 		
0x1D4C	0x5E08      	SUBWF       R8, 1, 0
;__Lib_MathDouble.c,1387 :: 		
0x1D4E	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,1388 :: 		
0x1D50	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,1389 :: 		
0x1D52	0x6A0D      	CLRF        R13, 0
;__Lib_MathDouble.c,1390 :: 		
0x1D54	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1391 :: 		
0x1D56	0xF00EEFB4  	GOTO        DALIGN32OK
;__Lib_MathDouble.c,1393 :: 		
0x1D5A	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1394 :: 		
0x1D5C	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,1395 :: 		
0x1D5E	0x3201      	RRCF        R1, 1, 0
;__Lib_MathDouble.c,1396 :: 		
0x1D60	0x3200      	RRCF        R0, 1, 0
;__Lib_MathDouble.c,1397 :: 		
0x1D62	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,1398 :: 		
0x1D64	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,1399 :: 		
0x1D66	0x6E0E      	MOVWF       R14, 0
;__Lib_MathDouble.c,1400 :: 		
DALIGN32OK:
;__Lib_MathDouble.c,1401 :: 		
0x1D68	0x5007      	MOVF        R7, 0, 0
;__Lib_MathDouble.c,1402 :: 		
0x1D6A	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,1403 :: 		
0x1D6C	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1404 :: 		
0x1D6E	0xF00EEFC1  	GOTO        ALTB32
;__Lib_MathDouble.c,1406 :: 		
0x1D72	0x0E7E      	MOVLW       126
;__Lib_MathDouble.c,1407 :: 		
0x1D74	0x240E      	ADDWF       R14, 0, 0
;__Lib_MathDouble.c,1408 :: 		
0x1D76	0x2603      	ADDWF       R3, 1, 0
;__Lib_MathDouble.c,1409 :: 		
0x1D78	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1410 :: 		
0x1D7A	0xF00FEF27  	GOTO        JPDSETFOV32
;__Lib_MathDouble.c,1411 :: 		
0x1D7E	0xF00EEFC7  	GOTO        DARGOK32
;__Lib_MathDouble.c,1412 :: 		
ALTB32:
;__Lib_MathDouble.c,1413 :: 		
0x1D82	0x0E7E      	MOVLW       126
;__Lib_MathDouble.c,1414 :: 		
0x1D84	0x240E      	ADDWF       R14, 0, 0
;__Lib_MathDouble.c,1415 :: 		
0x1D86	0x2603      	ADDWF       R3, 1, 0
;__Lib_MathDouble.c,1416 :: 		
0x1D88	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1417 :: 		
0x1D8A	0xF00FEF2C  	GOTO        JPDSETFUN32
;__Lib_MathDouble.c,1418 :: 		
DARGOK32:
;__Lib_MathDouble.c,1419 :: 		
0x1D8E	0x0E18      	MOVLW       24
;__Lib_MathDouble.c,1420 :: 		
0x1D90	0x6E0B      	MOVWF       R11, 0
;__Lib_MathDouble.c,1421 :: 		
DLOOP32:
;__Lib_MathDouble.c,1422 :: 		
0x1D92	0x360D      	RLCF        R13, 1, 0
;__Lib_MathDouble.c,1423 :: 		
0x1D94	0x360C      	RLCF        R12, 1, 0
;__Lib_MathDouble.c,1424 :: 		
0x1D96	0x3608      	RLCF        R8, 1, 0
;__Lib_MathDouble.c,1425 :: 		
0x1D98	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,1426 :: 		
0x1D9A	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,1427 :: 		
0x1D9C	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,1428 :: 		
0x1D9E	0x360E      	RLCF        R14, 1, 0
;__Lib_MathDouble.c,1430 :: 		
0x1DA0	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,1431 :: 		
0x1DA2	0x5E00      	SUBWF       R0, 1, 0
;__Lib_MathDouble.c,1432 :: 		
0x1DA4	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,1433 :: 		
0x1DA6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1434 :: 		
0x1DA8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_MathDouble.c,1436 :: 		
0x1DAA	0x5E01      	SUBWF       R1, 1, 0
;__Lib_MathDouble.c,1437 :: 		
0x1DAC	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,1438 :: 		
0x1DAE	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1439 :: 		
0x1DB0	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_MathDouble.c,1441 :: 		
0x1DB2	0x5E02      	SUBWF       R2, 1, 0
;__Lib_MathDouble.c,1442 :: 		
0x1DB4	0x3406      	RLCF        R6, 0, 0
;__Lib_MathDouble.c,1443 :: 		
0x1DB6	0x120E      	IORWF       R14, 1, 0
;__Lib_MathDouble.c,1444 :: 		
0x1DB8	0xA00E      	BTFSS       R14, 0, 0
;__Lib_MathDouble.c,1445 :: 		
0x1DBA	0xF00EEFE2  	GOTO        DREST32
;__Lib_MathDouble.c,1446 :: 		
0x1DBE	0x800D      	BSF         R13, 0, 0
;__Lib_MathDouble.c,1447 :: 		
0x1DC0	0xF00EEFED  	GOTO        DOK32
;__Lib_MathDouble.c,1448 :: 		
DREST32:
;__Lib_MathDouble.c,1449 :: 		
0x1DC4	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,1450 :: 		
0x1DC6	0x2600      	ADDWF       R0, 1, 0
;__Lib_MathDouble.c,1451 :: 		
0x1DC8	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,1452 :: 		
0x1DCA	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1453 :: 		
0x1DCC	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_MathDouble.c,1455 :: 		
0x1DCE	0x2601      	ADDWF       R1, 1, 0
;__Lib_MathDouble.c,1456 :: 		
0x1DD0	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,1457 :: 		
0x1DD2	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1458 :: 		
0x1DD4	0x2806      	INCF        R6, 0, 0
;__Lib_MathDouble.c,1459 :: 		
0x1DD6	0x2602      	ADDWF       R2, 1, 0
;__Lib_MathDouble.c,1460 :: 		
0x1DD8	0x900D      	BCF         R13, 0, 0
;__Lib_MathDouble.c,1461 :: 		
DOK32:
;__Lib_MathDouble.c,1462 :: 		
0x1DDA	0x2E0B      	DECFSZ      R11, 1, 0
;__Lib_MathDouble.c,1463 :: 		
0x1DDC	0xF00EEFC9  	GOTO        DLOOP32
;__Lib_MathDouble.c,1467 :: 		
0x1DE0	0xF00FEF13  	GOTO        DIV32OK
;__Lib_MathDouble.c,1468 :: 		
0x1DE4	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,1469 :: 		
0x1DE6	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,1470 :: 		
0x1DE8	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,1471 :: 		
0x1DEA	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,1472 :: 		
0x1DEC	0x360E      	RLCF        R14, 1, 0
;__Lib_MathDouble.c,1474 :: 		
0x1DEE	0x5004      	MOVF        R4, 0, 0
;__Lib_MathDouble.c,1475 :: 		
0x1DF0	0x5E00      	SUBWF       R0, 1, 0
;__Lib_MathDouble.c,1476 :: 		
0x1DF2	0x5005      	MOVF        R5, 0, 0
;__Lib_MathDouble.c,1477 :: 		
0x1DF4	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1478 :: 		
0x1DF6	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_MathDouble.c,1479 :: 		
0x1DF8	0x5E01      	SUBWF       R1, 1, 0
;__Lib_MathDouble.c,1480 :: 		
0x1DFA	0x5006      	MOVF        R6, 0, 0
;__Lib_MathDouble.c,1481 :: 		
0x1DFC	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,1482 :: 		
0x1DFE	0x3C06      	INCFSZ      R6, 0, 0
;__Lib_MathDouble.c,1483 :: 		
0x1E00	0x5E02      	SUBWF       R2, 1, 0
;__Lib_MathDouble.c,1484 :: 		
0x1E02	0x3406      	RLCF        R6, 0, 0
;__Lib_MathDouble.c,1485 :: 		
0x1E04	0x100E      	IORWF       R14, 0, 0
;__Lib_MathDouble.c,1486 :: 		
0x1E06	0x0B01      	ANDLW       1
;__Lib_MathDouble.c,1487 :: 		
0x1E08	0x260D      	ADDWF       R13, 1, 0
;__Lib_MathDouble.c,1488 :: 		
0x1E0A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_MathDouble.c,1489 :: 		
0x1E0C	0x2A0C      	INCF        R12, 1, 0
;__Lib_MathDouble.c,1490 :: 		
0x1E0E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1491 :: 		
0x1E10	0x2A08      	INCF        R8, 1, 0
;__Lib_MathDouble.c,1492 :: 		
0x1E12	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,1493 :: 		
0x1E14	0xF00FEF13  	GOTO        DIV32OK
;__Lib_MathDouble.c,1494 :: 		
0x1E18	0x3208      	RRCF        R8, 1, 0
;__Lib_MathDouble.c,1495 :: 		
0x1E1A	0x320C      	RRCF        R12, 1, 0
;__Lib_MathDouble.c,1496 :: 		
0x1E1C	0x320D      	RRCF        R13, 1, 0
;__Lib_MathDouble.c,1497 :: 		
0x1E1E	0x2A03      	INCF        R3, 1, 0
;__Lib_MathDouble.c,1498 :: 		
0x1E20	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,1499 :: 		
0x1E22	0xF00FEF27  	GOTO        JPDSETFOV32
;__Lib_MathDouble.c,1500 :: 		
DIV32OK:
;__Lib_MathDouble.c,1501 :: 		
0x1E26	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,1502 :: 		
0x1E28	0x9E08      	BCF         R8, 7, 0
;__Lib_MathDouble.c,1503 :: 		
0x1E2A	0x5008      	MOVF        R8, 0, 0
;__Lib_MathDouble.c,1504 :: 		
0x1E2C	0x6E02      	MOVWF       R2, 0
;__Lib_MathDouble.c,1505 :: 		
0x1E2E	0x500C      	MOVF        R12, 0, 0
;__Lib_MathDouble.c,1506 :: 		
0x1E30	0x6E01      	MOVWF       R1, 0
;__Lib_MathDouble.c,1507 :: 		
0x1E32	0x500D      	MOVF        R13, 0, 0
;__Lib_MathDouble.c,1508 :: 		
0x1E34	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,1511 :: 		
0x1E36	0xF00FEF2F  	GOTO        DIV32EEE
;__Lib_MathDouble.c,1512 :: 		
JPDSETFDZ32:
;__Lib_MathDouble.c,1513 :: 		
0x1E3A	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,1516 :: 		
0x1E3C	0xF007ECFA  	CALL        _SETFDZ32, 0
;__Lib_MathDouble.c,1518 :: 		
0x1E40	0xF00FEF2F  	GOTO        DIV32EEE
;__Lib_MathDouble.c,1519 :: 		
JPDRES032:
;__Lib_MathDouble.c,1520 :: 		
0x1E44	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,1523 :: 		
0x1E46	0xF000EC62  	CALL        _RES032, 0
;__Lib_MathDouble.c,1525 :: 		
0x1E4A	0xF00FEF2F  	GOTO        DIV32EEE
;__Lib_MathDouble.c,1526 :: 		
JPDSETFOV32:
;__Lib_MathDouble.c,1527 :: 		
0x1E4E	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,1530 :: 		
0x1E50	0xF000ECEF  	CALL        _SETFOV32, 0
;__Lib_MathDouble.c,1532 :: 		
0x1E54	0xF00FEF2F  	GOTO        DIV32EEE
;__Lib_MathDouble.c,1533 :: 		
JPDSETFUN32:
;__Lib_MathDouble.c,1534 :: 		
0x1E58	0x0E08      	MOVLW       8
;__Lib_MathDouble.c,1537 :: 		
0x1E5A	0xF000ECC3  	CALL        _SETFUN32, 0
;__Lib_MathDouble.c,1539 :: 		
DIV32EEE:
;__Lib_MathDouble.c,1547 :: 		
L_end_Div_32x32_FP:
0x1E5E	0x0012      	RETURN      0
; end of _Div_32x32_FP
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x1E60	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x1E62	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x1E64	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x1E66	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x1E68	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x1E6A	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x1E6E	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x1E72	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x1E74	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x1E76	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x1E7A	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x1E7E	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x1E80	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x1E82	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x1E84	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x1E86	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x1E88	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x1E8A	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x1E8C	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x1E8E	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x1E90	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x1E92	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x1E94	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x1E96	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x1E98	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x1E9A	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x1E9C	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x1E9E	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x1EA2	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x1EA6	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x1EAA	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x1EAE	0x0012      	RETURN      0
; end of _Mul_16X16_U
_correction:
;main.h,50 :: 		int correction(int input) {
;main.h,51 :: 		if (input <= 80)
0x1EB0	0x0E80      	MOVLW       128
0x1EB2	0x6E00      	MOVWF       R0 
0x1EB4	0x0E80      	MOVLW       128
0x1EB6	0x0103      	MOVLB       3
0x1EB8	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1EBA	0x5C00      	SUBWF       R0, 0 
0x1EBC	0xE102      	BNZ         L__correction467
0x1EBE	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1EC0	0x0850      	SUBLW       80
L__correction467:
0x1EC2	0xE303      	BNC         L_correction0
;main.h,52 :: 		return 0;
0x1EC4	0x6A00      	CLRF        R0 
0x1EC6	0x6A01      	CLRF        R1 
0x1EC8	0xD0BB      	BRA         L_end_correction
L_correction0:
;main.h,53 :: 		if (input <= 171)
0x1ECA	0x0E80      	MOVLW       128
0x1ECC	0x6E00      	MOVWF       R0 
0x1ECE	0x0E80      	MOVLW       128
0x1ED0	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1ED2	0x5C00      	SUBWF       R0, 0 
0x1ED4	0xE102      	BNZ         L__correction468
0x1ED6	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1ED8	0x08AB      	SUBLW       171
L__correction468:
0x1EDA	0xE305      	BNC         L_correction1
;main.h,54 :: 		input += 244;
0x1EDC	0x0EF4      	MOVLW       244
0x1EDE	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1EE0	0x0E00      	MOVLW       0
0x1EE2	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1EE4	0xD0A9      	BRA         L_correction2
L_correction1:
;main.h,55 :: 		else if (input <= 328)
0x1EE6	0x0E80      	MOVLW       128
0x1EE8	0x0A01      	XORLW       1
0x1EEA	0x6E00      	MOVWF       R0 
0x1EEC	0x0E80      	MOVLW       128
0x1EEE	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1EF0	0x5C00      	SUBWF       R0, 0 
0x1EF2	0xE102      	BNZ         L__correction469
0x1EF4	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1EF6	0x0848      	SUBLW       72
L__correction469:
0x1EF8	0xE305      	BNC         L_correction3
;main.h,56 :: 		input += 254;
0x1EFA	0x0EFE      	MOVLW       254
0x1EFC	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1EFE	0x0E00      	MOVLW       0
0x1F00	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F02	0xD09A      	BRA         L_correction4
L_correction3:
;main.h,57 :: 		else if (input <= 582)
0x1F04	0x0E80      	MOVLW       128
0x1F06	0x0A02      	XORLW       2
0x1F08	0x6E00      	MOVWF       R0 
0x1F0A	0x0E80      	MOVLW       128
0x1F0C	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1F0E	0x5C00      	SUBWF       R0, 0 
0x1F10	0xE102      	BNZ         L__correction470
0x1F12	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1F14	0x0846      	SUBLW       70
L__correction470:
0x1F16	0xE305      	BNC         L_correction5
;main.h,58 :: 		input += 280;
0x1F18	0x0E18      	MOVLW       24
0x1F1A	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1F1C	0x0E01      	MOVLW       1
0x1F1E	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F20	0xD08B      	BRA         L_correction6
L_correction5:
;main.h,59 :: 		else if (input <= 820)
0x1F22	0x0E80      	MOVLW       128
0x1F24	0x0A03      	XORLW       3
0x1F26	0x6E00      	MOVWF       R0 
0x1F28	0x0E80      	MOVLW       128
0x1F2A	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1F2C	0x5C00      	SUBWF       R0, 0 
0x1F2E	0xE102      	BNZ         L__correction471
0x1F30	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1F32	0x0834      	SUBLW       52
L__correction471:
0x1F34	0xE305      	BNC         L_correction7
;main.h,60 :: 		input += 297;
0x1F36	0x0E29      	MOVLW       41
0x1F38	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1F3A	0x0E01      	MOVLW       1
0x1F3C	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F3E	0xD07C      	BRA         L_correction8
L_correction7:
;main.h,61 :: 		else if (input <= 1100)
0x1F40	0x0E80      	MOVLW       128
0x1F42	0x0A04      	XORLW       4
0x1F44	0x6E00      	MOVWF       R0 
0x1F46	0x0E80      	MOVLW       128
0x1F48	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1F4A	0x5C00      	SUBWF       R0, 0 
0x1F4C	0xE102      	BNZ         L__correction472
0x1F4E	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1F50	0x084C      	SUBLW       76
L__correction472:
0x1F52	0xE305      	BNC         L_correction9
;main.h,62 :: 		input += 310;
0x1F54	0x0E36      	MOVLW       54
0x1F56	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1F58	0x0E01      	MOVLW       1
0x1F5A	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F5C	0xD06D      	BRA         L_correction10
L_correction9:
;main.h,63 :: 		else if (input <= 2181)
0x1F5E	0x0E80      	MOVLW       128
0x1F60	0x0A08      	XORLW       8
0x1F62	0x6E00      	MOVWF       R0 
0x1F64	0x0E80      	MOVLW       128
0x1F66	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1F68	0x5C00      	SUBWF       R0, 0 
0x1F6A	0xE102      	BNZ         L__correction473
0x1F6C	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1F6E	0x0885      	SUBLW       133
L__correction473:
0x1F70	0xE305      	BNC         L_correction11
;main.h,64 :: 		input += 430;
0x1F72	0x0EAE      	MOVLW       174
0x1F74	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1F76	0x0E01      	MOVLW       1
0x1F78	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F7A	0xD05E      	BRA         L_correction12
L_correction11:
;main.h,65 :: 		else if (input <= 3322)
0x1F7C	0x0E80      	MOVLW       128
0x1F7E	0x0A0C      	XORLW       12
0x1F80	0x6E00      	MOVWF       R0 
0x1F82	0x0E80      	MOVLW       128
0x1F84	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1F86	0x5C00      	SUBWF       R0, 0 
0x1F88	0xE102      	BNZ         L__correction474
0x1F8A	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1F8C	0x08FA      	SUBLW       250
L__correction474:
0x1F8E	0xE305      	BNC         L_correction13
;main.h,66 :: 		input += 484;
0x1F90	0x0EE4      	MOVLW       228
0x1F92	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1F94	0x0E01      	MOVLW       1
0x1F96	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1F98	0xD04F      	BRA         L_correction14
L_correction13:
;main.h,67 :: 		else if (input <= 4623)
0x1F9A	0x0E80      	MOVLW       128
0x1F9C	0x0A12      	XORLW       18
0x1F9E	0x6E00      	MOVWF       R0 
0x1FA0	0x0E80      	MOVLW       128
0x1FA2	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1FA4	0x5C00      	SUBWF       R0, 0 
0x1FA6	0xE102      	BNZ         L__correction475
0x1FA8	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1FAA	0x080F      	SUBLW       15
L__correction475:
0x1FAC	0xE305      	BNC         L_correction15
;main.h,68 :: 		input += 530;
0x1FAE	0x0E12      	MOVLW       18
0x1FB0	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1FB2	0x0E02      	MOVLW       2
0x1FB4	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1FB6	0xD040      	BRA         L_correction16
L_correction15:
;main.h,69 :: 		else if (input <= 5862)
0x1FB8	0x0E80      	MOVLW       128
0x1FBA	0x0A16      	XORLW       22
0x1FBC	0x6E00      	MOVWF       R0 
0x1FBE	0x0E80      	MOVLW       128
0x1FC0	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1FC2	0x5C00      	SUBWF       R0, 0 
0x1FC4	0xE102      	BNZ         L__correction476
0x1FC6	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1FC8	0x08E6      	SUBLW       230
L__correction476:
0x1FCA	0xE305      	BNC         L_correction17
;main.h,70 :: 		input += 648;
0x1FCC	0x0E88      	MOVLW       136
0x1FCE	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1FD0	0x0E02      	MOVLW       2
0x1FD2	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1FD4	0xD031      	BRA         L_correction18
L_correction17:
;main.h,71 :: 		else if (input <= 7146)
0x1FD6	0x0E80      	MOVLW       128
0x1FD8	0x0A1B      	XORLW       27
0x1FDA	0x6E00      	MOVWF       R0 
0x1FDC	0x0E80      	MOVLW       128
0x1FDE	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1FE0	0x5C00      	SUBWF       R0, 0 
0x1FE2	0xE102      	BNZ         L__correction477
0x1FE4	0x515F      	MOVF        FARG_correction_input, 0, 1
0x1FE6	0x08EA      	SUBLW       234
L__correction477:
0x1FE8	0xE305      	BNC         L_correction19
;main.h,72 :: 		input += 743;
0x1FEA	0x0EE7      	MOVLW       231
0x1FEC	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x1FEE	0x0E02      	MOVLW       2
0x1FF0	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x1FF2	0xD022      	BRA         L_correction20
L_correction19:
;main.h,73 :: 		else if (input <= 8502)
0x1FF4	0x0E80      	MOVLW       128
0x1FF6	0x0A21      	XORLW       33
0x1FF8	0x6E00      	MOVWF       R0 
0x1FFA	0x0E80      	MOVLW       128
0x1FFC	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x1FFE	0x5C00      	SUBWF       R0, 0 
0x2000	0xE102      	BNZ         L__correction478
0x2002	0x515F      	MOVF        FARG_correction_input, 0, 1
0x2004	0x0836      	SUBLW       54
L__correction478:
0x2006	0xE305      	BNC         L_correction21
;main.h,74 :: 		input += 800;
0x2008	0x0E20      	MOVLW       32
0x200A	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x200C	0x0E03      	MOVLW       3
0x200E	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x2010	0xD013      	BRA         L_correction22
L_correction21:
;main.h,75 :: 		else if (input <= 10500)
0x2012	0x0E80      	MOVLW       128
0x2014	0x0A29      	XORLW       41
0x2016	0x6E00      	MOVWF       R0 
0x2018	0x0E80      	MOVLW       128
0x201A	0x1960      	XORWF       FARG_correction_input+1, 0, 1
0x201C	0x5C00      	SUBWF       R0, 0 
0x201E	0xE102      	BNZ         L__correction479
0x2020	0x515F      	MOVF        FARG_correction_input, 0, 1
0x2022	0x0804      	SUBLW       4
L__correction479:
0x2024	0xE305      	BNC         L_correction23
;main.h,76 :: 		input += 840;
0x2026	0x0E48      	MOVLW       72
0x2028	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x202A	0x0E03      	MOVLW       3
0x202C	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
0x202E	0xD004      	BRA         L_correction24
L_correction23:
;main.h,78 :: 		input += 860;
0x2030	0x0E5C      	MOVLW       92
0x2032	0x275F      	ADDWF       FARG_correction_input, 1, 1
0x2034	0x0E03      	MOVLW       3
0x2036	0x2360      	ADDWFC      FARG_correction_input+1, 1, 1
L_correction24:
L_correction22:
L_correction20:
L_correction18:
L_correction16:
L_correction14:
L_correction12:
L_correction10:
L_correction8:
L_correction6:
L_correction4:
L_correction2:
;main.h,80 :: 		return input;
0x2038	0xF000C35F  	MOVFF       FARG_correction_input, R0
0x203C	0xF001C360  	MOVFF       FARG_correction_input+1, R1
;main.h,81 :: 		}
L_end_correction:
0x2040	0x0012      	RETURN      0
; end of _correction
_dysp_on:
;oled_control.c,63 :: 		void dysp_on() {
;oled_control.c,64 :: 		if(led_type > 1) send_command(0xAF); //  display ON
0x2042	0x0102      	MOVLB       2
0x2044	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x2046	0x0801      	SUBLW       1
0x2048	0xE206      	BC          L_dysp_on12
0x204A	0x0EAF      	MOVLW       175
0x204C	0x0103      	MOVLB       3
0x204E	0x6F5F      	MOVWF       FARG_send_command_oled_command, 1
0x2050	0xF007ECFE  	CALL        _send_command, 0
0x2054	0xD00E      	BRA         L_dysp_on13
L_dysp_on12:
;oled_control.c,65 :: 		else if(led_type==1) {
0x2056	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x2058	0x0A01      	XORLW       1
0x205A	0xE10B      	BNZ         L_dysp_on14
;oled_control.c,66 :: 		LED = 1;
0x205C	0x0E01      	MOVLW       1
0x205E	0x6FBE      	MOVWF       oled_control_LED, 1
;oled_control.c,67 :: 		RS = 0;
0x2060	0x6BBF      	CLRF        oled_control_RS, 1
;oled_control.c,68 :: 		led_send(0);
0x2062	0x0103      	MOVLB       3
0x2064	0x6B70      	CLRF        FARG_led_send_nible, 1
0x2066	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,69 :: 		led_send(0);
0x206A	0x0103      	MOVLB       3
0x206C	0x6B70      	CLRF        FARG_led_send_nible, 1
0x206E	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,70 :: 		}
L_dysp_on14:
L_dysp_on13:
;oled_control.c,71 :: 		}
L_end_dysp_on:
0x2072	0x0012      	RETURN      0
; end of _dysp_on
_get_pwr:
;main.h,100 :: 		void get_pwr() {
;main.h,103 :: 		asm CLRWDT;
0x2074	0x0004      	CLRWDT
;main.h,105 :: 		Forward = get_forward();
0x2076	0xF00BEC40  	CALL        _get_forward, 0
0x207A	0xF341C000  	MOVFF       R0, get_pwr_Forward_L0
0x207E	0xF342C001  	MOVFF       R1, get_pwr_Forward_L0+1
0x2082	0x0E00      	MOVLW       0
0x2084	0xBE01      	BTFSC       R1, 7 
0x2086	0x0EFF      	MOVLW       255
0x2088	0x0103      	MOVLB       3
0x208A	0x6F43      	MOVWF       get_pwr_Forward_L0+2, 1
0x208C	0x6F44      	MOVWF       get_pwr_Forward_L0+3, 1
;main.h,106 :: 		Reverse = get_reverse();
0x208E	0xF00BEC6B  	CALL        _get_reverse, 0
0x2092	0xF345C000  	MOVFF       R0, get_pwr_Reverse_L0
0x2096	0xF346C001  	MOVFF       R1, get_pwr_Reverse_L0+1
0x209A	0x0E00      	MOVLW       0
0x209C	0xBE01      	BTFSC       R1, 7 
0x209E	0x0EFF      	MOVLW       255
0x20A0	0x0103      	MOVLB       3
0x20A2	0x6F47      	MOVWF       get_pwr_Reverse_L0+2, 1
0x20A4	0x6F48      	MOVWF       get_pwr_Reverse_L0+3, 1
;main.h,107 :: 		if (D_correction == 1)
0x20A6	0x5050      	MOVF        main_D_correction, 0 
0x20A8	0x0A01      	XORLW       1
0x20AA	0xE119      	BNZ         L_get_pwr27
;main.h,108 :: 		p = correction(Forward * 3);
0x20AC	0xF000C341  	MOVFF       get_pwr_Forward_L0, R0
0x20B0	0xF001C342  	MOVFF       get_pwr_Forward_L0+1, R1
0x20B4	0x0E03      	MOVLW       3
0x20B6	0x6E04      	MOVWF       R4 
0x20B8	0x0E00      	MOVLW       0
0x20BA	0x6E05      	MOVWF       R5 
0x20BC	0xDED1      	RCALL       _Mul_16X16_U
0x20BE	0xF35FC000  	MOVFF       R0, FARG_correction_input
0x20C2	0xF360C001  	MOVFF       R1, FARG_correction_input+1
0x20C6	0xDEF4      	RCALL       _correction
0x20C8	0xF005ECEB  	CALL        _int2double, 0
0x20CC	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x20D0	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x20D4	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x20D8	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
0x20DC	0xD019      	BRA         L_get_pwr28
L_get_pwr27:
;main.h,110 :: 		p = Forward * 3;
0x20DE	0xF000C341  	MOVFF       get_pwr_Forward_L0, R0
0x20E2	0xF001C342  	MOVFF       get_pwr_Forward_L0+1, R1
0x20E6	0xF002C343  	MOVFF       get_pwr_Forward_L0+2, R2
0x20EA	0xF003C344  	MOVFF       get_pwr_Forward_L0+3, R3
0x20EE	0x0E03      	MOVLW       3
0x20F0	0x6E04      	MOVWF       R4 
0x20F2	0x0E00      	MOVLW       0
0x20F4	0x6E05      	MOVWF       R5 
0x20F6	0x6E06      	MOVWF       R6 
0x20F8	0x6E07      	MOVWF       R7 
0x20FA	0xF003EC81  	CALL        _Mul_32x32_U, 0
0x20FE	0xDD12      	RCALL       _longint2double
0x2100	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x2104	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x2108	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x210C	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
L_get_pwr28:
;main.h,112 :: 		if (Reverse >= Forward)
0x2110	0x0E80      	MOVLW       128
0x2112	0x1948      	XORWF       get_pwr_Reverse_L0+3, 0, 1
0x2114	0x6E00      	MOVWF       R0 
0x2116	0x0E80      	MOVLW       128
0x2118	0x1944      	XORWF       get_pwr_Forward_L0+3, 0, 1
0x211A	0x5C00      	SUBWF       R0, 0 
0x211C	0xE108      	BNZ         L__get_pwr484
0x211E	0x5143      	MOVF        get_pwr_Forward_L0+2, 0, 1
0x2120	0x5D47      	SUBWF       get_pwr_Reverse_L0+2, 0, 1
0x2122	0xE105      	BNZ         L__get_pwr484
0x2124	0x5142      	MOVF        get_pwr_Forward_L0+1, 0, 1
0x2126	0x5D46      	SUBWF       get_pwr_Reverse_L0+1, 0, 1
0x2128	0xE102      	BNZ         L__get_pwr484
0x212A	0x5141      	MOVF        get_pwr_Forward_L0, 0, 1
0x212C	0x5D45      	SUBWF       get_pwr_Reverse_L0, 0, 1
L__get_pwr484:
0x212E	0xE308      	BNC         L_get_pwr29
;main.h,113 :: 		Forward = 999;
0x2130	0x0EE7      	MOVLW       231
0x2132	0x6F41      	MOVWF       get_pwr_Forward_L0, 1
0x2134	0x0E03      	MOVLW       3
0x2136	0x6F42      	MOVWF       get_pwr_Forward_L0+1, 1
0x2138	0x0E00      	MOVLW       0
0x213A	0x6F43      	MOVWF       get_pwr_Forward_L0+2, 1
0x213C	0x6F44      	MOVWF       get_pwr_Forward_L0+3, 1
0x213E	0xD044      	BRA         L_get_pwr30
L_get_pwr29:
;main.h,115 :: 		Forward = ((Forward + Reverse) * 100) / (Forward - Reverse);
0x2140	0x5145      	MOVF        get_pwr_Reverse_L0, 0, 1
0x2142	0x2541      	ADDWF       get_pwr_Forward_L0, 0, 1
0x2144	0x6E00      	MOVWF       R0 
0x2146	0x5146      	MOVF        get_pwr_Reverse_L0+1, 0, 1
0x2148	0x2142      	ADDWFC      get_pwr_Forward_L0+1, 0, 1
0x214A	0x6E01      	MOVWF       R1 
0x214C	0x5147      	MOVF        get_pwr_Reverse_L0+2, 0, 1
0x214E	0x2143      	ADDWFC      get_pwr_Forward_L0+2, 0, 1
0x2150	0x6E02      	MOVWF       R2 
0x2152	0x5148      	MOVF        get_pwr_Reverse_L0+3, 0, 1
0x2154	0x2144      	ADDWFC      get_pwr_Forward_L0+3, 0, 1
0x2156	0x6E03      	MOVWF       R3 
0x2158	0x0E64      	MOVLW       100
0x215A	0x6E04      	MOVWF       R4 
0x215C	0x0E00      	MOVLW       0
0x215E	0x6E05      	MOVWF       R5 
0x2160	0x6E06      	MOVWF       R6 
0x2162	0x6E07      	MOVWF       R7 
0x2164	0xF003EC81  	CALL        _Mul_32x32_U, 0
0x2168	0xF004C341  	MOVFF       get_pwr_Forward_L0, R4
0x216C	0xF005C342  	MOVFF       get_pwr_Forward_L0+1, R5
0x2170	0xF006C343  	MOVFF       get_pwr_Forward_L0+2, R6
0x2174	0xF007C344  	MOVFF       get_pwr_Forward_L0+3, R7
0x2178	0x5145      	MOVF        get_pwr_Reverse_L0, 0, 1
0x217A	0x5E04      	SUBWF       R4, 1 
0x217C	0x5146      	MOVF        get_pwr_Reverse_L0+1, 0, 1
0x217E	0x5A05      	SUBWFB      R5, 1 
0x2180	0x5147      	MOVF        get_pwr_Reverse_L0+2, 0, 1
0x2182	0x5A06      	SUBWFB      R6, 1 
0x2184	0x5148      	MOVF        get_pwr_Reverse_L0+3, 0, 1
0x2186	0x5A07      	SUBWFB      R7, 1 
0x2188	0xDCEF      	RCALL       _Div_32x32_S
0x218A	0xF341C000  	MOVFF       R0, get_pwr_Forward_L0
0x218E	0xF342C001  	MOVFF       R1, get_pwr_Forward_L0+1
0x2192	0xF343C002  	MOVFF       R2, get_pwr_Forward_L0+2
0x2196	0xF344C003  	MOVFF       R3, get_pwr_Forward_L0+3
;main.h,116 :: 		if (Forward > 999)
0x219A	0x0E80      	MOVLW       128
0x219C	0x6E04      	MOVWF       R4 
0x219E	0x0E80      	MOVLW       128
0x21A0	0x1803      	XORWF       R3, 0 
0x21A2	0x5C04      	SUBWF       R4, 0 
0x21A4	0xE108      	BNZ         L__get_pwr485
0x21A6	0x5002      	MOVF        R2, 0 
0x21A8	0x0800      	SUBLW       0
0x21AA	0xE105      	BNZ         L__get_pwr485
0x21AC	0x5001      	MOVF        R1, 0 
0x21AE	0x0803      	SUBLW       3
0x21B0	0xE102      	BNZ         L__get_pwr485
0x21B2	0x5000      	MOVF        R0, 0 
0x21B4	0x08E7      	SUBLW       231
L__get_pwr485:
0x21B6	0xE208      	BC          L_get_pwr31
;main.h,117 :: 		Forward = 999;
0x21B8	0x0EE7      	MOVLW       231
0x21BA	0x0103      	MOVLB       3
0x21BC	0x6F41      	MOVWF       get_pwr_Forward_L0, 1
0x21BE	0x0E03      	MOVLW       3
0x21C0	0x6F42      	MOVWF       get_pwr_Forward_L0+1, 1
0x21C2	0x0E00      	MOVLW       0
0x21C4	0x6F43      	MOVWF       get_pwr_Forward_L0+2, 1
0x21C6	0x6F44      	MOVWF       get_pwr_Forward_L0+3, 1
L_get_pwr31:
;main.h,118 :: 		}
L_get_pwr30:
;main.h,120 :: 		p = p * K_Mult / 1000.0; // mV to Volts on Input
0x21C8	0xF000C04F  	MOVFF       main_K_Mult, R0
0x21CC	0xDD7C      	RCALL       _byte2double
0x21CE	0xF004C349  	MOVFF       get_pwr_p_L0, R4
0x21D2	0xF005C34A  	MOVFF       get_pwr_p_L0+1, R5
0x21D6	0xF006C34B  	MOVFF       get_pwr_p_L0+2, R6
0x21DA	0xF007C34C  	MOVFF       get_pwr_p_L0+3, R7
0x21DE	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x21E2	0x0E00      	MOVLW       0
0x21E4	0x6E04      	MOVWF       R4 
0x21E6	0x0E00      	MOVLW       0
0x21E8	0x6E05      	MOVWF       R5 
0x21EA	0x0E7A      	MOVLW       122
0x21EC	0x6E06      	MOVWF       R6 
0x21EE	0x0E88      	MOVLW       136
0x21F0	0x6E07      	MOVWF       R7 
0x21F2	0xDD78      	RCALL       _Div_32x32_FP
0x21F4	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x21F8	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x21FC	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x2200	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
;main.h,121 :: 		p = p / 1.414;
0x2204	0x0EF4      	MOVLW       244
0x2206	0x6E04      	MOVWF       R4 
0x2208	0x0EFD      	MOVLW       253
0x220A	0x6E05      	MOVWF       R5 
0x220C	0x0E34      	MOVLW       52
0x220E	0x6E06      	MOVWF       R6 
0x2210	0x0E7F      	MOVLW       127
0x2212	0x6E07      	MOVWF       R7 
0x2214	0xDD67      	RCALL       _Div_32x32_FP
0x2216	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x221A	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x221E	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x2222	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
;main.h,122 :: 		if (P_High == 1)
0x2226	0x504E      	MOVF        main_P_High, 0 
0x2228	0x0A01      	XORLW       1
0x222A	0xE124      	BNZ         L_get_pwr32
;main.h,123 :: 		p = p * p / 50; // 0 - 1500 ( 1500 Watts)
0x222C	0xF000C349  	MOVFF       get_pwr_p_L0, R0
0x2230	0xF001C34A  	MOVFF       get_pwr_p_L0+1, R1
0x2234	0xF002C34B  	MOVFF       get_pwr_p_L0+2, R2
0x2238	0xF003C34C  	MOVFF       get_pwr_p_L0+3, R3
0x223C	0xF004C349  	MOVFF       get_pwr_p_L0, R4
0x2240	0xF005C34A  	MOVFF       get_pwr_p_L0+1, R5
0x2244	0xF006C34B  	MOVFF       get_pwr_p_L0+2, R6
0x2248	0xF007C34C  	MOVFF       get_pwr_p_L0+3, R7
0x224C	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2250	0x0E00      	MOVLW       0
0x2252	0x6E04      	MOVWF       R4 
0x2254	0x0E00      	MOVLW       0
0x2256	0x6E05      	MOVWF       R5 
0x2258	0x0E48      	MOVLW       72
0x225A	0x6E06      	MOVWF       R6 
0x225C	0x0E84      	MOVLW       132
0x225E	0x6E07      	MOVWF       R7 
0x2260	0xDD41      	RCALL       _Div_32x32_FP
0x2262	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x2266	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x226A	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x226E	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
0x2272	0xD023      	BRA         L_get_pwr33
L_get_pwr32:
;main.h,125 :: 		p = p * p / 5; // 0 - 1510 (151.0 Watts)
0x2274	0xF000C349  	MOVFF       get_pwr_p_L0, R0
0x2278	0xF001C34A  	MOVFF       get_pwr_p_L0+1, R1
0x227C	0xF002C34B  	MOVFF       get_pwr_p_L0+2, R2
0x2280	0xF003C34C  	MOVFF       get_pwr_p_L0+3, R3
0x2284	0xF004C349  	MOVFF       get_pwr_p_L0, R4
0x2288	0xF005C34A  	MOVFF       get_pwr_p_L0+1, R5
0x228C	0xF006C34B  	MOVFF       get_pwr_p_L0+2, R6
0x2290	0xF007C34C  	MOVFF       get_pwr_p_L0+3, R7
0x2294	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2298	0x0E00      	MOVLW       0
0x229A	0x6E04      	MOVWF       R4 
0x229C	0x0E00      	MOVLW       0
0x229E	0x6E05      	MOVWF       R5 
0x22A0	0x0E20      	MOVLW       32
0x22A2	0x6E06      	MOVWF       R6 
0x22A4	0x0E81      	MOVLW       129
0x22A6	0x6E07      	MOVWF       R7 
0x22A8	0xDD1D      	RCALL       _Div_32x32_FP
0x22AA	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x22AE	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x22B2	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x22B6	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
L_get_pwr33:
;main.h,126 :: 		p = p + 0.5; // rounding to 0.1 W
0x22BA	0xF000C349  	MOVFF       get_pwr_p_L0, R0
0x22BE	0xF001C34A  	MOVFF       get_pwr_p_L0+1, R1
0x22C2	0xF002C34B  	MOVFF       get_pwr_p_L0+2, R2
0x22C6	0xF003C34C  	MOVFF       get_pwr_p_L0+3, R3
0x22CA	0x0E00      	MOVLW       0
0x22CC	0x6E04      	MOVWF       R4 
0x22CE	0x0E00      	MOVLW       0
0x22D0	0x6E05      	MOVWF       R5 
0x22D2	0x0E00      	MOVLW       0
0x22D4	0x6E06      	MOVWF       R6 
0x22D6	0x0E7E      	MOVLW       126
0x22D8	0x6E07      	MOVWF       R7 
0x22DA	0xF00BEC7F  	CALL        _Add_32x32_FP, 0
0x22DE	0xF349C000  	MOVFF       R0, get_pwr_p_L0
0x22E2	0xF34AC001  	MOVFF       R1, get_pwr_p_L0+1
0x22E6	0xF34BC002  	MOVFF       R2, get_pwr_p_L0+2
0x22EA	0xF34CC003  	MOVFF       R3, get_pwr_p_L0+3
;main.h,128 :: 		PWR = p;
0x22EE	0xF006EC9E  	CALL        _double2int, 0
0x22F2	0xF2D5C000  	MOVFF       R0, _PWR
0x22F6	0xF2D6C001  	MOVFF       R1, _PWR+1
;main.h,129 :: 		if (PWR < 10)
0x22FA	0x0E80      	MOVLW       128
0x22FC	0x1801      	XORWF       R1, 0 
0x22FE	0x6E02      	MOVWF       R2 
0x2300	0x0E80      	MOVLW       128
0x2302	0x5C02      	SUBWF       R2, 0 
0x2304	0xE102      	BNZ         L__get_pwr486
0x2306	0x0E0A      	MOVLW       10
0x2308	0x5C00      	SUBWF       R0, 0 
L__get_pwr486:
0x230A	0xE206      	BC          L_get_pwr34
;main.h,130 :: 		SWR = 1;
0x230C	0x0E01      	MOVLW       1
0x230E	0x0102      	MOVLB       2
0x2310	0x6FD8      	MOVWF       _SWR, 1
0x2312	0x0E00      	MOVLW       0
0x2314	0x6FD9      	MOVWF       _SWR+1, 1
0x2316	0xD01A      	BRA         L_get_pwr35
L_get_pwr34:
;main.h,131 :: 		else if (Forward < 100)
0x2318	0x0E80      	MOVLW       128
0x231A	0x0103      	MOVLB       3
0x231C	0x1944      	XORWF       get_pwr_Forward_L0+3, 0, 1
0x231E	0x6E00      	MOVWF       R0 
0x2320	0x0E80      	MOVLW       128
0x2322	0x5C00      	SUBWF       R0, 0 
0x2324	0xE108      	BNZ         L__get_pwr487
0x2326	0x0E00      	MOVLW       0
0x2328	0x5D43      	SUBWF       get_pwr_Forward_L0+2, 0, 1
0x232A	0xE105      	BNZ         L__get_pwr487
0x232C	0x0E00      	MOVLW       0
0x232E	0x5D42      	SUBWF       get_pwr_Forward_L0+1, 0, 1
0x2330	0xE102      	BNZ         L__get_pwr487
0x2332	0x0E64      	MOVLW       100
0x2334	0x5D41      	SUBWF       get_pwr_Forward_L0, 0, 1
L__get_pwr487:
0x2336	0xE206      	BC          L_get_pwr36
;main.h,132 :: 		SWR = 999;
0x2338	0x0EE7      	MOVLW       231
0x233A	0x0102      	MOVLB       2
0x233C	0x6FD8      	MOVWF       _SWR, 1
0x233E	0x0E03      	MOVLW       3
0x2340	0x6FD9      	MOVWF       _SWR+1, 1
0x2342	0xD004      	BRA         L_get_pwr37
L_get_pwr36:
;main.h,134 :: 		SWR = Forward;
0x2344	0xF2D8C341  	MOVFF       get_pwr_Forward_L0, _SWR
0x2348	0xF2D9C342  	MOVFF       get_pwr_Forward_L0+1, _SWR+1
L_get_pwr37:
L_get_pwr35:
;main.h,135 :: 		return;
;main.h,136 :: 		}
L_end_get_pwr:
0x234C	0x0012      	RETURN      0
; end of _get_pwr
_lcd_swr:
;main.c,513 :: 		void lcd_swr(int swr) {
;main.c,514 :: 		asm CLRWDT;
0x234E	0x0004      	CLRWDT
;main.c,515 :: 		if (swr != SWR_old) {
0x2350	0x0103      	MOVLB       3
0x2352	0x5142      	MOVF        FARG_lcd_swr_swr+1, 0, 1
0x2354	0x0102      	MOVLB       2
0x2356	0x198A      	XORWF       _SWR_old+1, 0, 1
0x2358	0xE103      	BNZ         L__lcd_swr626
0x235A	0x5189      	MOVF        _SWR_old, 0, 1
0x235C	0x0103      	MOVLB       3
0x235E	0x1941      	XORWF       FARG_lcd_swr_swr, 0, 1
L__lcd_swr626:
0x2360	0xB4D8      	BTFSC       STATUS, 2 
0x2362	0xD0AB      	BRA         L_lcd_swr295
;main.c,516 :: 		SWR_old = swr;
0x2364	0x0103      	MOVLB       3
0x2366	0xF289C341  	MOVFF       FARG_lcd_swr_swr, _SWR_old
0x236A	0xF28AC342  	MOVFF       FARG_lcd_swr_swr+1, _SWR_old+1
;main.c,517 :: 		if (swr == 1) { // Low power
0x236E	0x0E00      	MOVLW       0
0x2370	0x1942      	XORWF       FARG_lcd_swr_swr+1, 0, 1
0x2372	0xE102      	BNZ         L__lcd_swr627
0x2374	0x0E01      	MOVLW       1
0x2376	0x1941      	XORWF       FARG_lcd_swr_swr, 0, 1
L__lcd_swr627:
0x2378	0xE13A      	BNZ         L_lcd_swr296
;main.c,518 :: 		if (type == 4 | type == 5)
0x237A	0x0102      	MOVLB       2
0x237C	0x51D7      	MOVF        _type, 0, 1
0x237E	0x0A04      	XORLW       4
0x2380	0x0E01      	MOVLW       1
0x2382	0xA4D8      	BTFSS       STATUS, 2 
0x2384	0x0E00      	MOVLW       0
0x2386	0x6E01      	MOVWF       R1 
0x2388	0x51D7      	MOVF        _type, 0, 1
0x238A	0x0A05      	XORLW       5
0x238C	0x0E01      	MOVLW       1
0x238E	0xA4D8      	BTFSS       STATUS, 2 
0x2390	0x0E00      	MOVLW       0
0x2392	0x6E00      	MOVWF       R0 
0x2394	0x5001      	MOVF        R1, 0 
0x2396	0x1200      	IORWF       R0, 1 
0x2398	0xE00E      	BZ          L_lcd_swr297
;main.c,519 :: 		led_wr_str(2, 16 + 4 * 12, "0.00", 4); // 128*64 OLED
0x239A	0x0E02      	MOVLW       2
0x239C	0x0103      	MOVLB       3
0x239E	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x23A0	0x0E40      	MOVLW       64
0x23A2	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x23A4	0x0E1F      	MOVLW       ?lstr50_main
0x23A6	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x23A8	0x0E01      	MOVLW       hi_addr(?lstr50_main)
0x23AA	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x23AC	0x0E04      	MOVLW       4
0x23AE	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x23B0	0xF007EC7F  	CALL        _led_wr_str, 0
0x23B4	0xD018      	BRA         L_lcd_swr298
L_lcd_swr297:
;main.c,520 :: 		else if (type != 0)
0x23B6	0x0102      	MOVLB       2
0x23B8	0x51D7      	MOVF        _type, 0, 1
0x23BA	0x0A00      	XORLW       0
0x23BC	0xE00E      	BZ          L_lcd_swr299
;main.c,521 :: 		led_wr_str(1, 4, "0.00", 4); // 1602  & 128*32 OLED
0x23BE	0x0E01      	MOVLW       1
0x23C0	0x0103      	MOVLB       3
0x23C2	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x23C4	0x0E04      	MOVLW       4
0x23C6	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x23C8	0x0E1A      	MOVLW       ?lstr51_main
0x23CA	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x23CC	0x0E01      	MOVLW       hi_addr(?lstr51_main)
0x23CE	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x23D0	0x0E04      	MOVLW       4
0x23D2	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x23D4	0xF007EC7F  	CALL        _led_wr_str, 0
0x23D8	0xD006      	BRA         L_lcd_swr300
L_lcd_swr299:
;main.c,522 :: 		else if (type == 0) { // real-time 2-colors led work
0x23DA	0x0102      	MOVLB       2
0x23DC	0x51D7      	MOVF        _type, 0, 1
0x23DE	0x0A00      	XORLW       0
0x23E0	0xE102      	BNZ         L_lcd_swr301
;main.c,523 :: 		LATB.B6 = 1;
0x23E2	0x8C8A      	BSF         LATB, 6 
;main.c,524 :: 		LATB.B7 = 1;
0x23E4	0x8E8A      	BSF         LATB, 7 
;main.c,525 :: 		}
L_lcd_swr301:
L_lcd_swr300:
L_lcd_swr298:
0x23E6	0x0102      	MOVLB       2
;main.c,526 :: 		SWR_old = 0;
0x23E8	0x6B89      	CLRF        _SWR_old, 1
0x23EA	0x6B8A      	CLRF        _SWR_old+1, 1
;main.c,527 :: 		} else {
0x23EC	0xD066      	BRA         L_lcd_swr302
L_lcd_swr296:
;main.c,528 :: 		SWR_old = swr;
0x23EE	0xF289C341  	MOVFF       FARG_lcd_swr_swr, _SWR_old
0x23F2	0xF28AC342  	MOVFF       FARG_lcd_swr_swr+1, _SWR_old+1
;main.c,529 :: 		IntToStr(swr, work_str);
0x23F6	0xF366C341  	MOVFF       FARG_lcd_swr_swr, FARG_IntToStr_input
0x23FA	0xF367C342  	MOVFF       FARG_lcd_swr_swr+1, FARG_IntToStr_input+1
0x23FE	0x0EE7      	MOVLW       _work_str
0x2400	0x0103      	MOVLB       3
0x2402	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2404	0x0E02      	MOVLW       hi_addr(_work_str)
0x2406	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2408	0xF007EC11  	CALL        _IntToStr, 0
;main.c,530 :: 		work_str_2[0] = work_str[3];
0x240C	0xF2E0C2EA  	MOVFF       _work_str+3, _work_str_2
;main.c,531 :: 		work_str_2[1] = '.';
0x2410	0x0E2E      	MOVLW       46
0x2412	0x0102      	MOVLB       2
0x2414	0x6FE1      	MOVWF       _work_str_2+1, 1
;main.c,532 :: 		work_str_2[2] = work_str[4];
0x2416	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,533 :: 		work_str_2[3] = work_str[5];
0x241A	0xF2E3C2EC  	MOVFF       _work_str+5, _work_str_2+3
;main.c,534 :: 		if (type == 4 | type == 5)
0x241E	0x51D7      	MOVF        _type, 0, 1
0x2420	0x0A04      	XORLW       4
0x2422	0x0E01      	MOVLW       1
0x2424	0xA4D8      	BTFSS       STATUS, 2 
0x2426	0x0E00      	MOVLW       0
0x2428	0x6E01      	MOVWF       R1 
0x242A	0x51D7      	MOVF        _type, 0, 1
0x242C	0x0A05      	XORLW       5
0x242E	0x0E01      	MOVLW       1
0x2430	0xA4D8      	BTFSS       STATUS, 2 
0x2432	0x0E00      	MOVLW       0
0x2434	0x6E00      	MOVWF       R0 
0x2436	0x5001      	MOVF        R1, 0 
0x2438	0x1200      	IORWF       R0, 1 
0x243A	0xE00E      	BZ          L_lcd_swr303
;main.c,535 :: 		led_wr_str(2, 16 + 4 * 12, work_str_2, 4); // 128*64 OLED
0x243C	0x0E02      	MOVLW       2
0x243E	0x0103      	MOVLB       3
0x2440	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2442	0x0E40      	MOVLW       64
0x2444	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2446	0x0EE0      	MOVLW       _work_str_2
0x2448	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x244A	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x244C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x244E	0x0E04      	MOVLW       4
0x2450	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2452	0xF007EC7F  	CALL        _led_wr_str, 0
0x2456	0xD031      	BRA         L_lcd_swr304
L_lcd_swr303:
;main.c,536 :: 		else if (type != 0)
0x2458	0x0102      	MOVLB       2
0x245A	0x51D7      	MOVF        _type, 0, 1
0x245C	0x0A00      	XORLW       0
0x245E	0xE00E      	BZ          L_lcd_swr305
;main.c,537 :: 		led_wr_str(1, 4, work_str_2, 4); // 1602  & 128*32
0x2460	0x0E01      	MOVLW       1
0x2462	0x0103      	MOVLB       3
0x2464	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2466	0x0E04      	MOVLW       4
0x2468	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x246A	0x0EE0      	MOVLW       _work_str_2
0x246C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x246E	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2470	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2472	0x0E04      	MOVLW       4
0x2474	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2476	0xF007EC7F  	CALL        _led_wr_str, 0
0x247A	0xD01F      	BRA         L_lcd_swr306
L_lcd_swr305:
;main.c,538 :: 		else if (type == 0) { // real-time 2-colors led work
0x247C	0x0102      	MOVLB       2
0x247E	0x51D7      	MOVF        _type, 0, 1
0x2480	0x0A00      	XORLW       0
0x2482	0xE11B      	BNZ         L_lcd_swr307
;main.c,539 :: 		if (swr <= 150) {
0x2484	0x0E80      	MOVLW       128
0x2486	0x6E00      	MOVWF       R0 
0x2488	0x0E80      	MOVLW       128
0x248A	0x0103      	MOVLB       3
0x248C	0x1942      	XORWF       FARG_lcd_swr_swr+1, 0, 1
0x248E	0x5C00      	SUBWF       R0, 0 
0x2490	0xE102      	BNZ         L__lcd_swr628
0x2492	0x5141      	MOVF        FARG_lcd_swr_swr, 0, 1
0x2494	0x0896      	SUBLW       150
L__lcd_swr628:
0x2496	0xE303      	BNC         L_lcd_swr308
;main.c,540 :: 		LATB.B6 = 0;
0x2498	0x9C8A      	BCF         LATB, 6 
;main.c,541 :: 		LATB.B7 = 1;
0x249A	0x8E8A      	BSF         LATB, 7 
;main.c,542 :: 		} // Green
0x249C	0xD00E      	BRA         L_lcd_swr309
L_lcd_swr308:
;main.c,543 :: 		else if (swr <= 250) {
0x249E	0x0E80      	MOVLW       128
0x24A0	0x6E00      	MOVWF       R0 
0x24A2	0x0E80      	MOVLW       128
0x24A4	0x1942      	XORWF       FARG_lcd_swr_swr+1, 0, 1
0x24A6	0x5C00      	SUBWF       R0, 0 
0x24A8	0xE102      	BNZ         L__lcd_swr629
0x24AA	0x5141      	MOVF        FARG_lcd_swr_swr, 0, 1
0x24AC	0x08FA      	SUBLW       250
L__lcd_swr629:
0x24AE	0xE303      	BNC         L_lcd_swr310
;main.c,544 :: 		PORTB.B6 = 0;
0x24B0	0x9C81      	BCF         PORTB, 6 
;main.c,545 :: 		PORTB.B7 = 0;
0x24B2	0x9E81      	BCF         PORTB, 7 
;main.c,546 :: 		} // Orange
0x24B4	0xD002      	BRA         L_lcd_swr311
L_lcd_swr310:
;main.c,548 :: 		PORTB.B6 = 1;
0x24B6	0x8C81      	BSF         PORTB, 6 
;main.c,549 :: 		PORTB.B7 = 0;
0x24B8	0x9E81      	BCF         PORTB, 7 
;main.c,550 :: 		} // Red
L_lcd_swr311:
L_lcd_swr309:
;main.c,551 :: 		}
L_lcd_swr307:
L_lcd_swr306:
L_lcd_swr304:
;main.c,552 :: 		}
L_lcd_swr302:
;main.c,553 :: 		}
L_lcd_swr295:
;main.c,554 :: 		asm CLRWDT;
0x24BA	0x0004      	CLRWDT
;main.c,555 :: 		return;
;main.c,556 :: 		}
L_end_lcd_swr:
0x24BC	0x0012      	RETURN      0
; end of _lcd_swr
_set_cap:
;main.h,204 :: 		void set_cap(char Cap) { // 0 - 31
;main.h,205 :: 		Cap_10 = Cap.B0;
0x24BE	0x0103      	MOVLB       3
0x24C0	0xB141      	BTFSC       FARG_set_cap_Cap, 0, 1
0x24C2	0xD002      	BRA         L__set_cap524
0x24C4	0x9E8B      	BCF         LATC7_bit, BitPos(LATC7_bit+0) 
0x24C6	0xD001      	BRA         L__set_cap525
L__set_cap524:
0x24C8	0x8E8B      	BSF         LATC7_bit, BitPos(LATC7_bit+0) 
L__set_cap525:
;main.h,206 :: 		Cap_22 = Cap.B1;
0x24CA	0xB341      	BTFSC       FARG_set_cap_Cap, 1, 1
0x24CC	0xD002      	BRA         L__set_cap526
0x24CE	0x968B      	BCF         LATC3_bit, BitPos(LATC3_bit+0) 
0x24D0	0xD001      	BRA         L__set_cap527
L__set_cap526:
0x24D2	0x868B      	BSF         LATC3_bit, BitPos(LATC3_bit+0) 
L__set_cap527:
;main.h,207 :: 		Cap_47 = Cap.B2;
0x24D4	0xB541      	BTFSC       FARG_set_cap_Cap, 2, 1
0x24D6	0xD002      	BRA         L__set_cap528
0x24D8	0x9C8B      	BCF         LATC6_bit, BitPos(LATC6_bit+0) 
0x24DA	0xD001      	BRA         L__set_cap529
L__set_cap528:
0x24DC	0x8C8B      	BSF         LATC6_bit, BitPos(LATC6_bit+0) 
L__set_cap529:
;main.h,208 :: 		Cap_100 = Cap.B3;
0x24DE	0xB741      	BTFSC       FARG_set_cap_Cap, 3, 1
0x24E0	0xD002      	BRA         L__set_cap530
0x24E2	0x948B      	BCF         LATC2_bit, BitPos(LATC2_bit+0) 
0x24E4	0xD001      	BRA         L__set_cap531
L__set_cap530:
0x24E6	0x848B      	BSF         LATC2_bit, BitPos(LATC2_bit+0) 
L__set_cap531:
;main.h,209 :: 		Cap_220 = Cap.B4;
0x24E8	0xB941      	BTFSC       FARG_set_cap_Cap, 4, 1
0x24EA	0xD002      	BRA         L__set_cap532
0x24EC	0x9A8B      	BCF         LATC5_bit, BitPos(LATC5_bit+0) 
0x24EE	0xD001      	BRA         L__set_cap533
L__set_cap532:
0x24F0	0x8A8B      	BSF         LATC5_bit, BitPos(LATC5_bit+0) 
L__set_cap533:
;main.h,210 :: 		Cap_470 = Cap.B5;
0x24F2	0xBB41      	BTFSC       FARG_set_cap_Cap, 5, 1
0x24F4	0xD002      	BRA         L__set_cap534
0x24F6	0x928B      	BCF         LATC1_bit, BitPos(LATC1_bit+0) 
0x24F8	0xD001      	BRA         L__set_cap535
L__set_cap534:
0x24FA	0x828B      	BSF         LATC1_bit, BitPos(LATC1_bit+0) 
L__set_cap535:
;main.h,211 :: 		Cap_1000 = Cap.B6;
0x24FC	0xBD41      	BTFSC       FARG_set_cap_Cap, 6, 1
0x24FE	0xD002      	BRA         L__set_cap536
0x2500	0x988B      	BCF         LATC4_bit, BitPos(LATC4_bit+0) 
0x2502	0xD001      	BRA         L__set_cap537
L__set_cap536:
0x2504	0x888B      	BSF         LATC4_bit, BitPos(LATC4_bit+0) 
L__set_cap537:
;main.h,212 :: 		if (mem_offset == band_160m)        // kod pasma 160m
0x2506	0x0E00      	MOVLW       0
0x2508	0x0102      	MOVLB       2
0x250A	0x1973      	XORWF       _mem_offset+1, 0, 1
0x250C	0xE102      	BNZ         L__set_cap538
0x250E	0x515A      	MOVF        _band_160m, 0, 1
0x2510	0x1972      	XORWF       _mem_offset, 0, 1
L__set_cap538:
0x2512	0xE102      	BNZ         L_set_cap50
;main.h,214 :: 		Cap_1820 = 1;
0x2514	0x8E89      	BSF         LATA7_bit, BitPos(LATA7_bit+0) 
;main.h,215 :: 		}
0x2516	0xD001      	BRA         L_set_cap51
L_set_cap50:
;main.h,218 :: 		Cap_1820 = 0;
0x2518	0x9E89      	BCF         LATA7_bit, BitPos(LATA7_bit+0) 
;main.h,219 :: 		}
L_set_cap51:
;main.h,221 :: 		Vdelay_ms(Rel_Del);
0x251A	0xF35FC2D1  	MOVFF       main_Rel_Del, FARG_VDelay_ms_Time_ms
0x251E	0xF360C2D2  	MOVFF       main_Rel_Del+1, FARG_VDelay_ms_Time_ms+1
0x2522	0xF00AEC79  	CALL        _VDelay_ms, 0
;main.h,222 :: 		}
L_end_set_cap:
0x2526	0x0012      	RETURN      0
; end of _set_cap
_button_delay:
;main.c,558 :: 		void button_delay() {
;main.c,559 :: 		if ((Button( & PORTB, 0, 25, 0)) | (Button( & PORTB, 1, 25, 0)) |
0x2528	0x0E81      	MOVLW       PORTB
0x252A	0x0103      	MOVLB       3
0x252C	0x6F5F      	MOVWF       FARG_Button_port, 1
0x252E	0x0E0F      	MOVLW       hi_addr(PORTB)
0x2530	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x2532	0x6B61      	CLRF        FARG_Button_pin, 1
0x2534	0x0E19      	MOVLW       25
0x2536	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x2538	0x6B63      	CLRF        FARG_Button_active_state, 1
0x253A	0xF00AEC41  	CALL        _Button, 0
0x253E	0xF341C000  	MOVFF       R0, FLOC__button_delay
0x2542	0x0E81      	MOVLW       PORTB
0x2544	0x6F5F      	MOVWF       FARG_Button_port, 1
0x2546	0x0E0F      	MOVLW       hi_addr(PORTB)
0x2548	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x254A	0x0E01      	MOVLW       1
0x254C	0x6F61      	MOVWF       FARG_Button_pin, 1
0x254E	0x0E19      	MOVLW       25
0x2550	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x2552	0x6B63      	CLRF        FARG_Button_active_state, 1
0x2554	0xF00AEC41  	CALL        _Button, 0
0x2558	0x5000      	MOVF        R0, 0 
0x255A	0x1341      	IORWF       FLOC__button_delay, 1, 1
;main.c,560 :: 		(Button( & PORTB, 2, 25, 0))) {
0x255C	0x0E81      	MOVLW       PORTB
0x255E	0x6F5F      	MOVWF       FARG_Button_port, 1
0x2560	0x0E0F      	MOVLW       hi_addr(PORTB)
0x2562	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x2564	0x0E02      	MOVLW       2
0x2566	0x6F61      	MOVWF       FARG_Button_pin, 1
0x2568	0x0E19      	MOVLW       25
0x256A	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x256C	0x6B63      	CLRF        FARG_Button_active_state, 1
0x256E	0xF00AEC41  	CALL        _Button, 0
0x2572	0x5141      	MOVF        FLOC__button_delay, 0, 1
0x2574	0x1200      	IORWF       R0, 1 
0x2576	0xE003      	BZ          L_button_delay312
;main.c,561 :: 		but = 1;
0x2578	0x0E01      	MOVLW       1
0x257A	0x0100      	MOVLB       0
0x257C	0x6FEC      	MOVWF       _but, 1
;main.c,562 :: 		}
L_button_delay312:
;main.c,563 :: 		return;
;main.c,564 :: 		}
L_end_button_delay:
0x257E	0x0012      	RETURN      0
; end of _button_delay
_show_pwr:
;main.c,566 :: 		void show_pwr(int Power, int SWR) {
;main.c,570 :: 		asm CLRWDT;
0x2580	0x0004      	CLRWDT
;main.c,572 :: 		if (Test == 0 & Loss_ind == 1 & SWR >= 100) {
0x2582	0x505C      	MOVF        _Test, 0 
0x2584	0x0A00      	XORLW       0
0x2586	0x0E01      	MOVLW       1
0x2588	0xA4D8      	BTFSS       STATUS, 2 
0x258A	0x0E00      	MOVLW       0
0x258C	0x6E01      	MOVWF       R1 
0x258E	0x0102      	MOVLB       2
0x2590	0x515B      	MOVF        main_Loss_ind, 0, 1
0x2592	0x0A01      	XORLW       1
0x2594	0x0E01      	MOVLW       1
0x2596	0xA4D8      	BTFSS       STATUS, 2 
0x2598	0x0E00      	MOVLW       0
0x259A	0x6E00      	MOVWF       R0 
0x259C	0x5000      	MOVF        R0, 0 
0x259E	0x1601      	ANDWF       R1, 1 
0x25A0	0x0E80      	MOVLW       128
0x25A2	0x0103      	MOVLB       3
0x25A4	0x1944      	XORWF       FARG_show_pwr_SWR+1, 0, 1
0x25A6	0x6E00      	MOVWF       R0 
0x25A8	0x0E80      	MOVLW       128
0x25AA	0x5C00      	SUBWF       R0, 0 
0x25AC	0xE102      	BNZ         L__show_pwr632
0x25AE	0x0E64      	MOVLW       100
0x25B0	0x5D43      	SUBWF       FARG_show_pwr_SWR, 0, 1
L__show_pwr632:
0x25B2	0x0E00      	MOVLW       0
0x25B4	0xB0D8      	BTFSC       STATUS, 0 
0x25B6	0x0E01      	MOVLW       1
0x25B8	0x6E00      	MOVWF       R0 
0x25BA	0x5001      	MOVF        R1, 0 
0x25BC	0x1600      	ANDWF       R0, 1 
0x25BE	0xB4D8      	BTFSC       STATUS, 2 
0x25C0	0xD0AB      	BRA         L_show_pwr313
;main.c,573 :: 		if (Loss_mode == 0) { // prepare
0x25C2	0x0102      	MOVLB       2
0x25C4	0x5174      	MOVF        _Loss_mode, 0, 1
0x25C6	0x0A00      	XORLW       0
0x25C8	0xA4D8      	BTFSS       STATUS, 2 
0x25CA	0xD0A2      	BRA         L_show_pwr314
;main.c,574 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x25CC	0x51D7      	MOVF        _type, 0, 1
0x25CE	0x0A04      	XORLW       4
0x25D0	0x0E01      	MOVLW       1
0x25D2	0xA4D8      	BTFSS       STATUS, 2 
0x25D4	0x0E00      	MOVLW       0
0x25D6	0x6E01      	MOVWF       R1 
0x25D8	0x51D7      	MOVF        _type, 0, 1
0x25DA	0x0A05      	XORLW       5
0x25DC	0x0E01      	MOVLW       1
0x25DE	0xA4D8      	BTFSS       STATUS, 2 
0x25E0	0x0E00      	MOVLW       0
0x25E2	0x6E00      	MOVWF       R0 
0x25E4	0x5001      	MOVF        R1, 0 
0x25E6	0x1200      	IORWF       R0, 1 
0x25E8	0xE02C      	BZ          L_show_pwr315
;main.c,575 :: 		if (P_High == 1)
0x25EA	0x504E      	MOVF        main_P_High, 0 
0x25EC	0x0A01      	XORLW       1
0x25EE	0xE10E      	BNZ         L_show_pwr316
;main.c,576 :: 		led_wr_str(4, 16, "ANT=  0W", 8);
0x25F0	0x0E04      	MOVLW       4
0x25F2	0x0103      	MOVLB       3
0x25F4	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x25F6	0x0E10      	MOVLW       16
0x25F8	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x25FA	0x0E3F      	MOVLW       ?lstr52_main
0x25FC	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x25FE	0x0E00      	MOVLW       hi_addr(?lstr52_main)
0x2600	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2602	0x0E08      	MOVLW       8
0x2604	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2606	0xF007EC7F  	CALL        _led_wr_str, 0
0x260A	0xD00D      	BRA         L_show_pwr317
L_show_pwr316:
;main.c,578 :: 		led_wr_str(4, 16, "ANT=0.0W", 8);
0x260C	0x0E04      	MOVLW       4
0x260E	0x0103      	MOVLB       3
0x2610	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2612	0x0E10      	MOVLW       16
0x2614	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2616	0x0E36      	MOVLW       ?lstr53_main
0x2618	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x261A	0x0E00      	MOVLW       hi_addr(?lstr53_main)
0x261C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x261E	0x0E08      	MOVLW       8
0x2620	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2622	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr317:
;main.c,579 :: 		led_wr_str(6, 16, "EFF=  0%", 8);
0x2626	0x0E06      	MOVLW       6
0x2628	0x0103      	MOVLB       3
0x262A	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x262C	0x0E10      	MOVLW       16
0x262E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2630	0x0E2D      	MOVLW       ?lstr54_main
0x2632	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2634	0x0E00      	MOVLW       hi_addr(?lstr54_main)
0x2636	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2638	0x0E08      	MOVLW       8
0x263A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x263C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,580 :: 		} else if (type == 2 | type == 3) { // 128*32 OLED
0x2640	0xD067      	BRA         L_show_pwr318
L_show_pwr315:
0x2642	0x0102      	MOVLB       2
0x2644	0x51D7      	MOVF        _type, 0, 1
0x2646	0x0A02      	XORLW       2
0x2648	0x0E01      	MOVLW       1
0x264A	0xA4D8      	BTFSS       STATUS, 2 
0x264C	0x0E00      	MOVLW       0
0x264E	0x6E01      	MOVWF       R1 
0x2650	0x51D7      	MOVF        _type, 0, 1
0x2652	0x0A03      	XORLW       3
0x2654	0x0E01      	MOVLW       1
0x2656	0xA4D8      	BTFSS       STATUS, 2 
0x2658	0x0E00      	MOVLW       0
0x265A	0x6E00      	MOVWF       R0 
0x265C	0x5001      	MOVF        R1, 0 
0x265E	0x1200      	IORWF       R0, 1 
0x2660	0xE02A      	BZ          L_show_pwr319
;main.c,581 :: 		if (P_High == 1)
0x2662	0x504E      	MOVF        main_P_High, 0 
0x2664	0x0A01      	XORLW       1
0x2666	0xE10D      	BNZ         L_show_pwr320
;main.c,582 :: 		led_wr_str(0, 9, "ANT=  0W", 8);
0x2668	0x0103      	MOVLB       3
0x266A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x266C	0x0E09      	MOVLW       9
0x266E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2670	0x0E5E      	MOVLW       ?lstr55_main
0x2672	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2674	0x0E00      	MOVLW       hi_addr(?lstr55_main)
0x2676	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2678	0x0E08      	MOVLW       8
0x267A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x267C	0xF007EC7F  	CALL        _led_wr_str, 0
0x2680	0xD00C      	BRA         L_show_pwr321
L_show_pwr320:
;main.c,584 :: 		led_wr_str(0, 9, "ANT=0.0W", 8);
0x2682	0x0103      	MOVLB       3
0x2684	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x2686	0x0E09      	MOVLW       9
0x2688	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x268A	0x0EA7      	MOVLW       ?lstr56_main
0x268C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x268E	0x0E00      	MOVLW       hi_addr(?lstr56_main)
0x2690	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2692	0x0E08      	MOVLW       8
0x2694	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2696	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr321:
;main.c,585 :: 		led_wr_str(1, 9, "EFF=  0%", 8);
0x269A	0x0E01      	MOVLW       1
0x269C	0x0103      	MOVLB       3
0x269E	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x26A0	0x0E09      	MOVLW       9
0x26A2	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x26A4	0x0E9E      	MOVLW       ?lstr57_main
0x26A6	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x26A8	0x0E00      	MOVLW       hi_addr(?lstr57_main)
0x26AA	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x26AC	0x0E08      	MOVLW       8
0x26AE	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x26B0	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,586 :: 		} else if (type == 1) { // 1602 LCD
0x26B4	0xD02D      	BRA         L_show_pwr322
L_show_pwr319:
0x26B6	0x0102      	MOVLB       2
0x26B8	0x51D7      	MOVF        _type, 0, 1
0x26BA	0x0A01      	XORLW       1
0x26BC	0xE129      	BNZ         L_show_pwr323
;main.c,587 :: 		if (P_High == 1)
0x26BE	0x504E      	MOVF        main_P_High, 0 
0x26C0	0x0A01      	XORLW       1
0x26C2	0xE10D      	BNZ         L_show_pwr324
;main.c,588 :: 		led_wr_str(0, 9, "AN=  0W", 7);
0x26C4	0x0103      	MOVLB       3
0x26C6	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x26C8	0x0E09      	MOVLW       9
0x26CA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x26CC	0x0E96      	MOVLW       ?lstr58_main
0x26CE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x26D0	0x0E00      	MOVLW       hi_addr(?lstr58_main)
0x26D2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x26D4	0x0E07      	MOVLW       7
0x26D6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x26D8	0xF007EC7F  	CALL        _led_wr_str, 0
0x26DC	0xD00C      	BRA         L_show_pwr325
L_show_pwr324:
;main.c,590 :: 		led_wr_str(0, 9, "AN=0.0W", 7);
0x26DE	0x0103      	MOVLB       3
0x26E0	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x26E2	0x0E09      	MOVLW       9
0x26E4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x26E6	0x0EB0      	MOVLW       ?lstr59_main
0x26E8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x26EA	0x0E00      	MOVLW       hi_addr(?lstr59_main)
0x26EC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x26EE	0x0E07      	MOVLW       7
0x26F0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x26F2	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr325:
;main.c,591 :: 		led_wr_str(1, 9, "EFF= 0%", 7);
0x26F6	0x0E01      	MOVLW       1
0x26F8	0x0103      	MOVLB       3
0x26FA	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x26FC	0x0E09      	MOVLW       9
0x26FE	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2700	0x0EBB      	MOVLW       ?lstr60_main
0x2702	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2704	0x0E00      	MOVLW       hi_addr(?lstr60_main)
0x2706	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2708	0x0E07      	MOVLW       7
0x270A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x270C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,592 :: 		}
L_show_pwr323:
L_show_pwr322:
L_show_pwr318:
;main.c,593 :: 		}
L_show_pwr314:
;main.c,594 :: 		Loss_mode = 1;
0x2710	0x0E01      	MOVLW       1
0x2712	0x0102      	MOVLB       2
0x2714	0x6F74      	MOVWF       _Loss_mode, 1
;main.c,595 :: 		} else {
0x2716	0xD008      	BRA         L_show_pwr326
L_show_pwr313:
0x2718	0x0102      	MOVLB       2
;main.c,596 :: 		if (Loss_mode == 1)
0x271A	0x5174      	MOVF        _Loss_mode, 0, 1
0x271C	0x0A01      	XORLW       1
0x271E	0xE102      	BNZ         L_show_pwr327
;main.c,597 :: 		lcd_ind();
0x2720	0xF008EC10  	CALL        _lcd_ind, 0
L_show_pwr327:
;main.c,598 :: 		Loss_mode = 0;
0x2724	0x0102      	MOVLB       2
0x2726	0x6B74      	CLRF        _Loss_mode, 1
;main.c,599 :: 		}
L_show_pwr326:
;main.c,600 :: 		asm CLRWDT;
0x2728	0x0004      	CLRWDT
;main.c,601 :: 		if (Power != Power_old) {
0x272A	0x0103      	MOVLB       3
0x272C	0x5142      	MOVF        FARG_show_pwr_Power+1, 0, 1
0x272E	0x0102      	MOVLB       2
0x2730	0x198D      	XORWF       _Power_old+1, 0, 1
0x2732	0xE103      	BNZ         L__show_pwr633
0x2734	0x518C      	MOVF        _Power_old, 0, 1
0x2736	0x0103      	MOVLB       3
0x2738	0x1941      	XORWF       FARG_show_pwr_Power, 0, 1
L__show_pwr633:
0x273A	0xB4D8      	BTFSC       STATUS, 2 
0x273C	0xD398      	BRA         L_show_pwr328
;main.c,602 :: 		Power_old = Power;
0x273E	0xF28CC341  	MOVFF       FARG_show_pwr_Power, _Power_old
0x2742	0xF28DC342  	MOVFF       FARG_show_pwr_Power+1, _Power_old+1
;main.c,604 :: 		if (P_High == 0) {
0x2746	0x504E      	MOVF        main_P_High, 0 
0x2748	0x0A00      	XORLW       0
0x274A	0xE149      	BNZ         L_show_pwr329
;main.c,605 :: 		if (Power >= 100) { // > 10 W
0x274C	0x0103      	MOVLB       3
0x274E	0x0E80      	MOVLW       128
0x2750	0x1942      	XORWF       FARG_show_pwr_Power+1, 0, 1
0x2752	0x6E00      	MOVWF       R0 
0x2754	0x0E80      	MOVLW       128
0x2756	0x5C00      	SUBWF       R0, 0 
0x2758	0xE102      	BNZ         L__show_pwr634
0x275A	0x0E64      	MOVLW       100
0x275C	0x5D41      	SUBWF       FARG_show_pwr_Power, 0, 1
L__show_pwr634:
0x275E	0xE31E      	BNC         L_show_pwr330
;main.c,606 :: 		Power += 5; // rounding to 1 W
0x2760	0x0E05      	MOVLW       5
0x2762	0x2541      	ADDWF       FARG_show_pwr_Power, 0, 1
0x2764	0x6E00      	MOVWF       R0 
0x2766	0x0E00      	MOVLW       0
0x2768	0x2142      	ADDWFC      FARG_show_pwr_Power+1, 0, 1
0x276A	0x6E01      	MOVWF       R1 
0x276C	0xF341C000  	MOVFF       R0, FARG_show_pwr_Power
0x2770	0xF342C001  	MOVFF       R1, FARG_show_pwr_Power+1
;main.c,607 :: 		IntToStr(Power, work_str);
0x2774	0xF366C000  	MOVFF       R0, FARG_IntToStr_input
0x2778	0xF367C001  	MOVFF       R1, FARG_IntToStr_input+1
0x277C	0x0EE7      	MOVLW       _work_str
0x277E	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2780	0x0E02      	MOVLW       hi_addr(_work_str)
0x2782	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2784	0xF007EC11  	CALL        _IntToStr, 0
;main.c,608 :: 		work_str_2[0] = work_str[2];
0x2788	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
;main.c,609 :: 		work_str_2[1] = work_str[3];
0x278C	0xF2E1C2EA  	MOVFF       _work_str+3, _work_str_2+1
;main.c,610 :: 		work_str_2[2] = work_str[4];
0x2790	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,611 :: 		work_str_2[3] = 'W';
0x2794	0x0E57      	MOVLW       87
0x2796	0x0102      	MOVLB       2
0x2798	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,612 :: 		} else {
0x279A	0xD020      	BRA         L_show_pwr331
L_show_pwr330:
;main.c,613 :: 		IntToStr(Power, work_str);
0x279C	0xF366C341  	MOVFF       FARG_show_pwr_Power, FARG_IntToStr_input
0x27A0	0xF367C342  	MOVFF       FARG_show_pwr_Power+1, FARG_IntToStr_input+1
0x27A4	0x0EE7      	MOVLW       _work_str
0x27A6	0x0103      	MOVLB       3
0x27A8	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x27AA	0x0E02      	MOVLW       hi_addr(_work_str)
0x27AC	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x27AE	0xF007EC11  	CALL        _IntToStr, 0
;main.c,614 :: 		if (work_str[4] != ' ')
0x27B2	0x0102      	MOVLB       2
0x27B4	0x51EB      	MOVF        _work_str+4, 0, 1
0x27B6	0x0A20      	XORLW       32
0x27B8	0xE003      	BZ          L_show_pwr332
;main.c,615 :: 		work_str_2[0] = work_str[4];
0x27BA	0xF2E0C2EB  	MOVFF       _work_str+4, _work_str_2
0x27BE	0xD002      	BRA         L_show_pwr333
L_show_pwr332:
;main.c,617 :: 		work_str_2[0] = '0';
0x27C0	0x0E30      	MOVLW       48
0x27C2	0x6FE0      	MOVWF       _work_str_2, 1
L_show_pwr333:
;main.c,618 :: 		work_str_2[1] = '.';
0x27C4	0x0E2E      	MOVLW       46
0x27C6	0x6FE1      	MOVWF       _work_str_2+1, 1
;main.c,619 :: 		if (work_str[5] != ' ')
0x27C8	0x51EC      	MOVF        _work_str+5, 0, 1
0x27CA	0x0A20      	XORLW       32
0x27CC	0xE003      	BZ          L_show_pwr334
;main.c,620 :: 		work_str_2[2] = work_str[5];
0x27CE	0xF2E2C2EC  	MOVFF       _work_str+5, _work_str_2+2
0x27D2	0xD002      	BRA         L_show_pwr335
L_show_pwr334:
;main.c,622 :: 		work_str_2[2] = '0';
0x27D4	0x0E30      	MOVLW       48
0x27D6	0x6FE2      	MOVWF       _work_str_2+2, 1
L_show_pwr335:
;main.c,623 :: 		work_str_2[3] = 'W';
0x27D8	0x0E57      	MOVLW       87
0x27DA	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,624 :: 		}
L_show_pwr331:
;main.c,625 :: 		} else { // High Power
0x27DC	0xD032      	BRA         L_show_pwr336
L_show_pwr329:
;main.c,626 :: 		if (Power < 999) { // 0 - 1500 Watts
0x27DE	0x0E80      	MOVLW       128
0x27E0	0x0103      	MOVLB       3
0x27E2	0x1942      	XORWF       FARG_show_pwr_Power+1, 0, 1
0x27E4	0x6E00      	MOVWF       R0 
0x27E6	0x0E80      	MOVLW       128
0x27E8	0x0A03      	XORLW       3
0x27EA	0x5C00      	SUBWF       R0, 0 
0x27EC	0xE102      	BNZ         L__show_pwr635
0x27EE	0x0EE7      	MOVLW       231
0x27F0	0x5D41      	SUBWF       FARG_show_pwr_Power, 0, 1
L__show_pwr635:
0x27F2	0xE214      	BC          L_show_pwr337
;main.c,627 :: 		IntToStr(Power, work_str);
0x27F4	0xF366C341  	MOVFF       FARG_show_pwr_Power, FARG_IntToStr_input
0x27F8	0xF367C342  	MOVFF       FARG_show_pwr_Power+1, FARG_IntToStr_input+1
0x27FC	0x0EE7      	MOVLW       _work_str
0x27FE	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2800	0x0E02      	MOVLW       hi_addr(_work_str)
0x2802	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2804	0xF007EC11  	CALL        _IntToStr, 0
;main.c,628 :: 		work_str_2[0] = work_str[3];
0x2808	0xF2E0C2EA  	MOVFF       _work_str+3, _work_str_2
;main.c,629 :: 		work_str_2[1] = work_str[4];
0x280C	0xF2E1C2EB  	MOVFF       _work_str+4, _work_str_2+1
;main.c,630 :: 		work_str_2[2] = work_str[5];
0x2810	0xF2E2C2EC  	MOVFF       _work_str+5, _work_str_2+2
;main.c,631 :: 		work_str_2[3] = 'W';
0x2814	0x0E57      	MOVLW       87
0x2816	0x0102      	MOVLB       2
0x2818	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,632 :: 		} else {
0x281A	0xD013      	BRA         L_show_pwr338
L_show_pwr337:
;main.c,633 :: 		IntToStr(Power, work_str);
0x281C	0xF366C341  	MOVFF       FARG_show_pwr_Power, FARG_IntToStr_input
0x2820	0xF367C342  	MOVFF       FARG_show_pwr_Power+1, FARG_IntToStr_input+1
0x2824	0x0EE7      	MOVLW       _work_str
0x2826	0x0103      	MOVLB       3
0x2828	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x282A	0x0E02      	MOVLW       hi_addr(_work_str)
0x282C	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x282E	0xF007EC11  	CALL        _IntToStr, 0
;main.c,634 :: 		work_str_2[0] = work_str[2];
0x2832	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
;main.c,635 :: 		work_str_2[1] = work_str[3];
0x2836	0xF2E1C2EA  	MOVFF       _work_str+3, _work_str_2+1
;main.c,636 :: 		work_str_2[2] = work_str[4];
0x283A	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,637 :: 		work_str_2[3] = work_str[5];
0x283E	0xF2E3C2EC  	MOVFF       _work_str+5, _work_str_2+3
;main.c,638 :: 		}
L_show_pwr338:
;main.c,639 :: 		}
L_show_pwr336:
;main.c,640 :: 		if (type == 4 | type == 5)
0x2842	0x0102      	MOVLB       2
0x2844	0x51D7      	MOVF        _type, 0, 1
0x2846	0x0A04      	XORLW       4
0x2848	0x0E01      	MOVLW       1
0x284A	0xA4D8      	BTFSS       STATUS, 2 
0x284C	0x0E00      	MOVLW       0
0x284E	0x6E01      	MOVWF       R1 
0x2850	0x51D7      	MOVF        _type, 0, 1
0x2852	0x0A05      	XORLW       5
0x2854	0x0E01      	MOVLW       1
0x2856	0xA4D8      	BTFSS       STATUS, 2 
0x2858	0x0E00      	MOVLW       0
0x285A	0x6E00      	MOVWF       R0 
0x285C	0x5001      	MOVF        R1, 0 
0x285E	0x1200      	IORWF       R0, 1 
0x2860	0xE00D      	BZ          L_show_pwr339
;main.c,641 :: 		led_wr_str(0, 16 + 4 * 12, work_str_2, 4); // 128*64 OLED
0x2862	0x0103      	MOVLB       3
0x2864	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x2866	0x0E40      	MOVLW       64
0x2868	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x286A	0x0EE0      	MOVLW       _work_str_2
0x286C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x286E	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2870	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2872	0x0E04      	MOVLW       4
0x2874	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2876	0xF007EC7F  	CALL        _led_wr_str, 0
0x287A	0xD010      	BRA         L_show_pwr340
L_show_pwr339:
;main.c,642 :: 		else if (type != 0)
0x287C	0x0102      	MOVLB       2
0x287E	0x51D7      	MOVF        _type, 0, 1
0x2880	0x0A00      	XORLW       0
0x2882	0xE00C      	BZ          L_show_pwr341
;main.c,643 :: 		led_wr_str(0, 4, work_str_2, 4); // 1602  & 128*32
0x2884	0x0103      	MOVLB       3
0x2886	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x2888	0x0E04      	MOVLW       4
0x288A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x288C	0x0EE0      	MOVLW       _work_str_2
0x288E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2890	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2892	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2894	0x0E04      	MOVLW       4
0x2896	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2898	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr341:
L_show_pwr340:
;main.c,645 :: 		asm CLRWDT;
0x289C	0x0004      	CLRWDT
;main.c,647 :: 		if (Loss_mode == 1) {
0x289E	0x0102      	MOVLB       2
0x28A0	0x5174      	MOVF        _Loss_mode, 0, 1
0x28A2	0x0A01      	XORLW       1
0x28A4	0xA4D8      	BTFSS       STATUS, 2 
0x28A6	0xD2E3      	BRA         L_show_pwr342
;main.c,648 :: 		if (ind == 0 & cap == 0)
0x28A8	0x5175      	MOVF        main_ind, 0, 1
0x28AA	0x0A00      	XORLW       0
0x28AC	0x0E01      	MOVLW       1
0x28AE	0xA4D8      	BTFSS       STATUS, 2 
0x28B0	0x0E00      	MOVLW       0
0x28B2	0x6E01      	MOVWF       R1 
0x28B4	0x515D      	MOVF        main_cap, 0, 1
0x28B6	0x0A00      	XORLW       0
0x28B8	0x0E01      	MOVLW       1
0x28BA	0xA4D8      	BTFSS       STATUS, 2 
0x28BC	0x0E00      	MOVLW       0
0x28BE	0x6E00      	MOVWF       R0 
0x28C0	0x5001      	MOVF        R1, 0 
0x28C2	0x1600      	ANDWF       R0, 1 
0x28C4	0xE004      	BZ          L_show_pwr343
;main.c,649 :: 		swr_a = SWR;
0x28C6	0xF2D3C343  	MOVFF       FARG_show_pwr_SWR, _swr_a
0x28CA	0xF2D4C344  	MOVFF       FARG_show_pwr_SWR+1, _swr_a+1
L_show_pwr343:
;main.c,650 :: 		a = 1.0 / ((swr_a / 100.0 + 100.0 / swr_a) * Fid_loss / 10.0 * 0.115 + 1.0); // Fider loss
0x28CE	0xF000C2D3  	MOVFF       _swr_a, R0
0x28D2	0xF001C2D4  	MOVFF       _swr_a+1, R1
0x28D6	0xF005ECEB  	CALL        _int2double, 0
0x28DA	0xF357C000  	MOVFF       R0, FLOC__show_pwr+4
0x28DE	0xF358C001  	MOVFF       R1, FLOC__show_pwr+5
0x28E2	0xF359C002  	MOVFF       R2, FLOC__show_pwr+6
0x28E6	0xF35AC003  	MOVFF       R3, FLOC__show_pwr+7
0x28EA	0x0E00      	MOVLW       0
0x28EC	0x6E04      	MOVWF       R4 
0x28EE	0x0E00      	MOVLW       0
0x28F0	0x6E05      	MOVWF       R5 
0x28F2	0x0E48      	MOVLW       72
0x28F4	0x6E06      	MOVWF       R6 
0x28F6	0x0E85      	MOVLW       133
0x28F8	0x6E07      	MOVWF       R7 
0x28FA	0xF000C357  	MOVFF       FLOC__show_pwr+4, R0
0x28FE	0xF001C358  	MOVFF       FLOC__show_pwr+5, R1
0x2902	0xF002C359  	MOVFF       FLOC__show_pwr+6, R2
0x2906	0xF003C35A  	MOVFF       FLOC__show_pwr+7, R3
0x290A	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x290E	0xF353C000  	MOVFF       R0, FLOC__show_pwr
0x2912	0xF354C001  	MOVFF       R1, FLOC__show_pwr+1
0x2916	0xF355C002  	MOVFF       R2, FLOC__show_pwr+2
0x291A	0xF356C003  	MOVFF       R3, FLOC__show_pwr+3
0x291E	0xF004C357  	MOVFF       FLOC__show_pwr+4, R4
0x2922	0xF005C358  	MOVFF       FLOC__show_pwr+5, R5
0x2926	0xF006C359  	MOVFF       FLOC__show_pwr+6, R6
0x292A	0xF007C35A  	MOVFF       FLOC__show_pwr+7, R7
0x292E	0x0E00      	MOVLW       0
0x2930	0x6E00      	MOVWF       R0 
0x2932	0x0E00      	MOVLW       0
0x2934	0x6E01      	MOVWF       R1 
0x2936	0x0E48      	MOVLW       72
0x2938	0x6E02      	MOVWF       R2 
0x293A	0x0E85      	MOVLW       133
0x293C	0x6E03      	MOVWF       R3 
0x293E	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x2942	0xF004C353  	MOVFF       FLOC__show_pwr, R4
0x2946	0xF005C354  	MOVFF       FLOC__show_pwr+1, R5
0x294A	0xF006C355  	MOVFF       FLOC__show_pwr+2, R6
0x294E	0xF007C356  	MOVFF       FLOC__show_pwr+3, R7
0x2952	0xF00BEC7F  	CALL        _Add_32x32_FP, 0
0x2956	0xF353C000  	MOVFF       R0, FLOC__show_pwr
0x295A	0xF354C001  	MOVFF       R1, FLOC__show_pwr+1
0x295E	0xF355C002  	MOVFF       R2, FLOC__show_pwr+2
0x2962	0xF356C003  	MOVFF       R3, FLOC__show_pwr+3
0x2966	0xF000C2B9  	MOVFF       _Fid_loss, R0
0x296A	0xF00EEC63  	CALL        _byte2double, 0
0x296E	0xF004C353  	MOVFF       FLOC__show_pwr, R4
0x2972	0xF005C354  	MOVFF       FLOC__show_pwr+1, R5
0x2976	0xF006C355  	MOVFF       FLOC__show_pwr+2, R6
0x297A	0xF007C356  	MOVFF       FLOC__show_pwr+3, R7
0x297E	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2982	0x0E00      	MOVLW       0
0x2984	0x6E04      	MOVWF       R4 
0x2986	0x0E00      	MOVLW       0
0x2988	0x6E05      	MOVWF       R5 
0x298A	0x0E20      	MOVLW       32
0x298C	0x6E06      	MOVWF       R6 
0x298E	0x0E82      	MOVLW       130
0x2990	0x6E07      	MOVWF       R7 
0x2992	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x2996	0x0E1F      	MOVLW       31
0x2998	0x6E04      	MOVWF       R4 
0x299A	0x0E85      	MOVLW       133
0x299C	0x6E05      	MOVWF       R5 
0x299E	0x0E6B      	MOVLW       107
0x29A0	0x6E06      	MOVWF       R6 
0x29A2	0x0E7B      	MOVLW       123
0x29A4	0x6E07      	MOVWF       R7 
0x29A6	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x29AA	0x0E00      	MOVLW       0
0x29AC	0x6E04      	MOVWF       R4 
0x29AE	0x0E00      	MOVLW       0
0x29B0	0x6E05      	MOVWF       R5 
0x29B2	0x0E00      	MOVLW       0
0x29B4	0x6E06      	MOVWF       R6 
0x29B6	0x0E7F      	MOVLW       127
0x29B8	0x6E07      	MOVWF       R7 
0x29BA	0xF00BEC7F  	CALL        _Add_32x32_FP, 0
0x29BE	0xF004C000  	MOVFF       R0, R4
0x29C2	0xF005C001  	MOVFF       R1, R5
0x29C6	0xF006C002  	MOVFF       R2, R6
0x29CA	0xF007C003  	MOVFF       R3, R7
0x29CE	0x0E00      	MOVLW       0
0x29D0	0x6E00      	MOVWF       R0 
0x29D2	0x0E00      	MOVLW       0
0x29D4	0x6E01      	MOVWF       R1 
0x29D6	0x0E00      	MOVLW       0
0x29D8	0x6E02      	MOVWF       R2 
0x29DA	0x0E7F      	MOVLW       127
0x29DC	0x6E03      	MOVWF       R3 
0x29DE	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x29E2	0xF35BC000  	MOVFF       R0, FLOC__show_pwr+8
0x29E6	0xF35CC001  	MOVFF       R1, FLOC__show_pwr+9
0x29EA	0xF35DC002  	MOVFF       R2, FLOC__show_pwr+10
0x29EE	0xF35EC003  	MOVFF       R3, FLOC__show_pwr+11
0x29F2	0xF345C35B  	MOVFF       FLOC__show_pwr+8, show_pwr_a_L0
0x29F6	0xF346C35C  	MOVFF       FLOC__show_pwr+9, show_pwr_a_L0+1
0x29FA	0xF347C35D  	MOVFF       FLOC__show_pwr+10, show_pwr_a_L0+2
0x29FE	0xF348C35E  	MOVFF       FLOC__show_pwr+11, show_pwr_a_L0+3
;main.c,651 :: 		b = 4.0 / (2.0 + SWR / 100.0 + 100.0 / SWR); // SWR loss
0x2A02	0xF000C343  	MOVFF       FARG_show_pwr_SWR, R0
0x2A06	0xF001C344  	MOVFF       FARG_show_pwr_SWR+1, R1
0x2A0A	0xF005ECEB  	CALL        _int2double, 0
0x2A0E	0xF357C000  	MOVFF       R0, FLOC__show_pwr+4
0x2A12	0xF358C001  	MOVFF       R1, FLOC__show_pwr+5
0x2A16	0xF359C002  	MOVFF       R2, FLOC__show_pwr+6
0x2A1A	0xF35AC003  	MOVFF       R3, FLOC__show_pwr+7
0x2A1E	0x0E00      	MOVLW       0
0x2A20	0x6E04      	MOVWF       R4 
0x2A22	0x0E00      	MOVLW       0
0x2A24	0x6E05      	MOVWF       R5 
0x2A26	0x0E48      	MOVLW       72
0x2A28	0x6E06      	MOVWF       R6 
0x2A2A	0x0E85      	MOVLW       133
0x2A2C	0x6E07      	MOVWF       R7 
0x2A2E	0xF000C357  	MOVFF       FLOC__show_pwr+4, R0
0x2A32	0xF001C358  	MOVFF       FLOC__show_pwr+5, R1
0x2A36	0xF002C359  	MOVFF       FLOC__show_pwr+6, R2
0x2A3A	0xF003C35A  	MOVFF       FLOC__show_pwr+7, R3
0x2A3E	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x2A42	0x0E00      	MOVLW       0
0x2A44	0x6E04      	MOVWF       R4 
0x2A46	0x0E00      	MOVLW       0
0x2A48	0x6E05      	MOVWF       R5 
0x2A4A	0x0E00      	MOVLW       0
0x2A4C	0x6E06      	MOVWF       R6 
0x2A4E	0x0E80      	MOVLW       128
0x2A50	0x6E07      	MOVWF       R7 
0x2A52	0xF00BEC7F  	CALL        _Add_32x32_FP, 0
0x2A56	0xF353C000  	MOVFF       R0, FLOC__show_pwr
0x2A5A	0xF354C001  	MOVFF       R1, FLOC__show_pwr+1
0x2A5E	0xF355C002  	MOVFF       R2, FLOC__show_pwr+2
0x2A62	0xF356C003  	MOVFF       R3, FLOC__show_pwr+3
0x2A66	0xF004C357  	MOVFF       FLOC__show_pwr+4, R4
0x2A6A	0xF005C358  	MOVFF       FLOC__show_pwr+5, R5
0x2A6E	0xF006C359  	MOVFF       FLOC__show_pwr+6, R6
0x2A72	0xF007C35A  	MOVFF       FLOC__show_pwr+7, R7
0x2A76	0x0E00      	MOVLW       0
0x2A78	0x6E00      	MOVWF       R0 
0x2A7A	0x0E00      	MOVLW       0
0x2A7C	0x6E01      	MOVWF       R1 
0x2A7E	0x0E48      	MOVLW       72
0x2A80	0x6E02      	MOVWF       R2 
0x2A82	0x0E85      	MOVLW       133
0x2A84	0x6E03      	MOVWF       R3 
0x2A86	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x2A8A	0xF004C353  	MOVFF       FLOC__show_pwr, R4
0x2A8E	0xF005C354  	MOVFF       FLOC__show_pwr+1, R5
0x2A92	0xF006C355  	MOVFF       FLOC__show_pwr+2, R6
0x2A96	0xF007C356  	MOVFF       FLOC__show_pwr+3, R7
0x2A9A	0xF00BEC7F  	CALL        _Add_32x32_FP, 0
0x2A9E	0xF004C000  	MOVFF       R0, R4
0x2AA2	0xF005C001  	MOVFF       R1, R5
0x2AA6	0xF006C002  	MOVFF       R2, R6
0x2AAA	0xF007C003  	MOVFF       R3, R7
0x2AAE	0x0E00      	MOVLW       0
0x2AB0	0x6E00      	MOVWF       R0 
0x2AB2	0x0E00      	MOVLW       0
0x2AB4	0x6E01      	MOVWF       R1 
0x2AB6	0x0E00      	MOVLW       0
0x2AB8	0x6E02      	MOVWF       R2 
0x2ABA	0x0E81      	MOVLW       129
0x2ABC	0x6E03      	MOVWF       R3 
0x2ABE	0xF00EEC72  	CALL        _Div_32x32_FP, 0
0x2AC2	0xF349C000  	MOVFF       R0, show_pwr_b_L0
0x2AC6	0xF34AC001  	MOVFF       R1, show_pwr_b_L0+1
0x2ACA	0xF34BC002  	MOVFF       R2, show_pwr_b_L0+2
0x2ACE	0xF34CC003  	MOVFF       R3, show_pwr_b_L0+3
;main.c,652 :: 		if (a >= 1.0)
0x2AD2	0x0E00      	MOVLW       0
0x2AD4	0x6E04      	MOVWF       R4 
0x2AD6	0x0E00      	MOVLW       0
0x2AD8	0x6E05      	MOVWF       R5 
0x2ADA	0x0E00      	MOVLW       0
0x2ADC	0x6E06      	MOVWF       R6 
0x2ADE	0x0E7F      	MOVLW       127
0x2AE0	0x6E07      	MOVWF       R7 
0x2AE2	0xF000C35B  	MOVFF       FLOC__show_pwr+8, R0
0x2AE6	0xF001C35C  	MOVFF       FLOC__show_pwr+9, R1
0x2AEA	0xF002C35D  	MOVFF       FLOC__show_pwr+10, R2
0x2AEE	0xF003C35E  	MOVFF       FLOC__show_pwr+11, R3
0x2AF2	0xF00AECD9  	CALL        _Compare_Double, 0
0x2AF6	0x0E00      	MOVLW       0
0x2AF8	0xB0D8      	BTFSC       STATUS, 0 
0x2AFA	0x0E01      	MOVLW       1
0x2AFC	0x6E00      	MOVWF       R0 
0x2AFE	0x5200      	MOVF        R0, 1 
0x2B00	0xE009      	BZ          L_show_pwr344
;main.c,653 :: 		a = 1.0;
0x2B02	0x0E00      	MOVLW       0
0x2B04	0x0103      	MOVLB       3
0x2B06	0x6F45      	MOVWF       show_pwr_a_L0, 1
0x2B08	0x0E00      	MOVLW       0
0x2B0A	0x6F46      	MOVWF       show_pwr_a_L0+1, 1
0x2B0C	0x0E00      	MOVLW       0
0x2B0E	0x6F47      	MOVWF       show_pwr_a_L0+2, 1
0x2B10	0x0E7F      	MOVLW       127
0x2B12	0x6F48      	MOVWF       show_pwr_a_L0+3, 1
L_show_pwr344:
;main.c,654 :: 		if (b >= 1.0)
0x2B14	0x0E00      	MOVLW       0
0x2B16	0x6E04      	MOVWF       R4 
0x2B18	0x0E00      	MOVLW       0
0x2B1A	0x6E05      	MOVWF       R5 
0x2B1C	0x0E00      	MOVLW       0
0x2B1E	0x6E06      	MOVWF       R6 
0x2B20	0x0E7F      	MOVLW       127
0x2B22	0x6E07      	MOVWF       R7 
0x2B24	0xF000C349  	MOVFF       show_pwr_b_L0, R0
0x2B28	0xF001C34A  	MOVFF       show_pwr_b_L0+1, R1
0x2B2C	0xF002C34B  	MOVFF       show_pwr_b_L0+2, R2
0x2B30	0xF003C34C  	MOVFF       show_pwr_b_L0+3, R3
0x2B34	0xF00AECD9  	CALL        _Compare_Double, 0
0x2B38	0x0E00      	MOVLW       0
0x2B3A	0xB0D8      	BTFSC       STATUS, 0 
0x2B3C	0x0E01      	MOVLW       1
0x2B3E	0x6E00      	MOVWF       R0 
0x2B40	0x5200      	MOVF        R0, 1 
0x2B42	0xE009      	BZ          L_show_pwr345
;main.c,655 :: 		b = 1.0;
0x2B44	0x0103      	MOVLB       3
0x2B46	0x0E00      	MOVLW       0
0x2B48	0x6F49      	MOVWF       show_pwr_b_L0, 1
0x2B4A	0x0E00      	MOVLW       0
0x2B4C	0x6F4A      	MOVWF       show_pwr_b_L0+1, 1
0x2B4E	0x0E00      	MOVLW       0
0x2B50	0x6F4B      	MOVWF       show_pwr_b_L0+2, 1
0x2B52	0x0E7F      	MOVLW       127
0x2B54	0x6F4C      	MOVWF       show_pwr_b_L0+3, 1
L_show_pwr345:
;main.c,656 :: 		p_ant = Power * a * b;
0x2B56	0xF000C341  	MOVFF       FARG_show_pwr_Power, R0
0x2B5A	0xF001C342  	MOVFF       FARG_show_pwr_Power+1, R1
0x2B5E	0xF005ECEB  	CALL        _int2double, 0
0x2B62	0xF004C345  	MOVFF       show_pwr_a_L0, R4
0x2B66	0xF005C346  	MOVFF       show_pwr_a_L0+1, R5
0x2B6A	0xF006C347  	MOVFF       show_pwr_a_L0+2, R6
0x2B6E	0xF007C348  	MOVFF       show_pwr_a_L0+3, R7
0x2B72	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2B76	0xF004C349  	MOVFF       show_pwr_b_L0, R4
0x2B7A	0xF005C34A  	MOVFF       show_pwr_b_L0+1, R5
0x2B7E	0xF006C34B  	MOVFF       show_pwr_b_L0+2, R6
0x2B82	0xF007C34C  	MOVFF       show_pwr_b_L0+3, R7
0x2B86	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2B8A	0xF006EC9E  	CALL        _double2int, 0
0x2B8E	0xF34DC000  	MOVFF       R0, show_pwr_p_ant_L0
0x2B92	0xF34EC001  	MOVFF       R1, show_pwr_p_ant_L0+1
;main.c,657 :: 		eff = a * b * 100;
0x2B96	0xF000C345  	MOVFF       show_pwr_a_L0, R0
0x2B9A	0xF001C346  	MOVFF       show_pwr_a_L0+1, R1
0x2B9E	0xF002C347  	MOVFF       show_pwr_a_L0+2, R2
0x2BA2	0xF003C348  	MOVFF       show_pwr_a_L0+3, R3
0x2BA6	0xF004C349  	MOVFF       show_pwr_b_L0, R4
0x2BAA	0xF005C34A  	MOVFF       show_pwr_b_L0+1, R5
0x2BAE	0xF006C34B  	MOVFF       show_pwr_b_L0+2, R6
0x2BB2	0xF007C34C  	MOVFF       show_pwr_b_L0+3, R7
0x2BB6	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2BBA	0x0E00      	MOVLW       0
0x2BBC	0x6E04      	MOVWF       R4 
0x2BBE	0x0E00      	MOVLW       0
0x2BC0	0x6E05      	MOVWF       R5 
0x2BC2	0x0E48      	MOVLW       72
0x2BC4	0x6E06      	MOVWF       R6 
0x2BC6	0x0E85      	MOVLW       133
0x2BC8	0x6E07      	MOVWF       R7 
0x2BCA	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x2BCE	0xF34FC000  	MOVFF       R0, show_pwr_eff_L0
0x2BD2	0xF350C001  	MOVFF       R1, show_pwr_eff_L0+1
0x2BD6	0xF351C002  	MOVFF       R2, show_pwr_eff_L0+2
0x2BDA	0xF352C003  	MOVFF       R3, show_pwr_eff_L0+3
;main.c,658 :: 		if (eff >= 100)
0x2BDE	0x0E00      	MOVLW       0
0x2BE0	0x6E04      	MOVWF       R4 
0x2BE2	0x0E00      	MOVLW       0
0x2BE4	0x6E05      	MOVWF       R5 
0x2BE6	0x0E48      	MOVLW       72
0x2BE8	0x6E06      	MOVWF       R6 
0x2BEA	0x0E85      	MOVLW       133
0x2BEC	0x6E07      	MOVWF       R7 
0x2BEE	0xF00AECD9  	CALL        _Compare_Double, 0
0x2BF2	0x0E00      	MOVLW       0
0x2BF4	0xB0D8      	BTFSC       STATUS, 0 
0x2BF6	0x0E01      	MOVLW       1
0x2BF8	0x6E00      	MOVWF       R0 
0x2BFA	0x5200      	MOVF        R0, 1 
0x2BFC	0xE009      	BZ          L_show_pwr346
;main.c,659 :: 		eff = 99;
0x2BFE	0x0103      	MOVLB       3
0x2C00	0x0E00      	MOVLW       0
0x2C02	0x6F4F      	MOVWF       show_pwr_eff_L0, 1
0x2C04	0x0E00      	MOVLW       0
0x2C06	0x6F50      	MOVWF       show_pwr_eff_L0+1, 1
0x2C08	0x0E46      	MOVLW       70
0x2C0A	0x6F51      	MOVWF       show_pwr_eff_L0+2, 1
0x2C0C	0x0E85      	MOVLW       133
0x2C0E	0x6F52      	MOVWF       show_pwr_eff_L0+3, 1
L_show_pwr346:
;main.c,661 :: 		if (P_High == 0) {
0x2C10	0x504E      	MOVF        main_P_High, 0 
0x2C12	0x0A00      	XORLW       0
0x2C14	0xE149      	BNZ         L_show_pwr347
;main.c,662 :: 		if (p_ant >= 100) { // > 10 W
0x2C16	0x0103      	MOVLB       3
0x2C18	0x0E80      	MOVLW       128
0x2C1A	0x194E      	XORWF       show_pwr_p_ant_L0+1, 0, 1
0x2C1C	0x6E00      	MOVWF       R0 
0x2C1E	0x0E80      	MOVLW       128
0x2C20	0x5C00      	SUBWF       R0, 0 
0x2C22	0xE102      	BNZ         L__show_pwr636
0x2C24	0x0E64      	MOVLW       100
0x2C26	0x5D4D      	SUBWF       show_pwr_p_ant_L0, 0, 1
L__show_pwr636:
0x2C28	0xE31E      	BNC         L_show_pwr348
;main.c,663 :: 		p_ant += 5; // rounding to 1 W
0x2C2A	0x0E05      	MOVLW       5
0x2C2C	0x254D      	ADDWF       show_pwr_p_ant_L0, 0, 1
0x2C2E	0x6E00      	MOVWF       R0 
0x2C30	0x0E00      	MOVLW       0
0x2C32	0x214E      	ADDWFC      show_pwr_p_ant_L0+1, 0, 1
0x2C34	0x6E01      	MOVWF       R1 
0x2C36	0xF34DC000  	MOVFF       R0, show_pwr_p_ant_L0
0x2C3A	0xF34EC001  	MOVFF       R1, show_pwr_p_ant_L0+1
;main.c,664 :: 		IntToStr(p_ant, work_str);
0x2C3E	0xF366C000  	MOVFF       R0, FARG_IntToStr_input
0x2C42	0xF367C001  	MOVFF       R1, FARG_IntToStr_input+1
0x2C46	0x0EE7      	MOVLW       _work_str
0x2C48	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2C4A	0x0E02      	MOVLW       hi_addr(_work_str)
0x2C4C	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2C4E	0xF007EC11  	CALL        _IntToStr, 0
;main.c,665 :: 		work_str_2[0] = work_str[2];
0x2C52	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
;main.c,666 :: 		work_str_2[1] = work_str[3];
0x2C56	0xF2E1C2EA  	MOVFF       _work_str+3, _work_str_2+1
;main.c,667 :: 		work_str_2[2] = work_str[4];
0x2C5A	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,668 :: 		work_str_2[3] = 'W';
0x2C5E	0x0E57      	MOVLW       87
0x2C60	0x0102      	MOVLB       2
0x2C62	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,669 :: 		} else {
0x2C64	0xD020      	BRA         L_show_pwr349
L_show_pwr348:
;main.c,670 :: 		IntToStr(p_ant, work_str);
0x2C66	0xF366C34D  	MOVFF       show_pwr_p_ant_L0, FARG_IntToStr_input
0x2C6A	0xF367C34E  	MOVFF       show_pwr_p_ant_L0+1, FARG_IntToStr_input+1
0x2C6E	0x0EE7      	MOVLW       _work_str
0x2C70	0x0103      	MOVLB       3
0x2C72	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2C74	0x0E02      	MOVLW       hi_addr(_work_str)
0x2C76	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2C78	0xF007EC11  	CALL        _IntToStr, 0
;main.c,671 :: 		if (work_str[4] != ' ')
0x2C7C	0x0102      	MOVLB       2
0x2C7E	0x51EB      	MOVF        _work_str+4, 0, 1
0x2C80	0x0A20      	XORLW       32
0x2C82	0xE003      	BZ          L_show_pwr350
;main.c,672 :: 		work_str_2[0] = work_str[4];
0x2C84	0xF2E0C2EB  	MOVFF       _work_str+4, _work_str_2
0x2C88	0xD002      	BRA         L_show_pwr351
L_show_pwr350:
;main.c,674 :: 		work_str_2[0] = '0';
0x2C8A	0x0E30      	MOVLW       48
0x2C8C	0x6FE0      	MOVWF       _work_str_2, 1
L_show_pwr351:
;main.c,675 :: 		work_str_2[1] = '.';
0x2C8E	0x0E2E      	MOVLW       46
0x2C90	0x6FE1      	MOVWF       _work_str_2+1, 1
;main.c,676 :: 		if (work_str[5] != ' ')
0x2C92	0x51EC      	MOVF        _work_str+5, 0, 1
0x2C94	0x0A20      	XORLW       32
0x2C96	0xE003      	BZ          L_show_pwr352
;main.c,677 :: 		work_str_2[2] = work_str[5];
0x2C98	0xF2E2C2EC  	MOVFF       _work_str+5, _work_str_2+2
0x2C9C	0xD002      	BRA         L_show_pwr353
L_show_pwr352:
;main.c,679 :: 		work_str_2[2] = '0';
0x2C9E	0x0E30      	MOVLW       48
0x2CA0	0x6FE2      	MOVWF       _work_str_2+2, 1
L_show_pwr353:
;main.c,680 :: 		work_str_2[3] = 'W';
0x2CA2	0x0E57      	MOVLW       87
0x2CA4	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,681 :: 		}
L_show_pwr349:
;main.c,682 :: 		} else { // High Power
0x2CA6	0xD032      	BRA         L_show_pwr354
L_show_pwr347:
;main.c,683 :: 		if (p_ant < 999) { // 0 - 1500 Watts
0x2CA8	0x0E80      	MOVLW       128
0x2CAA	0x0103      	MOVLB       3
0x2CAC	0x194E      	XORWF       show_pwr_p_ant_L0+1, 0, 1
0x2CAE	0x6E00      	MOVWF       R0 
0x2CB0	0x0E80      	MOVLW       128
0x2CB2	0x0A03      	XORLW       3
0x2CB4	0x5C00      	SUBWF       R0, 0 
0x2CB6	0xE102      	BNZ         L__show_pwr637
0x2CB8	0x0EE7      	MOVLW       231
0x2CBA	0x5D4D      	SUBWF       show_pwr_p_ant_L0, 0, 1
L__show_pwr637:
0x2CBC	0xE214      	BC          L_show_pwr355
;main.c,684 :: 		IntToStr(p_ant, work_str);
0x2CBE	0xF366C34D  	MOVFF       show_pwr_p_ant_L0, FARG_IntToStr_input
0x2CC2	0xF367C34E  	MOVFF       show_pwr_p_ant_L0+1, FARG_IntToStr_input+1
0x2CC6	0x0EE7      	MOVLW       _work_str
0x2CC8	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2CCA	0x0E02      	MOVLW       hi_addr(_work_str)
0x2CCC	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2CCE	0xF007EC11  	CALL        _IntToStr, 0
;main.c,685 :: 		work_str_2[0] = work_str[3];
0x2CD2	0xF2E0C2EA  	MOVFF       _work_str+3, _work_str_2
;main.c,686 :: 		work_str_2[1] = work_str[4];
0x2CD6	0xF2E1C2EB  	MOVFF       _work_str+4, _work_str_2+1
;main.c,687 :: 		work_str_2[2] = work_str[5];
0x2CDA	0xF2E2C2EC  	MOVFF       _work_str+5, _work_str_2+2
;main.c,688 :: 		work_str_2[3] = 'W';
0x2CDE	0x0E57      	MOVLW       87
0x2CE0	0x0102      	MOVLB       2
0x2CE2	0x6FE3      	MOVWF       _work_str_2+3, 1
;main.c,689 :: 		} else {
0x2CE4	0xD013      	BRA         L_show_pwr356
L_show_pwr355:
;main.c,690 :: 		IntToStr(p_ant, work_str);
0x2CE6	0xF366C34D  	MOVFF       show_pwr_p_ant_L0, FARG_IntToStr_input
0x2CEA	0xF367C34E  	MOVFF       show_pwr_p_ant_L0+1, FARG_IntToStr_input+1
0x2CEE	0x0EE7      	MOVLW       _work_str
0x2CF0	0x0103      	MOVLB       3
0x2CF2	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2CF4	0x0E02      	MOVLW       hi_addr(_work_str)
0x2CF6	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2CF8	0xF007EC11  	CALL        _IntToStr, 0
;main.c,691 :: 		work_str_2[0] = work_str[2];
0x2CFC	0xF2E0C2E9  	MOVFF       _work_str+2, _work_str_2
;main.c,692 :: 		work_str_2[1] = work_str[3];
0x2D00	0xF2E1C2EA  	MOVFF       _work_str+3, _work_str_2+1
;main.c,693 :: 		work_str_2[2] = work_str[4];
0x2D04	0xF2E2C2EB  	MOVFF       _work_str+4, _work_str_2+2
;main.c,694 :: 		work_str_2[3] = work_str[5];
0x2D08	0xF2E3C2EC  	MOVFF       _work_str+5, _work_str_2+3
;main.c,695 :: 		}
L_show_pwr356:
;main.c,696 :: 		}
L_show_pwr354:
;main.c,697 :: 		if (type == 4 | type == 5)
0x2D0C	0x0102      	MOVLB       2
0x2D0E	0x51D7      	MOVF        _type, 0, 1
0x2D10	0x0A04      	XORLW       4
0x2D12	0x0E01      	MOVLW       1
0x2D14	0xA4D8      	BTFSS       STATUS, 2 
0x2D16	0x0E00      	MOVLW       0
0x2D18	0x6E01      	MOVWF       R1 
0x2D1A	0x51D7      	MOVF        _type, 0, 1
0x2D1C	0x0A05      	XORLW       5
0x2D1E	0x0E01      	MOVLW       1
0x2D20	0xA4D8      	BTFSS       STATUS, 2 
0x2D22	0x0E00      	MOVLW       0
0x2D24	0x6E00      	MOVWF       R0 
0x2D26	0x5001      	MOVF        R1, 0 
0x2D28	0x1200      	IORWF       R0, 1 
0x2D2A	0xE00E      	BZ          L_show_pwr357
;main.c,698 :: 		led_wr_str(4, 16 + 4 * 12, work_str_2, 4); // 128*64 OLED
0x2D2C	0x0E04      	MOVLW       4
0x2D2E	0x0103      	MOVLB       3
0x2D30	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2D32	0x0E40      	MOVLW       64
0x2D34	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2D36	0x0EE0      	MOVLW       _work_str_2
0x2D38	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2D3A	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2D3C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2D3E	0x0E04      	MOVLW       4
0x2D40	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2D42	0xF007EC7F  	CALL        _led_wr_str, 0
0x2D46	0xD02D      	BRA         L_show_pwr358
L_show_pwr357:
;main.c,699 :: 		else if (type == 2 | type == 3)
0x2D48	0x0102      	MOVLB       2
0x2D4A	0x51D7      	MOVF        _type, 0, 1
0x2D4C	0x0A02      	XORLW       2
0x2D4E	0x0E01      	MOVLW       1
0x2D50	0xA4D8      	BTFSS       STATUS, 2 
0x2D52	0x0E00      	MOVLW       0
0x2D54	0x6E01      	MOVWF       R1 
0x2D56	0x51D7      	MOVF        _type, 0, 1
0x2D58	0x0A03      	XORLW       3
0x2D5A	0x0E01      	MOVLW       1
0x2D5C	0xA4D8      	BTFSS       STATUS, 2 
0x2D5E	0x0E00      	MOVLW       0
0x2D60	0x6E00      	MOVWF       R0 
0x2D62	0x5001      	MOVF        R1, 0 
0x2D64	0x1200      	IORWF       R0, 1 
0x2D66	0xE00D      	BZ          L_show_pwr359
;main.c,700 :: 		led_wr_str(0, 13, work_str_2, 4); // 128*32
0x2D68	0x0103      	MOVLB       3
0x2D6A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x2D6C	0x0E0D      	MOVLW       13
0x2D6E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2D70	0x0EE0      	MOVLW       _work_str_2
0x2D72	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2D74	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2D76	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2D78	0x0E04      	MOVLW       4
0x2D7A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2D7C	0xF007EC7F  	CALL        _led_wr_str, 0
0x2D80	0xD010      	BRA         L_show_pwr360
L_show_pwr359:
;main.c,701 :: 		else if (type == 1)
0x2D82	0x0102      	MOVLB       2
0x2D84	0x51D7      	MOVF        _type, 0, 1
0x2D86	0x0A01      	XORLW       1
0x2D88	0xE10C      	BNZ         L_show_pwr361
;main.c,702 :: 		led_wr_str(0, 12, work_str_2, 4); // 1602
0x2D8A	0x0103      	MOVLB       3
0x2D8C	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x2D8E	0x0E0C      	MOVLW       12
0x2D90	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2D92	0x0EE0      	MOVLW       _work_str_2
0x2D94	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2D96	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2D98	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2D9A	0x0E04      	MOVLW       4
0x2D9C	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2D9E	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr361:
L_show_pwr360:
L_show_pwr358:
;main.c,704 :: 		IntToStr(eff, work_str);
0x2DA2	0xF000C34F  	MOVFF       show_pwr_eff_L0, R0
0x2DA6	0xF001C350  	MOVFF       show_pwr_eff_L0+1, R1
0x2DAA	0xF002C351  	MOVFF       show_pwr_eff_L0+2, R2
0x2DAE	0xF003C352  	MOVFF       show_pwr_eff_L0+3, R3
0x2DB2	0xF006EC9E  	CALL        _double2int, 0
0x2DB6	0xF366C000  	MOVFF       R0, FARG_IntToStr_input
0x2DBA	0xF367C001  	MOVFF       R1, FARG_IntToStr_input+1
0x2DBE	0x0EE7      	MOVLW       _work_str
0x2DC0	0x0103      	MOVLB       3
0x2DC2	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x2DC4	0x0E02      	MOVLW       hi_addr(_work_str)
0x2DC6	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x2DC8	0xF007EC11  	CALL        _IntToStr, 0
;main.c,705 :: 		work_str_2[0] = work_str[4];
0x2DCC	0xF2E0C2EB  	MOVFF       _work_str+4, _work_str_2
;main.c,706 :: 		work_str_2[1] = work_str[5];
0x2DD0	0xF2E1C2EC  	MOVFF       _work_str+5, _work_str_2+1
;main.c,707 :: 		if (type == 4 | type == 5)
0x2DD4	0x0102      	MOVLB       2
0x2DD6	0x51D7      	MOVF        _type, 0, 1
0x2DD8	0x0A04      	XORLW       4
0x2DDA	0x0E01      	MOVLW       1
0x2DDC	0xA4D8      	BTFSS       STATUS, 2 
0x2DDE	0x0E00      	MOVLW       0
0x2DE0	0x6E01      	MOVWF       R1 
0x2DE2	0x51D7      	MOVF        _type, 0, 1
0x2DE4	0x0A05      	XORLW       5
0x2DE6	0x0E01      	MOVLW       1
0x2DE8	0xA4D8      	BTFSS       STATUS, 2 
0x2DEA	0x0E00      	MOVLW       0
0x2DEC	0x6E00      	MOVWF       R0 
0x2DEE	0x5001      	MOVF        R1, 0 
0x2DF0	0x1200      	IORWF       R0, 1 
0x2DF2	0xE00E      	BZ          L_show_pwr362
;main.c,708 :: 		led_wr_str(6, 16 + 5 * 12, work_str_2, 2);
0x2DF4	0x0E06      	MOVLW       6
0x2DF6	0x0103      	MOVLB       3
0x2DF8	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2DFA	0x0E4C      	MOVLW       76
0x2DFC	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2DFE	0x0EE0      	MOVLW       _work_str_2
0x2E00	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2E02	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2E04	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2E06	0x0E02      	MOVLW       2
0x2E08	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2E0A	0xF007EC7F  	CALL        _led_wr_str, 0
0x2E0E	0xD02F      	BRA         L_show_pwr363
L_show_pwr362:
;main.c,709 :: 		else if (type == 2 | type == 3)
0x2E10	0x0102      	MOVLB       2
0x2E12	0x51D7      	MOVF        _type, 0, 1
0x2E14	0x0A02      	XORLW       2
0x2E16	0x0E01      	MOVLW       1
0x2E18	0xA4D8      	BTFSS       STATUS, 2 
0x2E1A	0x0E00      	MOVLW       0
0x2E1C	0x6E01      	MOVWF       R1 
0x2E1E	0x51D7      	MOVF        _type, 0, 1
0x2E20	0x0A03      	XORLW       3
0x2E22	0x0E01      	MOVLW       1
0x2E24	0xA4D8      	BTFSS       STATUS, 2 
0x2E26	0x0E00      	MOVLW       0
0x2E28	0x6E00      	MOVWF       R0 
0x2E2A	0x5001      	MOVF        R1, 0 
0x2E2C	0x1200      	IORWF       R0, 1 
0x2E2E	0xE00E      	BZ          L_show_pwr364
;main.c,710 :: 		led_wr_str(1, 14, work_str_2, 2);
0x2E30	0x0E01      	MOVLW       1
0x2E32	0x0103      	MOVLB       3
0x2E34	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2E36	0x0E0E      	MOVLW       14
0x2E38	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2E3A	0x0EE0      	MOVLW       _work_str_2
0x2E3C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2E3E	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2E40	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2E42	0x0E02      	MOVLW       2
0x2E44	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2E46	0xF007EC7F  	CALL        _led_wr_str, 0
0x2E4A	0xD011      	BRA         L_show_pwr365
L_show_pwr364:
;main.c,711 :: 		else if (type == 1)
0x2E4C	0x0102      	MOVLB       2
0x2E4E	0x51D7      	MOVF        _type, 0, 1
0x2E50	0x0A01      	XORLW       1
0x2E52	0xE10D      	BNZ         L_show_pwr366
;main.c,712 :: 		led_wr_str(1, 13, work_str_2, 2);
0x2E54	0x0E01      	MOVLW       1
0x2E56	0x0103      	MOVLB       3
0x2E58	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x2E5A	0x0E0D      	MOVLW       13
0x2E5C	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x2E5E	0x0EE0      	MOVLW       _work_str_2
0x2E60	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x2E62	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x2E64	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x2E66	0x0E02      	MOVLW       2
0x2E68	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x2E6A	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_pwr366:
L_show_pwr365:
L_show_pwr363:
;main.c,713 :: 		}
L_show_pwr342:
;main.c,714 :: 		}
L_show_pwr328:
;main.c,715 :: 		asm CLRWDT;
0x2E6E	0x0004      	CLRWDT
;main.c,716 :: 		return;
;main.c,717 :: 		}
L_end_show_pwr:
0x2E70	0x0012      	RETURN      0
; end of _show_pwr
_set_ind:
;main.h,181 :: 		void set_ind(char Ind) { // 0 - 31
;main.h,182 :: 		if (L_invert == 0) {
0x2E72	0x0102      	MOVLB       2
0x2E74	0x515C      	MOVF        main_L_invert, 0, 1
0x2E76	0x0A00      	XORLW       0
0x2E78	0xE125      	BNZ         L_set_ind48
;main.h,183 :: 		Ind_005 = Ind.B0;
0x2E7A	0x0103      	MOVLB       3
0x2E7C	0xB141      	BTFSC       FARG_set_ind_Ind, 0, 1
0x2E7E	0xD002      	BRA         L__set_ind495
0x2E80	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
0x2E82	0xD001      	BRA         L__set_ind496
L__set_ind495:
0x2E84	0x868A      	BSF         LATB3_bit, BitPos(LATB3_bit+0) 
L__set_ind496:
;main.h,184 :: 		Ind_011 = Ind.B1;
0x2E86	0xB341      	BTFSC       FARG_set_ind_Ind, 1, 1
0x2E88	0xD002      	BRA         L__set_ind497
0x2E8A	0x9489      	BCF         LATA2_bit, BitPos(LATA2_bit+0) 
0x2E8C	0xD001      	BRA         L__set_ind498
L__set_ind497:
0x2E8E	0x8489      	BSF         LATA2_bit, BitPos(LATA2_bit+0) 
L__set_ind498:
;main.h,185 :: 		Ind_022 = Ind.B2;
0x2E90	0xB541      	BTFSC       FARG_set_ind_Ind, 2, 1
0x2E92	0xD002      	BRA         L__set_ind499
0x2E94	0x988A      	BCF         LATB4_bit, BitPos(LATB4_bit+0) 
0x2E96	0xD001      	BRA         L__set_ind500
L__set_ind499:
0x2E98	0x888A      	BSF         LATB4_bit, BitPos(LATB4_bit+0) 
L__set_ind500:
;main.h,186 :: 		Ind_045 = Ind.B3;
0x2E9A	0xB741      	BTFSC       FARG_set_ind_Ind, 3, 1
0x2E9C	0xD002      	BRA         L__set_ind501
0x2E9E	0x9689      	BCF         LATA3_bit, BitPos(LATA3_bit+0) 
0x2EA0	0xD001      	BRA         L__set_ind502
L__set_ind501:
0x2EA2	0x8689      	BSF         LATA3_bit, BitPos(LATA3_bit+0) 
L__set_ind502:
;main.h,187 :: 		Ind_1 = Ind.B4;
0x2EA4	0xB941      	BTFSC       FARG_set_ind_Ind, 4, 1
0x2EA6	0xD002      	BRA         L__set_ind503
0x2EA8	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
0x2EAA	0xD001      	BRA         L__set_ind504
L__set_ind503:
0x2EAC	0x8A8A      	BSF         LATB5_bit, BitPos(LATB5_bit+0) 
L__set_ind504:
;main.h,188 :: 		Ind_22 = Ind.B5;
0x2EAE	0xBB41      	BTFSC       FARG_set_ind_Ind, 5, 1
0x2EB0	0xD002      	BRA         L__set_ind505
0x2EB2	0x9A89      	BCF         LATA5_bit, BitPos(LATA5_bit+0) 
0x2EB4	0xD001      	BRA         L__set_ind506
L__set_ind505:
0x2EB6	0x8A89      	BSF         LATA5_bit, BitPos(LATA5_bit+0) 
L__set_ind506:
;main.h,189 :: 		Ind_45 = Ind.B6;
0x2EB8	0xBD41      	BTFSC       FARG_set_ind_Ind, 6, 1
0x2EBA	0xD002      	BRA         L__set_ind507
0x2EBC	0x9889      	BCF         LATA4_bit, BitPos(LATA4_bit+0) 
0x2EBE	0xD001      	BRA         L__set_ind508
L__set_ind507:
0x2EC0	0x8889      	BSF         LATA4_bit, BitPos(LATA4_bit+0) 
L__set_ind508:
;main.h,191 :: 		} else {
0x2EC2	0xD024      	BRA         L_set_ind49
L_set_ind48:
0x2EC4	0x0103      	MOVLB       3
;main.h,192 :: 		Ind_005 = ~Ind.B0;
0x2EC6	0xB141      	BTFSC       FARG_set_ind_Ind, 0, 1
0x2EC8	0xD002      	BRA         L__set_ind509
0x2ECA	0x868A      	BSF         LATB3_bit, BitPos(LATB3_bit+0) 
0x2ECC	0xD001      	BRA         L__set_ind510
L__set_ind509:
0x2ECE	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
L__set_ind510:
;main.h,193 :: 		Ind_011 = ~Ind.B1;
0x2ED0	0xB341      	BTFSC       FARG_set_ind_Ind, 1, 1
0x2ED2	0xD002      	BRA         L__set_ind511
0x2ED4	0x8489      	BSF         LATA2_bit, BitPos(LATA2_bit+0) 
0x2ED6	0xD001      	BRA         L__set_ind512
L__set_ind511:
0x2ED8	0x9489      	BCF         LATA2_bit, BitPos(LATA2_bit+0) 
L__set_ind512:
;main.h,194 :: 		Ind_022 = ~Ind.B2;
0x2EDA	0xB541      	BTFSC       FARG_set_ind_Ind, 2, 1
0x2EDC	0xD002      	BRA         L__set_ind513
0x2EDE	0x888A      	BSF         LATB4_bit, BitPos(LATB4_bit+0) 
0x2EE0	0xD001      	BRA         L__set_ind514
L__set_ind513:
0x2EE2	0x988A      	BCF         LATB4_bit, BitPos(LATB4_bit+0) 
L__set_ind514:
;main.h,195 :: 		Ind_045 = ~Ind.B3;
0x2EE4	0xB741      	BTFSC       FARG_set_ind_Ind, 3, 1
0x2EE6	0xD002      	BRA         L__set_ind515
0x2EE8	0x8689      	BSF         LATA3_bit, BitPos(LATA3_bit+0) 
0x2EEA	0xD001      	BRA         L__set_ind516
L__set_ind515:
0x2EEC	0x9689      	BCF         LATA3_bit, BitPos(LATA3_bit+0) 
L__set_ind516:
;main.h,196 :: 		Ind_1 = ~Ind.B4;
0x2EEE	0xB941      	BTFSC       FARG_set_ind_Ind, 4, 1
0x2EF0	0xD002      	BRA         L__set_ind517
0x2EF2	0x8A8A      	BSF         LATB5_bit, BitPos(LATB5_bit+0) 
0x2EF4	0xD001      	BRA         L__set_ind518
L__set_ind517:
0x2EF6	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
L__set_ind518:
;main.h,197 :: 		Ind_22 = ~Ind.B5;
0x2EF8	0xBB41      	BTFSC       FARG_set_ind_Ind, 5, 1
0x2EFA	0xD002      	BRA         L__set_ind519
0x2EFC	0x8A89      	BSF         LATA5_bit, BitPos(LATA5_bit+0) 
0x2EFE	0xD001      	BRA         L__set_ind520
L__set_ind519:
0x2F00	0x9A89      	BCF         LATA5_bit, BitPos(LATA5_bit+0) 
L__set_ind520:
;main.h,198 :: 		Ind_45 = ~Ind.B6;
0x2F02	0xBD41      	BTFSC       FARG_set_ind_Ind, 6, 1
0x2F04	0xD002      	BRA         L__set_ind521
0x2F06	0x8889      	BSF         LATA4_bit, BitPos(LATA4_bit+0) 
0x2F08	0xD001      	BRA         L__set_ind522
L__set_ind521:
0x2F0A	0x9889      	BCF         LATA4_bit, BitPos(LATA4_bit+0) 
L__set_ind522:
;main.h,200 :: 		}
L_set_ind49:
;main.h,201 :: 		Vdelay_ms(Rel_Del);
0x2F0C	0xF35FC2D1  	MOVFF       main_Rel_Del, FARG_VDelay_ms_Time_ms
0x2F10	0xF360C2D2  	MOVFF       main_Rel_Del+1, FARG_VDelay_ms_Time_ms+1
0x2F14	0xF00AEC79  	CALL        _VDelay_ms, 0
;main.h,202 :: 		}
L_end_set_ind:
0x2F18	0x0012      	RETURN      0
; end of _set_ind
_EEPROM_Write:
;__Lib_EEPROM_256.c,21 :: 		
;__Lib_EEPROM_256.c,24 :: 		
L_EEPROM_Write0:
0x2F1A	0xA2A6      	BTFSS       EECON1, 1 
0x2F1C	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_256.c,25 :: 		
0x2F1E	0x0000      	NOP
0x2F20	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_256.c,26 :: 		
0x2F22	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,27 :: 		
0x2F24	0xFFA9C339  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_256.c,28 :: 		
0x2F28	0xFFA8C33A  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_256.c,29 :: 		
0x2F2C	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,30 :: 		
0x2F2E	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_256.c,32 :: 		
0x2F30	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_256.c,35 :: 		
0x2F34	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_256.c,36 :: 		
0x2F36	0x0E55      	MOVLW       85
0x2F38	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,37 :: 		
0x2F3A	0x0EAA      	MOVLW       170
0x2F3C	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,38 :: 		
0x2F3E	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_256.c,42 :: 		
0x2F40	0xBE00      	BTFSC       R0, 7 
0x2F42	0xD002      	BRA         L__EEPROM_Write6
0x2F44	0x9EF2      	BCF         INTCON, 7 
0x2F46	0xD001      	BRA         L__EEPROM_Write7
L__EEPROM_Write6:
0x2F48	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write7:
;__Lib_EEPROM_256.c,44 :: 		
0x2F4A	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_256.c,46 :: 		
L_EEPROM_Write2:
0x2F4C	0xB8A1      	BTFSC       PIR2, 4 
0x2F4E	0xD002      	BRA         L_EEPROM_Write3
;__Lib_EEPROM_256.c,47 :: 		
0x2F50	0x0000      	NOP
0x2F52	0xD7FC      	BRA         L_EEPROM_Write2
L_EEPROM_Write3:
;__Lib_EEPROM_256.c,49 :: 		
0x2F54	0x98A1      	BCF         PIR2, 4 
;__Lib_EEPROM_256.c,50 :: 		
L_end_EEPROM_Write:
0x2F56	0x0012      	RETURN      0
; end of _EEPROM_Write
_set_sw:
;main.h,224 :: 		void set_sw(char SW) { // 0 - IN,  1 - OUT
;main.h,225 :: 		Cap_sw = SW;
0x2F58	0x0103      	MOVLB       3
0x2F5A	0xB139      	BTFSC       FARG_set_sw_SW, 0, 1
0x2F5C	0xD002      	BRA         L__set_sw540
0x2F5E	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
0x2F60	0xD001      	BRA         L__set_sw541
L__set_sw540:
0x2F62	0x808B      	BSF         LATC0_bit, BitPos(LATC0_bit+0) 
L__set_sw541:
;main.h,226 :: 		Vdelay_ms(Rel_Del);
0x2F64	0xF35FC2D1  	MOVFF       main_Rel_Del, FARG_VDelay_ms_Time_ms
0x2F68	0xF360C2D2  	MOVFF       main_Rel_Del+1, FARG_VDelay_ms_Time_ms+1
0x2F6C	0xF00AEC79  	CALL        _VDelay_ms, 0
;main.h,227 :: 		}
L_end_set_sw:
0x2F70	0x0012      	RETURN      0
; end of _set_sw
_atu_reset:
;main.h,229 :: 		void atu_reset() {
;main.h,230 :: 		ind = 0;
0x2F72	0x0102      	MOVLB       2
0x2F74	0x6B75      	CLRF        main_ind, 1
;main.h,231 :: 		cap = 0;
0x2F76	0x6B5D      	CLRF        main_cap, 1
;main.h,232 :: 		set_ind(ind);
0x2F78	0x0103      	MOVLB       3
0x2F7A	0x6B41      	CLRF        FARG_set_ind_Ind, 1
0x2F7C	0xDF7A      	RCALL       _set_ind
;main.h,233 :: 		set_cap(cap);
0x2F7E	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x2F82	0xF012EC5F  	CALL        _set_cap, 0
;main.h,234 :: 		Vdelay_ms(Rel_Del);
0x2F86	0xF35FC2D1  	MOVFF       main_Rel_Del, FARG_VDelay_ms_Time_ms
0x2F8A	0xF360C2D2  	MOVFF       main_Rel_Del+1, FARG_VDelay_ms_Time_ms+1
0x2F8E	0xF00AEC79  	CALL        _VDelay_ms, 0
;main.h,235 :: 		}
L_end_atu_reset:
0x2F92	0x0012      	RETURN      0
; end of _atu_reset
_lcd_pwr:
;main.c,719 :: 		void lcd_pwr() {
;main.c,720 :: 		int p = 0;
0x2F94	0x0103      	MOVLB       3
0x2F96	0x6B3D      	CLRF        lcd_pwr_p_L0, 1
0x2F98	0x6B3E      	CLRF        lcd_pwr_p_L0+1, 1
0x2F9A	0x0E01      	MOVLW       1
0x2F9C	0x6F3F      	MOVWF       lcd_pwr_SWR_fixed_L0, 1
0x2F9E	0x0E00      	MOVLW       0
0x2FA0	0x6F40      	MOVWF       lcd_pwr_SWR_fixed_L0+1, 1
;main.c,726 :: 		delta = Auto_delta - 100;
0x2FA2	0x0E64      	MOVLW       100
0x2FA4	0x0102      	MOVLB       2
0x2FA6	0x5DBA      	SUBWF       _Auto_delta, 0, 1
0x2FA8	0x0103      	MOVLB       3
0x2FAA	0x6F3A      	MOVWF       lcd_pwr_delta_L0, 1
0x2FAC	0x0E00      	MOVLW       0
0x2FAE	0x0102      	MOVLB       2
0x2FB0	0x59BB      	SUBWFB      _Auto_delta+1, 0, 1
0x2FB2	0x0103      	MOVLB       3
0x2FB4	0x6F3B      	MOVWF       lcd_pwr_delta_L0+1, 1
;main.c,727 :: 		PWR = 0;
0x2FB6	0x0102      	MOVLB       2
0x2FB8	0x6BD5      	CLRF        _PWR, 1
0x2FBA	0x6BD6      	CLRF        _PWR+1, 1
;main.c,728 :: 		asm CLRWDT;
0x2FBC	0x0004      	CLRWDT
;main.c,730 :: 		cnt = 120;
0x2FBE	0x0E78      	MOVLW       120
0x2FC0	0x0103      	MOVLB       3
0x2FC2	0x6F3C      	MOVWF       lcd_pwr_cnt_L0, 1
;main.c,731 :: 		for (peak_cnt = 0; peak_cnt < cnt; peak_cnt++) {
0x2FC4	0x6B39      	CLRF        lcd_pwr_peak_cnt_L0, 1
L_lcd_pwr367:
0x2FC6	0x513C      	MOVF        lcd_pwr_cnt_L0, 0, 1
0x2FC8	0x5D39      	SUBWF       lcd_pwr_peak_cnt_L0, 0, 1
0x2FCA	0xE248      	BC          L_lcd_pwr368
;main.c,732 :: 		if (PORTB.B1 == 0 | PORTB.B2 == 0 | PORTB.B0 == 0) {
0x2FCC	0xB281      	BTFSC       PORTB, 1 
0x2FCE	0xD002      	BRA         L__lcd_pwr639
0x2FD0	0x8006      	BSF         R6, 0 
0x2FD2	0xD001      	BRA         L__lcd_pwr640
L__lcd_pwr639:
0x2FD4	0x9006      	BCF         R6, 0 
L__lcd_pwr640:
0x2FD6	0xB481      	BTFSC       PORTB, 2 
0x2FD8	0xD002      	BRA         L__lcd_pwr641
0x2FDA	0x80D8      	BSF         STATUS, 0 
0x2FDC	0xD001      	BRA         L__lcd_pwr642
L__lcd_pwr641:
0x2FDE	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr642:
0x2FE0	0xB006      	BTFSC       R6, 0 
0x2FE2	0xD003      	BRA         L__lcd_pwr643
0x2FE4	0xE202      	BC          L__lcd_pwr643
0x2FE6	0x9006      	BCF         R6, 0 
0x2FE8	0xD001      	BRA         L__lcd_pwr644
L__lcd_pwr643:
0x2FEA	0x8006      	BSF         R6, 0 
L__lcd_pwr644:
0x2FEC	0xB081      	BTFSC       PORTB, 0 
0x2FEE	0xD002      	BRA         L__lcd_pwr645
0x2FF0	0x80D8      	BSF         STATUS, 0 
0x2FF2	0xD001      	BRA         L__lcd_pwr646
L__lcd_pwr645:
0x2FF4	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr646:
0x2FF6	0xB006      	BTFSC       R6, 0 
0x2FF8	0xD003      	BRA         L__lcd_pwr647
0x2FFA	0xE202      	BC          L__lcd_pwr647
0x2FFC	0x9006      	BCF         R6, 0 
0x2FFE	0xD001      	BRA         L__lcd_pwr648
L__lcd_pwr647:
0x3000	0x8006      	BSF         R6, 0 
L__lcd_pwr648:
0x3002	0xA006      	BTFSS       R6, 0 
0x3004	0xD008      	BRA         L_lcd_pwr370
;main.c,733 :: 		button_delay();
0x3006	0xF012EC94  	CALL        _button_delay, 0
;main.c,734 :: 		if (but == 1) {
0x300A	0x0100      	MOVLB       0
0x300C	0x51EC      	MOVF        _but, 0, 1
0x300E	0x0A01      	XORLW       1
0x3010	0xE102      	BNZ         L_lcd_pwr371
;main.c,735 :: 		but = 0;
0x3012	0x6BEC      	CLRF        _but, 1
;main.c,736 :: 		return;
0x3014	0xD2D1      	BRA         L_end_lcd_pwr
;main.c,737 :: 		}
L_lcd_pwr371:
;main.c,738 :: 		}
L_lcd_pwr370:
;main.c,739 :: 		get_pwr();
0x3016	0xF010EC3A  	CALL        _get_pwr, 0
;main.c,740 :: 		if (PWR > p) {
0x301A	0x0E80      	MOVLW       128
0x301C	0x0103      	MOVLB       3
0x301E	0x193E      	XORWF       lcd_pwr_p_L0+1, 0, 1
0x3020	0x6E00      	MOVWF       R0 
0x3022	0x0E80      	MOVLW       128
0x3024	0x0102      	MOVLB       2
0x3026	0x19D6      	XORWF       _PWR+1, 0, 1
0x3028	0x5C00      	SUBWF       R0, 0 
0x302A	0xE103      	BNZ         L__lcd_pwr649
0x302C	0x51D5      	MOVF        _PWR, 0, 1
0x302E	0x0103      	MOVLB       3
0x3030	0x5D3D      	SUBWF       lcd_pwr_p_L0, 0, 1
L__lcd_pwr649:
0x3032	0xE208      	BC          L_lcd_pwr372
;main.c,741 :: 		p = PWR;
0x3034	0xF33DC2D5  	MOVFF       _PWR, lcd_pwr_p_L0
0x3038	0xF33EC2D6  	MOVFF       _PWR+1, lcd_pwr_p_L0+1
;main.c,742 :: 		SWR_fixed = SWR;
0x303C	0xF33FC2D8  	MOVFF       _SWR, lcd_pwr_SWR_fixed_L0
0x3040	0xF340C2D9  	MOVFF       _SWR+1, lcd_pwr_SWR_fixed_L0+1
;main.c,743 :: 		}
L_lcd_pwr372:
;main.c,744 :: 		Delay_ms(3);
0x3044	0x0E10      	MOVLW       16
0x3046	0x6E0C      	MOVWF       R12, 0
0x3048	0x0E94      	MOVLW       148
0x304A	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr373:
0x304C	0x0103      	MOVLB       3
0x304E	0x2E0D      	DECFSZ      R13, 1, 0
0x3050	0xD7FD      	BRA         L_lcd_pwr373
0x3052	0x2E0C      	DECFSZ      R12, 1, 0
0x3054	0xD7FB      	BRA         L_lcd_pwr373
0x3056	0x0000      	NOP
;main.c,731 :: 		for (peak_cnt = 0; peak_cnt < cnt; peak_cnt++) {
0x3058	0x2B39      	INCF        lcd_pwr_peak_cnt_L0, 1, 1
;main.c,745 :: 		}
0x305A	0xD7B5      	BRA         L_lcd_pwr367
L_lcd_pwr368:
;main.c,746 :: 		asm CLRWDT;
0x305C	0x0004      	CLRWDT
;main.c,747 :: 		Power = p;
0x305E	0xF0EAC33D  	MOVFF       lcd_pwr_p_L0, _Power
0x3062	0xF0EBC33E  	MOVFF       lcd_pwr_p_L0+1, _Power+1
;main.c,748 :: 		lcd_swr(SWR_fixed);
0x3066	0xF341C33F  	MOVFF       lcd_pwr_SWR_fixed_L0, FARG_lcd_swr_swr
0x306A	0xF342C340  	MOVFF       lcd_pwr_SWR_fixed_L0+1, FARG_lcd_swr_swr+1
0x306E	0xF011ECA7  	CALL        _lcd_swr, 0
;main.c,749 :: 		if (SWR_fixed >= 100) {
0x3072	0x0E80      	MOVLW       128
0x3074	0x0103      	MOVLB       3
0x3076	0x1940      	XORWF       lcd_pwr_SWR_fixed_L0+1, 0, 1
0x3078	0x6E00      	MOVWF       R0 
0x307A	0x0E80      	MOVLW       128
0x307C	0x5C00      	SUBWF       R0, 0 
0x307E	0xE102      	BNZ         L__lcd_pwr650
0x3080	0x0E64      	MOVLW       100
0x3082	0x5D3F      	SUBWF       lcd_pwr_SWR_fixed_L0, 0, 1
L__lcd_pwr650:
0x3084	0xE316      	BNC         L_lcd_pwr374
;main.c,750 :: 		dysp_on(); // dysplay ON
0x3086	0xF010EC21  	CALL        _dysp_on, 0
;main.c,751 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x308A	0xF000C0C8  	MOVFF       _Dysp_delay, R0
0x308E	0xF00EEC63  	CALL        _byte2double, 0
0x3092	0xF004C0C4  	MOVFF       _dysp_cnt_mult, R4
0x3096	0xF005C0C5  	MOVFF       _dysp_cnt_mult+1, R5
0x309A	0xF006C0C6  	MOVFF       _dysp_cnt_mult+2, R6
0x309E	0xF007C0C7  	MOVFF       _dysp_cnt_mult+3, R7
0x30A2	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x30A6	0xF006EC9E  	CALL        _double2int, 0
0x30AA	0xF0DDC000  	MOVFF       R0, _dysp_cnt
0x30AE	0xF0DEC001  	MOVFF       R1, _dysp_cnt+1
;main.c,752 :: 		}
L_lcd_pwr374:
;main.c,754 :: 		if (Auto & SWR_fixed >= Auto_delta &
0x30B2	0x0E80      	MOVLW       128
0x30B4	0x0103      	MOVLB       3
0x30B6	0x1940      	XORWF       lcd_pwr_SWR_fixed_L0+1, 0, 1
0x30B8	0x6E00      	MOVWF       R0 
0x30BA	0x0E80      	MOVLW       128
0x30BC	0x0102      	MOVLB       2
0x30BE	0x19BB      	XORWF       _Auto_delta+1, 0, 1
0x30C0	0x5C00      	SUBWF       R0, 0 
0x30C2	0xE103      	BNZ         L__lcd_pwr651
0x30C4	0x51BA      	MOVF        _Auto_delta, 0, 1
0x30C6	0x0103      	MOVLB       3
0x30C8	0x5D3F      	SUBWF       lcd_pwr_SWR_fixed_L0, 0, 1
L__lcd_pwr651:
0x30CA	0x0E00      	MOVLW       0
0x30CC	0xB0D8      	BTFSC       STATUS, 0 
0x30CE	0x0E01      	MOVLW       1
0x30D0	0x6E00      	MOVWF       R0 
0x30D2	0x5000      	MOVF        R0, 0 
0x30D4	0x0100      	MOVLB       0
0x30D6	0x15C3      	ANDWF       _Auto, 0, 1
0x30D8	0x6E05      	MOVWF       R5 
;main.c,755 :: 		((SWR_fixed > SWR_fixed_old & (SWR_fixed - SWR_fixed_old) > delta) |
0x30DA	0x0E80      	MOVLW       128
0x30DC	0x0102      	MOVLB       2
0x30DE	0x195F      	XORWF       _SWR_fixed_old+1, 0, 1
0x30E0	0x6E03      	MOVWF       R3 
0x30E2	0x0E80      	MOVLW       128
0x30E4	0x0103      	MOVLB       3
0x30E6	0x1940      	XORWF       lcd_pwr_SWR_fixed_L0+1, 0, 1
0x30E8	0x5C03      	SUBWF       R3, 0 
0x30EA	0xE103      	BNZ         L__lcd_pwr652
0x30EC	0x513F      	MOVF        lcd_pwr_SWR_fixed_L0, 0, 1
0x30EE	0x0102      	MOVLB       2
0x30F0	0x5D5E      	SUBWF       _SWR_fixed_old, 0, 1
L__lcd_pwr652:
0x30F2	0x0102      	MOVLB       2
0x30F4	0x0E01      	MOVLW       1
0x30F6	0xB0D8      	BTFSC       STATUS, 0 
0x30F8	0x0E00      	MOVLW       0
0x30FA	0x6E03      	MOVWF       R3 
0x30FC	0x515E      	MOVF        _SWR_fixed_old, 0, 1
0x30FE	0x0103      	MOVLB       3
0x3100	0x5D3F      	SUBWF       lcd_pwr_SWR_fixed_L0, 0, 1
0x3102	0x6E01      	MOVWF       R1 
0x3104	0x0102      	MOVLB       2
0x3106	0x515F      	MOVF        _SWR_fixed_old+1, 0, 1
0x3108	0x0103      	MOVLB       3
0x310A	0x5940      	SUBWFB      lcd_pwr_SWR_fixed_L0+1, 0, 1
0x310C	0x6E02      	MOVWF       R2 
0x310E	0x0E80      	MOVLW       128
0x3110	0x193B      	XORWF       lcd_pwr_delta_L0+1, 0, 1
0x3112	0x6E00      	MOVWF       R0 
0x3114	0x0E80      	MOVLW       128
0x3116	0x1802      	XORWF       R2, 0 
0x3118	0x5C00      	SUBWF       R0, 0 
0x311A	0xE102      	BNZ         L__lcd_pwr653
0x311C	0x5001      	MOVF        R1, 0 
0x311E	0x5D3A      	SUBWF       lcd_pwr_delta_L0, 0, 1
L__lcd_pwr653:
0x3120	0x0E01      	MOVLW       1
0x3122	0xB0D8      	BTFSC       STATUS, 0 
0x3124	0x0E00      	MOVLW       0
0x3126	0x6E00      	MOVWF       R0 
0x3128	0x5000      	MOVF        R0, 0 
0x312A	0x1403      	ANDWF       R3, 0 
0x312C	0x6E04      	MOVWF       R4 
;main.c,756 :: 		(SWR_fixed < SWR_fixed_old & (SWR_fixed_old - SWR_fixed) > delta) |
0x312E	0x0E80      	MOVLW       128
0x3130	0x1940      	XORWF       lcd_pwr_SWR_fixed_L0+1, 0, 1
0x3132	0x6E03      	MOVWF       R3 
0x3134	0x0E80      	MOVLW       128
0x3136	0x0102      	MOVLB       2
0x3138	0x195F      	XORWF       _SWR_fixed_old+1, 0, 1
0x313A	0x5C03      	SUBWF       R3, 0 
0x313C	0xE103      	BNZ         L__lcd_pwr654
0x313E	0x515E      	MOVF        _SWR_fixed_old, 0, 1
0x3140	0x0103      	MOVLB       3
0x3142	0x5D3F      	SUBWF       lcd_pwr_SWR_fixed_L0, 0, 1
L__lcd_pwr654:
0x3144	0x0103      	MOVLB       3
0x3146	0x0E01      	MOVLW       1
0x3148	0xB0D8      	BTFSC       STATUS, 0 
0x314A	0x0E00      	MOVLW       0
0x314C	0x6E03      	MOVWF       R3 
0x314E	0x513F      	MOVF        lcd_pwr_SWR_fixed_L0, 0, 1
0x3150	0x0102      	MOVLB       2
0x3152	0x5D5E      	SUBWF       _SWR_fixed_old, 0, 1
0x3154	0x6E01      	MOVWF       R1 
0x3156	0x0103      	MOVLB       3
0x3158	0x5140      	MOVF        lcd_pwr_SWR_fixed_L0+1, 0, 1
0x315A	0x0102      	MOVLB       2
0x315C	0x595F      	SUBWFB      _SWR_fixed_old+1, 0, 1
0x315E	0x6E02      	MOVWF       R2 
0x3160	0x0E80      	MOVLW       128
0x3162	0x0103      	MOVLB       3
0x3164	0x193B      	XORWF       lcd_pwr_delta_L0+1, 0, 1
0x3166	0x6E00      	MOVWF       R0 
0x3168	0x0E80      	MOVLW       128
0x316A	0x1802      	XORWF       R2, 0 
0x316C	0x5C00      	SUBWF       R0, 0 
0x316E	0xE102      	BNZ         L__lcd_pwr655
0x3170	0x5001      	MOVF        R1, 0 
0x3172	0x5D3A      	SUBWF       lcd_pwr_delta_L0, 0, 1
L__lcd_pwr655:
0x3174	0x0E01      	MOVLW       1
0x3176	0xB0D8      	BTFSC       STATUS, 0 
0x3178	0x0E00      	MOVLW       0
0x317A	0x6E00      	MOVWF       R0 
0x317C	0x5003      	MOVF        R3, 0 
0x317E	0x1600      	ANDWF       R0, 1 
0x3180	0x5000      	MOVF        R0, 0 
0x3182	0x1004      	IORWF       R4, 0 
0x3184	0x6E01      	MOVWF       R1 
;main.c,757 :: 		SWR_fixed_old == 999))
0x3186	0x0102      	MOVLB       2
0x3188	0x515F      	MOVF        _SWR_fixed_old+1, 0, 1
0x318A	0x0A03      	XORLW       3
0x318C	0xE102      	BNZ         L__lcd_pwr656
0x318E	0x0EE7      	MOVLW       231
0x3190	0x195E      	XORWF       _SWR_fixed_old, 0, 1
L__lcd_pwr656:
0x3192	0x0E01      	MOVLW       1
0x3194	0xA4D8      	BTFSS       STATUS, 2 
0x3196	0x0E00      	MOVLW       0
0x3198	0x6E00      	MOVWF       R0 
0x319A	0x5001      	MOVF        R1, 0 
0x319C	0x1200      	IORWF       R0, 1 
0x319E	0x5005      	MOVF        R5, 0 
0x31A0	0x1600      	ANDWF       R0, 1 
0x31A2	0xE003      	BZ          L_lcd_pwr375
;main.c,758 :: 		Soft_tune = 1;
0x31A4	0x0E01      	MOVLW       1
0x31A6	0x0100      	MOVLB       0
0x31A8	0x6FC9      	MOVWF       _Soft_tune, 1
L_lcd_pwr375:
;main.c,760 :: 		if (PORTB.B1 == 0 | PORTB.B2 == 0 | PORTB.B0 == 0) {
0x31AA	0xB281      	BTFSC       PORTB, 1 
0x31AC	0xD002      	BRA         L__lcd_pwr657
0x31AE	0x8006      	BSF         R6, 0 
0x31B0	0xD001      	BRA         L__lcd_pwr658
L__lcd_pwr657:
0x31B2	0x9006      	BCF         R6, 0 
L__lcd_pwr658:
0x31B4	0xB481      	BTFSC       PORTB, 2 
0x31B6	0xD002      	BRA         L__lcd_pwr659
0x31B8	0x80D8      	BSF         STATUS, 0 
0x31BA	0xD001      	BRA         L__lcd_pwr660
L__lcd_pwr659:
0x31BC	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr660:
0x31BE	0xB006      	BTFSC       R6, 0 
0x31C0	0xD003      	BRA         L__lcd_pwr661
0x31C2	0xE202      	BC          L__lcd_pwr661
0x31C4	0x9006      	BCF         R6, 0 
0x31C6	0xD001      	BRA         L__lcd_pwr662
L__lcd_pwr661:
0x31C8	0x8006      	BSF         R6, 0 
L__lcd_pwr662:
0x31CA	0xB081      	BTFSC       PORTB, 0 
0x31CC	0xD002      	BRA         L__lcd_pwr663
0x31CE	0x80D8      	BSF         STATUS, 0 
0x31D0	0xD001      	BRA         L__lcd_pwr664
L__lcd_pwr663:
0x31D2	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr664:
0x31D4	0xB006      	BTFSC       R6, 0 
0x31D6	0xD003      	BRA         L__lcd_pwr665
0x31D8	0xE202      	BC          L__lcd_pwr665
0x31DA	0x9006      	BCF         R6, 0 
0x31DC	0xD001      	BRA         L__lcd_pwr666
L__lcd_pwr665:
0x31DE	0x8006      	BSF         R6, 0 
L__lcd_pwr666:
0x31E0	0xA006      	BTFSS       R6, 0 
0x31E2	0xD008      	BRA         L_lcd_pwr376
;main.c,761 :: 		button_delay();
0x31E4	0xF012EC94  	CALL        _button_delay, 0
;main.c,762 :: 		if (but == 1) {
0x31E8	0x0100      	MOVLB       0
0x31EA	0x51EC      	MOVF        _but, 0, 1
0x31EC	0x0A01      	XORLW       1
0x31EE	0xE102      	BNZ         L_lcd_pwr377
;main.c,763 :: 		but = 0;
0x31F0	0x6BEC      	CLRF        _but, 1
;main.c,764 :: 		return;
0x31F2	0xD1E2      	BRA         L_end_lcd_pwr
;main.c,765 :: 		}
L_lcd_pwr377:
;main.c,766 :: 		} // Fast return if button pressed
L_lcd_pwr376:
;main.c,767 :: 		show_pwr(Power, SWR_fixed);
0x31F4	0xF341C0EA  	MOVFF       _Power, FARG_show_pwr_Power
0x31F8	0xF342C0EB  	MOVFF       _Power+1, FARG_show_pwr_Power+1
0x31FC	0xF343C33F  	MOVFF       lcd_pwr_SWR_fixed_L0, FARG_show_pwr_SWR
0x3200	0xF344C340  	MOVFF       lcd_pwr_SWR_fixed_L0+1, FARG_show_pwr_SWR+1
0x3204	0xF012ECC0  	CALL        _show_pwr, 0
;main.c,769 :: 		if (PORTB.B1 == 0 | PORTB.B2 == 0 | PORTB.B0 == 0) {
0x3208	0xB281      	BTFSC       PORTB, 1 
0x320A	0xD002      	BRA         L__lcd_pwr667
0x320C	0x8006      	BSF         R6, 0 
0x320E	0xD001      	BRA         L__lcd_pwr668
L__lcd_pwr667:
0x3210	0x9006      	BCF         R6, 0 
L__lcd_pwr668:
0x3212	0xB481      	BTFSC       PORTB, 2 
0x3214	0xD002      	BRA         L__lcd_pwr669
0x3216	0x80D8      	BSF         STATUS, 0 
0x3218	0xD001      	BRA         L__lcd_pwr670
L__lcd_pwr669:
0x321A	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr670:
0x321C	0xB006      	BTFSC       R6, 0 
0x321E	0xD003      	BRA         L__lcd_pwr671
0x3220	0xE202      	BC          L__lcd_pwr671
0x3222	0x9006      	BCF         R6, 0 
0x3224	0xD001      	BRA         L__lcd_pwr672
L__lcd_pwr671:
0x3226	0x8006      	BSF         R6, 0 
L__lcd_pwr672:
0x3228	0xB081      	BTFSC       PORTB, 0 
0x322A	0xD002      	BRA         L__lcd_pwr673
0x322C	0x80D8      	BSF         STATUS, 0 
0x322E	0xD001      	BRA         L__lcd_pwr674
L__lcd_pwr673:
0x3230	0x90D8      	BCF         STATUS, 0 
L__lcd_pwr674:
0x3232	0xB006      	BTFSC       R6, 0 
0x3234	0xD003      	BRA         L__lcd_pwr675
0x3236	0xE202      	BC          L__lcd_pwr675
0x3238	0x9006      	BCF         R6, 0 
0x323A	0xD001      	BRA         L__lcd_pwr676
L__lcd_pwr675:
0x323C	0x8006      	BSF         R6, 0 
L__lcd_pwr676:
0x323E	0xA006      	BTFSS       R6, 0 
0x3240	0xD008      	BRA         L_lcd_pwr378
;main.c,770 :: 		button_delay();
0x3242	0xF012EC94  	CALL        _button_delay, 0
;main.c,771 :: 		if (but == 1) {
0x3246	0x0100      	MOVLB       0
0x3248	0x51EC      	MOVF        _but, 0, 1
0x324A	0x0A01      	XORLW       1
0x324C	0xE102      	BNZ         L_lcd_pwr379
;main.c,772 :: 		but = 0;
0x324E	0x6BEC      	CLRF        _but, 1
;main.c,773 :: 		return;
0x3250	0xD1B3      	BRA         L_end_lcd_pwr
;main.c,774 :: 		}
L_lcd_pwr379:
;main.c,775 :: 		}
L_lcd_pwr378:
0x3252	0x0100      	MOVLB       0
;main.c,776 :: 		asm CLRWDT;
0x3254	0x0004      	CLRWDT
;main.c,777 :: 		if (Overload == 1) {
0x3256	0x51DC      	MOVF        main_Overload, 0, 1
0x3258	0x0A01      	XORLW       1
0x325A	0xA4D8      	BTFSS       STATUS, 2 
0x325C	0xD1AD      	BRA         L_lcd_pwr380
;main.c,778 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x325E	0x0102      	MOVLB       2
0x3260	0x51D7      	MOVF        _type, 0, 1
0x3262	0x0A04      	XORLW       4
0x3264	0x0E01      	MOVLW       1
0x3266	0xA4D8      	BTFSS       STATUS, 2 
0x3268	0x0E00      	MOVLW       0
0x326A	0x6E01      	MOVWF       R1 
0x326C	0x51D7      	MOVF        _type, 0, 1
0x326E	0x0A05      	XORLW       5
0x3270	0x0E01      	MOVLW       1
0x3272	0xA4D8      	BTFSS       STATUS, 2 
0x3274	0x0E00      	MOVLW       0
0x3276	0x6E00      	MOVWF       R0 
0x3278	0x5001      	MOVF        R1, 0 
0x327A	0x1200      	IORWF       R0, 1 
0x327C	0xB4D8      	BTFSC       STATUS, 2 
0x327E	0xD0CA      	BRA         L_lcd_pwr381
;main.c,779 :: 		led_wr_str(2, 16, "        ", 8);
0x3280	0x0E02      	MOVLW       2
0x3282	0x0103      	MOVLB       3
0x3284	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3286	0x0E10      	MOVLW       16
0x3288	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x328A	0x0ED3      	MOVLW       ?lstr61_main
0x328C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x328E	0x0E00      	MOVLW       hi_addr(?lstr61_main)
0x3290	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3292	0x0E08      	MOVLW       8
0x3294	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3296	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,780 :: 		delay_ms(100);
0x329A	0x0E03      	MOVLW       3
0x329C	0x6E0B      	MOVWF       R11, 0
0x329E	0x0E08      	MOVLW       8
0x32A0	0x6E0C      	MOVWF       R12, 0
0x32A2	0x0E77      	MOVLW       119
0x32A4	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr382:
0x32A6	0x2E0D      	DECFSZ      R13, 1, 0
0x32A8	0xD7FE      	BRA         L_lcd_pwr382
0x32AA	0x2E0C      	DECFSZ      R12, 1, 0
0x32AC	0xD7FC      	BRA         L_lcd_pwr382
0x32AE	0x2E0B      	DECFSZ      R11, 1, 0
0x32B0	0xD7FA      	BRA         L_lcd_pwr382
;main.c,781 :: 		led_wr_str(2, 16, "OVERLOAD", 8);
0x32B2	0x0E02      	MOVLW       2
0x32B4	0x0103      	MOVLB       3
0x32B6	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x32B8	0x0E10      	MOVLW       16
0x32BA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x32BC	0x0ECA      	MOVLW       ?lstr62_main
0x32BE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x32C0	0x0E00      	MOVLW       hi_addr(?lstr62_main)
0x32C2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x32C4	0x0E08      	MOVLW       8
0x32C6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x32C8	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,782 :: 		delay_ms(500);
0x32CC	0x0E0B      	MOVLW       11
0x32CE	0x6E0B      	MOVWF       R11, 0
0x32D0	0x0E26      	MOVLW       38
0x32D2	0x6E0C      	MOVWF       R12, 0
0x32D4	0x0E5D      	MOVLW       93
0x32D6	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr383:
0x32D8	0x2E0D      	DECFSZ      R13, 1, 0
0x32DA	0xD7FE      	BRA         L_lcd_pwr383
0x32DC	0x2E0C      	DECFSZ      R12, 1, 0
0x32DE	0xD7FC      	BRA         L_lcd_pwr383
0x32E0	0x2E0B      	DECFSZ      R11, 1, 0
0x32E2	0xD7FA      	BRA         L_lcd_pwr383
0x32E4	0x0000      	NOP
0x32E6	0x0000      	NOP
;main.c,783 :: 		asm CLRWDT;
0x32E8	0x0004      	CLRWDT
;main.c,784 :: 		led_wr_str(2, 16, "        ", 8);
0x32EA	0x0E02      	MOVLW       2
0x32EC	0x0103      	MOVLB       3
0x32EE	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x32F0	0x0E10      	MOVLW       16
0x32F2	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x32F4	0x0EED      	MOVLW       ?lstr63_main
0x32F6	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x32F8	0x0E00      	MOVLW       hi_addr(?lstr63_main)
0x32FA	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x32FC	0x0E08      	MOVLW       8
0x32FE	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3300	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,785 :: 		delay_ms(300);
0x3304	0x0E07      	MOVLW       7
0x3306	0x6E0B      	MOVWF       R11, 0
0x3308	0x0E17      	MOVLW       23
0x330A	0x6E0C      	MOVWF       R12, 0
0x330C	0x0E6A      	MOVLW       106
0x330E	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr384:
0x3310	0x2E0D      	DECFSZ      R13, 1, 0
0x3312	0xD7FE      	BRA         L_lcd_pwr384
0x3314	0x2E0C      	DECFSZ      R12, 1, 0
0x3316	0xD7FC      	BRA         L_lcd_pwr384
0x3318	0x2E0B      	DECFSZ      R11, 1, 0
0x331A	0xD7FA      	BRA         L_lcd_pwr384
0x331C	0x0000      	NOP
;main.c,786 :: 		asm CLRWDT;
0x331E	0x0004      	CLRWDT
;main.c,787 :: 		led_wr_str(2, 16, "OVERLOAD", 8);
0x3320	0x0E02      	MOVLW       2
0x3322	0x0103      	MOVLB       3
0x3324	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3326	0x0E10      	MOVLW       16
0x3328	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x332A	0x0E48      	MOVLW       ?lstr64_main
0x332C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x332E	0x0E01      	MOVLW       hi_addr(?lstr64_main)
0x3330	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3332	0x0E08      	MOVLW       8
0x3334	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3336	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,788 :: 		delay_ms(500);
0x333A	0x0E0B      	MOVLW       11
0x333C	0x6E0B      	MOVWF       R11, 0
0x333E	0x0E26      	MOVLW       38
0x3340	0x6E0C      	MOVWF       R12, 0
0x3342	0x0E5D      	MOVLW       93
0x3344	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr385:
0x3346	0x2E0D      	DECFSZ      R13, 1, 0
0x3348	0xD7FE      	BRA         L_lcd_pwr385
0x334A	0x2E0C      	DECFSZ      R12, 1, 0
0x334C	0xD7FC      	BRA         L_lcd_pwr385
0x334E	0x2E0B      	DECFSZ      R11, 1, 0
0x3350	0xD7FA      	BRA         L_lcd_pwr385
0x3352	0x0000      	NOP
0x3354	0x0000      	NOP
;main.c,789 :: 		asm CLRWDT;
0x3356	0x0004      	CLRWDT
;main.c,790 :: 		led_wr_str(2, 16, "        ", 8);
0x3358	0x0E02      	MOVLW       2
0x335A	0x0103      	MOVLB       3
0x335C	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x335E	0x0E10      	MOVLW       16
0x3360	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x3362	0x0E3F      	MOVLW       ?lstr65_main
0x3364	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x3366	0x0E01      	MOVLW       hi_addr(?lstr65_main)
0x3368	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x336A	0x0E08      	MOVLW       8
0x336C	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x336E	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,791 :: 		delay_ms(300);
0x3372	0x0E07      	MOVLW       7
0x3374	0x6E0B      	MOVWF       R11, 0
0x3376	0x0E17      	MOVLW       23
0x3378	0x6E0C      	MOVWF       R12, 0
0x337A	0x0E6A      	MOVLW       106
0x337C	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr386:
0x337E	0x2E0D      	DECFSZ      R13, 1, 0
0x3380	0xD7FE      	BRA         L_lcd_pwr386
0x3382	0x2E0C      	DECFSZ      R12, 1, 0
0x3384	0xD7FC      	BRA         L_lcd_pwr386
0x3386	0x2E0B      	DECFSZ      R11, 1, 0
0x3388	0xD7FA      	BRA         L_lcd_pwr386
0x338A	0x0000      	NOP
;main.c,792 :: 		asm CLRWDT;
0x338C	0x0004      	CLRWDT
;main.c,793 :: 		led_wr_str(2, 16, "OVERLOAD", 8);
0x338E	0x0E02      	MOVLW       2
0x3390	0x0103      	MOVLB       3
0x3392	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3394	0x0E10      	MOVLW       16
0x3396	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x3398	0x0E36      	MOVLW       ?lstr66_main
0x339A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x339C	0x0E01      	MOVLW       hi_addr(?lstr66_main)
0x339E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x33A0	0x0E08      	MOVLW       8
0x33A2	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x33A4	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,794 :: 		delay_ms(500);
0x33A8	0x0E0B      	MOVLW       11
0x33AA	0x6E0B      	MOVWF       R11, 0
0x33AC	0x0E26      	MOVLW       38
0x33AE	0x6E0C      	MOVWF       R12, 0
0x33B0	0x0E5D      	MOVLW       93
0x33B2	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr387:
0x33B4	0x2E0D      	DECFSZ      R13, 1, 0
0x33B6	0xD7FE      	BRA         L_lcd_pwr387
0x33B8	0x2E0C      	DECFSZ      R12, 1, 0
0x33BA	0xD7FC      	BRA         L_lcd_pwr387
0x33BC	0x2E0B      	DECFSZ      R11, 1, 0
0x33BE	0xD7FA      	BRA         L_lcd_pwr387
0x33C0	0x0000      	NOP
0x33C2	0x0000      	NOP
;main.c,795 :: 		asm CLRWDT;
0x33C4	0x0004      	CLRWDT
;main.c,796 :: 		led_wr_str(2, 16, "        ", 8);
0x33C6	0x0E02      	MOVLW       2
0x33C8	0x0103      	MOVLB       3
0x33CA	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x33CC	0x0E10      	MOVLW       16
0x33CE	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x33D0	0x0E51      	MOVLW       ?lstr67_main
0x33D2	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x33D4	0x0E01      	MOVLW       hi_addr(?lstr67_main)
0x33D6	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x33D8	0x0E08      	MOVLW       8
0x33DA	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x33DC	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,797 :: 		delay_ms(100);
0x33E0	0x0E03      	MOVLW       3
0x33E2	0x6E0B      	MOVWF       R11, 0
0x33E4	0x0E08      	MOVLW       8
0x33E6	0x6E0C      	MOVWF       R12, 0
0x33E8	0x0E77      	MOVLW       119
0x33EA	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr388:
0x33EC	0x2E0D      	DECFSZ      R13, 1, 0
0x33EE	0xD7FE      	BRA         L_lcd_pwr388
0x33F0	0x2E0C      	DECFSZ      R12, 1, 0
0x33F2	0xD7FC      	BRA         L_lcd_pwr388
0x33F4	0x2E0B      	DECFSZ      R11, 1, 0
0x33F6	0xD7FA      	BRA         L_lcd_pwr388
;main.c,798 :: 		led_wr_str(2, 16, "SWR=    ", 8);
0x33F8	0x0E02      	MOVLW       2
0x33FA	0x0103      	MOVLB       3
0x33FC	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x33FE	0x0E10      	MOVLW       16
0x3400	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x3402	0x0E6C      	MOVLW       ?lstr68_main
0x3404	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x3406	0x0E01      	MOVLW       hi_addr(?lstr68_main)
0x3408	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x340A	0x0E08      	MOVLW       8
0x340C	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x340E	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,799 :: 		} else if (type != 0) { // 1602  & 128*32// 1602
0x3412	0xD0C6      	BRA         L_lcd_pwr389
L_lcd_pwr381:
0x3414	0x0102      	MOVLB       2
0x3416	0x51D7      	MOVF        _type, 0, 1
0x3418	0x0A00      	XORLW       0
0x341A	0xB4D8      	BTFSC       STATUS, 2 
0x341C	0xD0C1      	BRA         L_lcd_pwr390
;main.c,800 :: 		led_wr_str(1, 0, "        ", 8);
0x341E	0x0E01      	MOVLW       1
0x3420	0x0103      	MOVLB       3
0x3422	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3424	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x3426	0x0E63      	MOVLW       ?lstr69_main
0x3428	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x342A	0x0E01      	MOVLW       hi_addr(?lstr69_main)
0x342C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x342E	0x0E08      	MOVLW       8
0x3430	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3432	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,801 :: 		delay_ms(100);
0x3436	0x0E03      	MOVLW       3
0x3438	0x6E0B      	MOVWF       R11, 0
0x343A	0x0E08      	MOVLW       8
0x343C	0x6E0C      	MOVWF       R12, 0
0x343E	0x0E77      	MOVLW       119
0x3440	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr391:
0x3442	0x2E0D      	DECFSZ      R13, 1, 0
0x3444	0xD7FE      	BRA         L_lcd_pwr391
0x3446	0x2E0C      	DECFSZ      R12, 1, 0
0x3448	0xD7FC      	BRA         L_lcd_pwr391
0x344A	0x2E0B      	DECFSZ      R11, 1, 0
0x344C	0xD7FA      	BRA         L_lcd_pwr391
;main.c,802 :: 		led_wr_str(1, 0, "OVERLOAD", 8);
0x344E	0x0E01      	MOVLW       1
0x3450	0x0103      	MOVLB       3
0x3452	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3454	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x3456	0x0E5A      	MOVLW       ?lstr70_main
0x3458	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x345A	0x0E01      	MOVLW       hi_addr(?lstr70_main)
0x345C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x345E	0x0E08      	MOVLW       8
0x3460	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3462	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,803 :: 		delay_ms(500);
0x3466	0x0E0B      	MOVLW       11
0x3468	0x6E0B      	MOVWF       R11, 0
0x346A	0x0E26      	MOVLW       38
0x346C	0x6E0C      	MOVWF       R12, 0
0x346E	0x0E5D      	MOVLW       93
0x3470	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr392:
0x3472	0x2E0D      	DECFSZ      R13, 1, 0
0x3474	0xD7FE      	BRA         L_lcd_pwr392
0x3476	0x2E0C      	DECFSZ      R12, 1, 0
0x3478	0xD7FC      	BRA         L_lcd_pwr392
0x347A	0x2E0B      	DECFSZ      R11, 1, 0
0x347C	0xD7FA      	BRA         L_lcd_pwr392
0x347E	0x0000      	NOP
0x3480	0x0000      	NOP
;main.c,804 :: 		asm CLRWDT;
0x3482	0x0004      	CLRWDT
;main.c,805 :: 		led_wr_str(1, 0, "        ", 8);
0x3484	0x0E01      	MOVLW       1
0x3486	0x0103      	MOVLB       3
0x3488	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x348A	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x348C	0x0E2D      	MOVLW       ?lstr71_main
0x348E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x3490	0x0E01      	MOVLW       hi_addr(?lstr71_main)
0x3492	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3494	0x0E08      	MOVLW       8
0x3496	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3498	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,806 :: 		delay_ms(300);
0x349C	0x0E07      	MOVLW       7
0x349E	0x6E0B      	MOVWF       R11, 0
0x34A0	0x0E17      	MOVLW       23
0x34A2	0x6E0C      	MOVWF       R12, 0
0x34A4	0x0E6A      	MOVLW       106
0x34A6	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr393:
0x34A8	0x2E0D      	DECFSZ      R13, 1, 0
0x34AA	0xD7FE      	BRA         L_lcd_pwr393
0x34AC	0x2E0C      	DECFSZ      R12, 1, 0
0x34AE	0xD7FC      	BRA         L_lcd_pwr393
0x34B0	0x2E0B      	DECFSZ      R11, 1, 0
0x34B2	0xD7FA      	BRA         L_lcd_pwr393
0x34B4	0x0000      	NOP
;main.c,807 :: 		asm CLRWDT;
0x34B6	0x0004      	CLRWDT
;main.c,808 :: 		led_wr_str(1, 0, "OVERLOAD", 8);
0x34B8	0x0E01      	MOVLW       1
0x34BA	0x0103      	MOVLB       3
0x34BC	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x34BE	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x34C0	0x0E08      	MOVLW       ?lstr72_main
0x34C2	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x34C4	0x0E01      	MOVLW       hi_addr(?lstr72_main)
0x34C6	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x34C8	0x0E08      	MOVLW       8
0x34CA	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x34CC	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,809 :: 		delay_ms(500);
0x34D0	0x0E0B      	MOVLW       11
0x34D2	0x6E0B      	MOVWF       R11, 0
0x34D4	0x0E26      	MOVLW       38
0x34D6	0x6E0C      	MOVWF       R12, 0
0x34D8	0x0E5D      	MOVLW       93
0x34DA	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr394:
0x34DC	0x2E0D      	DECFSZ      R13, 1, 0
0x34DE	0xD7FE      	BRA         L_lcd_pwr394
0x34E0	0x2E0C      	DECFSZ      R12, 1, 0
0x34E2	0xD7FC      	BRA         L_lcd_pwr394
0x34E4	0x2E0B      	DECFSZ      R11, 1, 0
0x34E6	0xD7FA      	BRA         L_lcd_pwr394
0x34E8	0x0000      	NOP
0x34EA	0x0000      	NOP
;main.c,810 :: 		asm CLRWDT;
0x34EC	0x0004      	CLRWDT
;main.c,811 :: 		led_wr_str(1, 0, "        ", 8);
0x34EE	0x0E01      	MOVLW       1
0x34F0	0x0103      	MOVLB       3
0x34F2	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x34F4	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x34F6	0x0EFF      	MOVLW       ?lstr73_main
0x34F8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x34FA	0x0E00      	MOVLW       hi_addr(?lstr73_main)
0x34FC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x34FE	0x0E08      	MOVLW       8
0x3500	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3502	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,812 :: 		delay_ms(300);
0x3506	0x0E07      	MOVLW       7
0x3508	0x6E0B      	MOVWF       R11, 0
0x350A	0x0E17      	MOVLW       23
0x350C	0x6E0C      	MOVWF       R12, 0
0x350E	0x0E6A      	MOVLW       106
0x3510	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr395:
0x3512	0x2E0D      	DECFSZ      R13, 1, 0
0x3514	0xD7FE      	BRA         L_lcd_pwr395
0x3516	0x2E0C      	DECFSZ      R12, 1, 0
0x3518	0xD7FC      	BRA         L_lcd_pwr395
0x351A	0x2E0B      	DECFSZ      R11, 1, 0
0x351C	0xD7FA      	BRA         L_lcd_pwr395
0x351E	0x0000      	NOP
;main.c,813 :: 		asm CLRWDT;
0x3520	0x0004      	CLRWDT
;main.c,814 :: 		led_wr_str(1, 0, "OVERLOAD", 8);
0x3522	0x0E01      	MOVLW       1
0x3524	0x0103      	MOVLB       3
0x3526	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3528	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x352A	0x0EF6      	MOVLW       ?lstr74_main
0x352C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x352E	0x0E00      	MOVLW       hi_addr(?lstr74_main)
0x3530	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3532	0x0E08      	MOVLW       8
0x3534	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3536	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,815 :: 		delay_ms(500);
0x353A	0x0E0B      	MOVLW       11
0x353C	0x6E0B      	MOVWF       R11, 0
0x353E	0x0E26      	MOVLW       38
0x3540	0x6E0C      	MOVWF       R12, 0
0x3542	0x0E5D      	MOVLW       93
0x3544	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr396:
0x3546	0x2E0D      	DECFSZ      R13, 1, 0
0x3548	0xD7FE      	BRA         L_lcd_pwr396
0x354A	0x2E0C      	DECFSZ      R12, 1, 0
0x354C	0xD7FC      	BRA         L_lcd_pwr396
0x354E	0x2E0B      	DECFSZ      R11, 1, 0
0x3550	0xD7FA      	BRA         L_lcd_pwr396
0x3552	0x0000      	NOP
0x3554	0x0000      	NOP
;main.c,816 :: 		asm CLRWDT;
0x3556	0x0004      	CLRWDT
;main.c,817 :: 		led_wr_str(1, 0, "        ", 8);
0x3558	0x0E01      	MOVLW       1
0x355A	0x0103      	MOVLB       3
0x355C	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x355E	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x3560	0x0E11      	MOVLW       ?lstr75_main
0x3562	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x3564	0x0E01      	MOVLW       hi_addr(?lstr75_main)
0x3566	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3568	0x0E08      	MOVLW       8
0x356A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x356C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,818 :: 		delay_ms(100);
0x3570	0x0E03      	MOVLW       3
0x3572	0x6E0B      	MOVWF       R11, 0
0x3574	0x0E08      	MOVLW       8
0x3576	0x6E0C      	MOVWF       R12, 0
0x3578	0x0E77      	MOVLW       119
0x357A	0x6E0D      	MOVWF       R13, 0
L_lcd_pwr397:
0x357C	0x2E0D      	DECFSZ      R13, 1, 0
0x357E	0xD7FE      	BRA         L_lcd_pwr397
0x3580	0x2E0C      	DECFSZ      R12, 1, 0
0x3582	0xD7FC      	BRA         L_lcd_pwr397
0x3584	0x2E0B      	DECFSZ      R11, 1, 0
0x3586	0xD7FA      	BRA         L_lcd_pwr397
;main.c,819 :: 		led_wr_str(1, 0, "SWR=    ", 8);
0x3588	0x0E01      	MOVLW       1
0x358A	0x0103      	MOVLB       3
0x358C	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x358E	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x3590	0x0E24      	MOVLW       ?lstr76_main
0x3592	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x3594	0x0E01      	MOVLW       hi_addr(?lstr76_main)
0x3596	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3598	0x0E08      	MOVLW       8
0x359A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x359C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,820 :: 		}
L_lcd_pwr390:
L_lcd_pwr389:
;main.c,821 :: 		asm CLRWDT;
0x35A0	0x0004      	CLRWDT
;main.c,822 :: 		SWR_old = 10000;
0x35A2	0x0E10      	MOVLW       16
0x35A4	0x0102      	MOVLB       2
0x35A6	0x6F89      	MOVWF       _SWR_old, 1
0x35A8	0x0E27      	MOVLW       39
0x35AA	0x6F8A      	MOVWF       _SWR_old+1, 1
;main.c,823 :: 		lcd_swr(SWR_fixed);
0x35AC	0xF341C33F  	MOVFF       lcd_pwr_SWR_fixed_L0, FARG_lcd_swr_swr
0x35B0	0xF342C340  	MOVFF       lcd_pwr_SWR_fixed_L0+1, FARG_lcd_swr_swr+1
0x35B4	0xF011ECA7  	CALL        _lcd_swr, 0
;main.c,824 :: 		}
L_lcd_pwr380:
;main.c,825 :: 		return;
;main.c,826 :: 		}
L_end_lcd_pwr:
0x35B8	0x0012      	RETURN      0
; end of _lcd_pwr
_show_reset:
;main.c,369 :: 		void show_reset() {
;main.c,370 :: 		atu_reset();
0x35BA	0xDCDB      	RCALL       _atu_reset
;main.c,371 :: 		SW = 1;
0x35BC	0x0E01      	MOVLW       1
0x35BE	0x0102      	MOVLB       2
0x35C0	0x6F73      	MOVWF       main_SW, 1
;main.c,372 :: 		set_sw(SW);
0x35C2	0x0E01      	MOVLW       1
0x35C4	0x0103      	MOVLB       3
0x35C6	0x6F39      	MOVWF       FARG_set_sw_SW, 1
0x35C8	0xDCC7      	RCALL       _set_sw
;main.c,373 :: 		EEPROM_Write(255 - mem_offset * 5, 0);
0x35CA	0x0E05      	MOVLW       5
0x35CC	0x0102      	MOVLB       2
0x35CE	0x0372      	MULWF       _mem_offset, 1
0x35D0	0xF000CFF3  	MOVFF       PRODL, R0
0x35D4	0x5000      	MOVF        R0, 0 
0x35D6	0x08FF      	SUBLW       255
0x35D8	0x0103      	MOVLB       3
0x35DA	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x35DC	0x6B3A      	CLRF        FARG_EEPROM_Write_data_, 1
0x35DE	0xDC9D      	RCALL       _EEPROM_Write
;main.c,374 :: 		EEPROM_Write(254 - mem_offset * 5, 0);
0x35E0	0x0E05      	MOVLW       5
0x35E2	0x0102      	MOVLB       2
0x35E4	0x0372      	MULWF       _mem_offset, 1
0x35E6	0xF000CFF3  	MOVFF       PRODL, R0
0x35EA	0x5000      	MOVF        R0, 0 
0x35EC	0x08FE      	SUBLW       254
0x35EE	0x0103      	MOVLB       3
0x35F0	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x35F2	0x6B3A      	CLRF        FARG_EEPROM_Write_data_, 1
0x35F4	0xDC92      	RCALL       _EEPROM_Write
;main.c,375 :: 		EEPROM_Write(253 - mem_offset * 5, 1);
0x35F6	0x0E05      	MOVLW       5
0x35F8	0x0102      	MOVLB       2
0x35FA	0x0372      	MULWF       _mem_offset, 1
0x35FC	0xF000CFF3  	MOVFF       PRODL, R0
0x3600	0x5000      	MOVF        R0, 0 
0x3602	0x08FD      	SUBLW       253
0x3604	0x0103      	MOVLB       3
0x3606	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x3608	0x0E01      	MOVLW       1
0x360A	0x6F3A      	MOVWF       FARG_EEPROM_Write_data_, 1
0x360C	0xDC86      	RCALL       _EEPROM_Write
;main.c,376 :: 		EEPROM_Write(252 - mem_offset * 5, 0);
0x360E	0x0E05      	MOVLW       5
0x3610	0x0102      	MOVLB       2
0x3612	0x0372      	MULWF       _mem_offset, 1
0x3614	0xF000CFF3  	MOVFF       PRODL, R0
0x3618	0x5000      	MOVF        R0, 0 
0x361A	0x08FC      	SUBLW       252
0x361C	0x0103      	MOVLB       3
0x361E	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x3620	0x6B3A      	CLRF        FARG_EEPROM_Write_data_, 1
0x3622	0xDC7B      	RCALL       _EEPROM_Write
;main.c,377 :: 		EEPROM_Write(251 - mem_offset * 5, 0);
0x3624	0x0E05      	MOVLW       5
0x3626	0x0102      	MOVLB       2
0x3628	0x0372      	MULWF       _mem_offset, 1
0x362A	0xF000CFF3  	MOVFF       PRODL, R0
0x362E	0x5000      	MOVF        R0, 0 
0x3630	0x08FB      	SUBLW       251
0x3632	0x0103      	MOVLB       3
0x3634	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x3636	0x6B3A      	CLRF        FARG_EEPROM_Write_data_, 1
0x3638	0xDC70      	RCALL       _EEPROM_Write
;main.c,378 :: 		lcd_ind();
0x363A	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,379 :: 		Loss_mode = 0;
0x363E	0x0102      	MOVLB       2
0x3640	0x6B74      	CLRF        _Loss_mode, 1
;main.c,381 :: 		n_Tx = 1;
0x3642	0x8C89      	BSF         LATA6_bit, BitPos(LATA6_bit+0) 
;main.c,382 :: 		SWR = 0;
0x3644	0x6BD8      	CLRF        _SWR, 1
0x3646	0x6BD9      	CLRF        _SWR+1, 1
;main.c,383 :: 		PWR = 0;
0x3648	0x6BD5      	CLRF        _PWR, 1
0x364A	0x6BD6      	CLRF        _PWR+1, 1
;main.c,384 :: 		SWR_fixed_old = 0;
0x364C	0x6B5E      	CLRF        _SWR_fixed_old, 1
0x364E	0x6B5F      	CLRF        _SWR_fixed_old+1, 1
;main.c,385 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x3650	0x51D7      	MOVF        _type, 0, 1
0x3652	0x0A04      	XORLW       4
0x3654	0x0E01      	MOVLW       1
0x3656	0xA4D8      	BTFSS       STATUS, 2 
0x3658	0x0E00      	MOVLW       0
0x365A	0x6E01      	MOVWF       R1 
0x365C	0x51D7      	MOVF        _type, 0, 1
0x365E	0x0A05      	XORLW       5
0x3660	0x0E01      	MOVLW       1
0x3662	0xA4D8      	BTFSS       STATUS, 2 
0x3664	0x0E00      	MOVLW       0
0x3666	0x6E00      	MOVWF       R0 
0x3668	0x5001      	MOVF        R1, 0 
0x366A	0x1200      	IORWF       R0, 1 
0x366C	0xE02B      	BZ          L_show_reset259
;main.c,386 :: 		led_wr_str(2, 16, "RESET   ", 8);
0x366E	0x0E02      	MOVLW       2
0x3670	0x0103      	MOVLB       3
0x3672	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3674	0x0E10      	MOVLW       16
0x3676	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x3678	0x0E69      	MOVLW       ?lstr22_main
0x367A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x367C	0x0E02      	MOVLW       hi_addr(?lstr22_main)
0x367E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3680	0x0E08      	MOVLW       8
0x3682	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3684	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,387 :: 		asm CLRWDT;
0x3688	0x0004      	CLRWDT
;main.c,388 :: 		delay_ms(600);
0x368A	0x0E0D      	MOVLW       13
0x368C	0x6E0B      	MOVWF       R11, 0
0x368E	0x0E2D      	MOVLW       45
0x3690	0x6E0C      	MOVWF       R12, 0
0x3692	0x0ED7      	MOVLW       215
0x3694	0x6E0D      	MOVWF       R13, 0
L_show_reset260:
0x3696	0x2E0D      	DECFSZ      R13, 1, 0
0x3698	0xD7FE      	BRA         L_show_reset260
0x369A	0x2E0C      	DECFSZ      R12, 1, 0
0x369C	0xD7FC      	BRA         L_show_reset260
0x369E	0x2E0B      	DECFSZ      R11, 1, 0
0x36A0	0xD7FA      	BRA         L_show_reset260
0x36A2	0x0000      	NOP
0x36A4	0x0000      	NOP
;main.c,389 :: 		led_wr_str(2, 16, "SWR=0.00", 8);
0x36A6	0x0E02      	MOVLW       2
0x36A8	0x0103      	MOVLB       3
0x36AA	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x36AC	0x0E10      	MOVLW       16
0x36AE	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x36B0	0x0E60      	MOVLW       ?lstr23_main
0x36B2	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x36B4	0x0E02      	MOVLW       hi_addr(?lstr23_main)
0x36B6	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x36B8	0x0E08      	MOVLW       8
0x36BA	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x36BC	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,390 :: 		asm CLRWDT;
0x36C0	0x0004      	CLRWDT
;main.c,391 :: 		} else if (type != 0) { // 1602 LCD & 128*32 OLED
0x36C2	0xD02F      	BRA         L_show_reset261
L_show_reset259:
0x36C4	0x0102      	MOVLB       2
0x36C6	0x51D7      	MOVF        _type, 0, 1
0x36C8	0x0A00      	XORLW       0
0x36CA	0xE029      	BZ          L_show_reset262
;main.c,392 :: 		led_wr_str(1, 0, "RESET   ", 8);
0x36CC	0x0E01      	MOVLW       1
0x36CE	0x0103      	MOVLB       3
0x36D0	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x36D2	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x36D4	0x0E80      	MOVLW       ?lstr24_main
0x36D6	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x36D8	0x0E02      	MOVLW       hi_addr(?lstr24_main)
0x36DA	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x36DC	0x0E08      	MOVLW       8
0x36DE	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x36E0	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,393 :: 		asm CLRWDT;
0x36E4	0x0004      	CLRWDT
;main.c,394 :: 		delay_ms(600);
0x36E6	0x0E0D      	MOVLW       13
0x36E8	0x6E0B      	MOVWF       R11, 0
0x36EA	0x0E2D      	MOVLW       45
0x36EC	0x6E0C      	MOVWF       R12, 0
0x36EE	0x0ED7      	MOVLW       215
0x36F0	0x6E0D      	MOVWF       R13, 0
L_show_reset263:
0x36F2	0x2E0D      	DECFSZ      R13, 1, 0
0x36F4	0xD7FE      	BRA         L_show_reset263
0x36F6	0x2E0C      	DECFSZ      R12, 1, 0
0x36F8	0xD7FC      	BRA         L_show_reset263
0x36FA	0x2E0B      	DECFSZ      R11, 1, 0
0x36FC	0xD7FA      	BRA         L_show_reset263
0x36FE	0x0000      	NOP
0x3700	0x0000      	NOP
;main.c,395 :: 		led_wr_str(1, 0, "SWR=0.00", 8);
0x3702	0x0E01      	MOVLW       1
0x3704	0x0103      	MOVLB       3
0x3706	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x3708	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x370A	0x0E77      	MOVLW       ?lstr25_main
0x370C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x370E	0x0E02      	MOVLW       hi_addr(?lstr25_main)
0x3710	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x3712	0x0E08      	MOVLW       8
0x3714	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x3716	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,396 :: 		asm CLRWDT;
0x371A	0x0004      	CLRWDT
;main.c,397 :: 		} else {
0x371C	0xD002      	BRA         L_show_reset264
L_show_reset262:
;main.c,398 :: 		LATB.B6 = 1;
0x371E	0x8C8A      	BSF         LATB, 6 
;main.c,399 :: 		LATB.B7 = 1;
0x3720	0x8E8A      	BSF         LATB, 7 
;main.c,400 :: 		}
L_show_reset264:
L_show_reset261:
;main.c,401 :: 		SWR_old = 10000;
0x3722	0x0E10      	MOVLW       16
0x3724	0x0102      	MOVLB       2
0x3726	0x6F89      	MOVWF       _SWR_old, 1
0x3728	0x0E27      	MOVLW       39
0x372A	0x6F8A      	MOVWF       _SWR_old+1, 1
;main.c,402 :: 		Power_old = 10000;
0x372C	0x0E10      	MOVLW       16
0x372E	0x6F8C      	MOVWF       _Power_old, 1
0x3730	0x0E27      	MOVLW       39
0x3732	0x6F8D      	MOVWF       _Power_old+1, 1
;main.c,403 :: 		lcd_pwr();
0x3734	0xDC2F      	RCALL       _lcd_pwr
;main.c,404 :: 		return;
;main.c,405 :: 		}
L_end_show_reset:
0x3736	0x0012      	RETURN      0
; end of _show_reset
_Div_16x16_S_L:
;__Lib_Math.c,139 :: 		
;__Lib_Math.c,146 :: 		
0x3738	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,147 :: 		
0x373A	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,148 :: 		
0x373C	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,149 :: 		
0x373E	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,150 :: 		
0x3740	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,151 :: 		
0x3742	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,152 :: 		
0x3744	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,153 :: 		
0x3746	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,154 :: 		
0x3748	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,155 :: 		
0x374A	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,156 :: 		
0x374C	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,158 :: 		
0x374E	0x0E0F      	MOVLW       15
;__Lib_Math.c,159 :: 		
0x3750	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,161 :: 		
0x3752	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,162 :: 		
0x3754	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,163 :: 		
0x3756	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,164 :: 		
0x3758	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,166 :: 		
0x375A	0xA000      	BTFSS       R0, 0, 0
;__Lib_Math.c,167 :: 		
0x375C	0xD006      	BRA         $+14
;__Lib_Math.c,168 :: 		
0x375E	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,169 :: 		
0x3760	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,170 :: 		
0x3762	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,171 :: 		
0x3764	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,172 :: 		
0x3766	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,173 :: 		
0x3768	0xD005      	BRA         $+12
;__Lib_Math.c,175 :: 		
0x376A	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,176 :: 		
0x376C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,177 :: 		
0x376E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,178 :: 		
0x3770	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,179 :: 		
0x3772	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,181 :: 		
0x3774	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,182 :: 		
0x3776	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,184 :: 		
0x3778	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,185 :: 		
0x377A	0xD7EB      	BRA         $-40
;__Lib_Math.c,187 :: 		
0x377C	0xB000      	BTFSC       R0, 0, 0
;__Lib_Math.c,188 :: 		
0x377E	0xD006      	BRA         $+14
;__Lib_Math.c,189 :: 		
0x3780	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,190 :: 		
0x3782	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,191 :: 		
0x3784	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,192 :: 		
0x3786	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,193 :: 		
0x3788	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,194 :: 		
0x378A	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,195 :: 		
0x378C	0x0000      	NOP
;__Lib_Math.c,197 :: 		
L_end_Div_16x16_S_L:
0x378E	0x0012      	RETURN      0
; end of _Div_16x16_S_L
_Div_16x16_S:
;__Lib_Math.c,200 :: 		
;__Lib_Math.c,208 :: 		
0x3790	0x5004      	MOVF        R4, 0 
0x3792	0x0A00      	XORLW       0
0x3794	0xE108      	BNZ         L_Div_16x16_S0
;__Lib_Math.c,209 :: 		
0x3796	0x5005      	MOVF        R5, 0 
0x3798	0x0A00      	XORLW       0
0x379A	0xE105      	BNZ         L_Div_16x16_S1
;__Lib_Math.c,210 :: 		
0x379C	0x0EFF      	MOVLW       255
0x379E	0x6E00      	MOVWF       R0 
;__Lib_Math.c,211 :: 		
0x37A0	0x0E7F      	MOVLW       127
0x37A2	0x6E01      	MOVWF       R1 
;__Lib_Math.c,212 :: 		
0x37A4	0xD057      	BRA         L_end_Div_16x16_S
;__Lib_Math.c,213 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,216 :: 		
0x37A6	0x6A0D      	CLRF        R13, 0
;__Lib_Math.c,217 :: 		
0x37A8	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,218 :: 		
0x37AA	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,219 :: 		
0x37AC	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,220 :: 		
0x37AE	0x1000      	IORWF       R0, 0, 0
;__Lib_Math.c,221 :: 		
0x37B0	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,222 :: 		
0x37B2	0x0C00      	RETLW       0
;__Lib_Math.c,224 :: 		
0x37B4	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,225 :: 		
0x37B6	0x1805      	XORWF       R5, 0, 0
;__Lib_Math.c,226 :: 		
0x37B8	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,227 :: 		
0x37BA	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,228 :: 		
0x37BC	0x1E0D      	COMF        R13, 1, 0
;__Lib_Math.c,230 :: 		
0x37BE	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,232 :: 		
0x37C0	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,233 :: 		
0x37C2	0xD005      	BRA         $+12
;__Lib_Math.c,235 :: 		
0x37C4	0x1E04      	COMF        R4, 1, 0
;__Lib_Math.c,236 :: 		
0x37C6	0x1E05      	COMF        R5, 1, 0
;__Lib_Math.c,237 :: 		
0x37C8	0x2A04      	INCF        R4, 1, 0
;__Lib_Math.c,238 :: 		
0x37CA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,239 :: 		
0x37CC	0x2A05      	INCF        R5, 1, 0
;__Lib_Math.c,241 :: 		
0x37CE	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,242 :: 		
0x37D0	0xD005      	BRA         $+12
;__Lib_Math.c,244 :: 		
0x37D2	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,245 :: 		
0x37D4	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,246 :: 		
0x37D6	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,247 :: 		
0x37D8	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,248 :: 		
0x37DA	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,250 :: 		
0x37DC	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,251 :: 		
0x37DE	0x1005      	IORWF       R5, 0, 0
;__Lib_Math.c,252 :: 		
0x37E0	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,253 :: 		
0x37E2	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,254 :: 		
0x37E4	0xD010      	BRA         $+34
;__Lib_Math.c,256 :: 		
0x37E6	0xDFA8      	RCALL       _Div_16x16_S_L
;__Lib_Math.c,258 :: 		
0x37E8	0xB00B      	BTFSC       R11, 0, 0
;__Lib_Math.c,259 :: 		
0x37EA	0xD020      	BRA         $+66
;__Lib_Math.c,261 :: 		
0x37EC	0xAE0D      	BTFSS       R13, 7, 0
;__Lib_Math.c,262 :: 		
0x37EE	0x0C00      	RETLW       0
;__Lib_Math.c,264 :: 		
0x37F0	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,265 :: 		
0x37F2	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,266 :: 		
0x37F4	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,267 :: 		
0x37F6	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,268 :: 		
0x37F8	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,270 :: 		
0x37FA	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,271 :: 		
0x37FC	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,272 :: 		
0x37FE	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,273 :: 		
0x3800	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,274 :: 		
0x3802	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,276 :: 		
0x3804	0x0C00      	RETLW       0
;__Lib_Math.c,278 :: 		
0x3806	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,279 :: 		
0x3808	0xD00D      	BRA         $+28
;__Lib_Math.c,280 :: 		
0x380A	0xBE01      	BTFSC       R1, 7, 0
;__Lib_Math.c,281 :: 		
0x380C	0xD007      	BRA         $+16
;__Lib_Math.c,282 :: 		
0x380E	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,283 :: 		
0x3810	0x6E09      	MOVWF       R9, 0
;__Lib_Math.c,284 :: 		
0x3812	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,285 :: 		
0x3814	0x6E08      	MOVWF       R8, 0
;__Lib_Math.c,286 :: 		
0x3816	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,287 :: 		
0x3818	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,288 :: 		
0x381A	0xD7E8      	BRA         $-46
;__Lib_Math.c,289 :: 		
0x381C	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,290 :: 		
0x381E	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,291 :: 		
0x3820	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,292 :: 		
0x3822	0x0C00      	RETLW       0
;__Lib_Math.c,294 :: 		
0x3824	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,295 :: 		
0x3826	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,296 :: 		
0x3828	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,297 :: 		
0x382A	0xD7DD      	BRA         $-68
;__Lib_Math.c,299 :: 		
0x382C	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,300 :: 		
0x382E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,301 :: 		
0x3830	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,302 :: 		
0x3832	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,303 :: 		
0x3834	0x5C08      	SUBWF       R8, 0, 0
;__Lib_Math.c,304 :: 		
0x3836	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,305 :: 		
0x3838	0xD7D9      	BRA         $-76
;__Lib_Math.c,306 :: 		
0x383A	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,307 :: 		
0x383C	0x5C09      	SUBWF       R9, 0, 0
;__Lib_Math.c,308 :: 		
0x383E	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,309 :: 		
0x3840	0xD7D5      	BRA         $-84
;__Lib_Math.c,310 :: 		
0x3842	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,311 :: 		
0x3844	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,312 :: 		
0x3846	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,313 :: 		
0x3848	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,314 :: 		
0x384A	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,315 :: 		
0x384C	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,316 :: 		
0x384E	0xD7CE      	BRA         $-98
;__Lib_Math.c,317 :: 		
0x3850	0x0000      	NOP
;__Lib_Math.c,318 :: 		
0x3852	0x0CFF      	RETLW       255
;__Lib_Math.c,320 :: 		
L_end_Div_16x16_S:
0x3854	0x0012      	RETURN      0
; end of _Div_16x16_S
_get_swr:
;main.h,138 :: 		void get_swr() {
;main.h,139 :: 		get_pwr();
0x3856	0xF010EC3A  	CALL        _get_pwr, 0
;main.h,140 :: 		if (p_cnt != 100)
0x385A	0x0102      	MOVLB       2
0x385C	0x518B      	MOVF        _p_cnt, 0, 1
0x385E	0x0A64      	XORLW       100
0x3860	0xE010      	BZ          L_get_swr38
;main.h,142 :: 		p_cnt += 1;
0x3862	0x2B8B      	INCF        _p_cnt, 1, 1
;main.h,143 :: 		if (PWR > P_max)
0x3864	0x0E80      	MOVLW       128
0x3866	0x19DD      	XORWF       _P_max+1, 0, 1
0x3868	0x6E00      	MOVWF       R0 
0x386A	0x0E80      	MOVLW       128
0x386C	0x19D6      	XORWF       _PWR+1, 0, 1
0x386E	0x5C00      	SUBWF       R0, 0 
0x3870	0xE102      	BNZ         L__get_swr489
0x3872	0x51D5      	MOVF        _PWR, 0, 1
0x3874	0x5DDC      	SUBWF       _P_max, 0, 1
L__get_swr489:
0x3876	0xE204      	BC          L_get_swr39
;main.h,144 :: 		P_max = PWR;
0x3878	0xF2DCC2D5  	MOVFF       _PWR, _P_max
0x387C	0xF2DDC2D6  	MOVFF       _PWR+1, _P_max+1
L_get_swr39:
;main.h,145 :: 		}
0x3880	0xD00E      	BRA         L_get_swr40
L_get_swr38:
;main.h,148 :: 		p_cnt = 0;
0x3882	0x6B8B      	CLRF        _p_cnt, 1
;main.h,149 :: 		show_pwr(P_max, SWR); // raz na 100 pomiarów pokazuje maksymalną wartość mocy
0x3884	0xF341C2DC  	MOVFF       _P_max, FARG_show_pwr_Power
0x3888	0xF342C2DD  	MOVFF       _P_max+1, FARG_show_pwr_Power+1
0x388C	0xF343C2D8  	MOVFF       _SWR, FARG_show_pwr_SWR
0x3890	0xF344C2D9  	MOVFF       _SWR+1, FARG_show_pwr_SWR+1
0x3894	0xF012ECC0  	CALL        _show_pwr, 0
;main.h,150 :: 		P_max = 0;
0x3898	0x0102      	MOVLB       2
0x389A	0x6BDC      	CLRF        _P_max, 1
0x389C	0x6BDD      	CLRF        _P_max+1, 1
;main.h,151 :: 		}
L_get_swr40:
;main.h,152 :: 		while (PWR < min_for_start | (PWR > max_for_start & max_for_start > 0))
L_get_swr41:
0x389E	0x0102      	MOVLB       2
0x38A0	0x0E80      	MOVLW       128
0x38A2	0x19D6      	XORWF       _PWR+1, 0, 1
0x38A4	0x6E02      	MOVWF       R2 
0x38A6	0x0E80      	MOVLW       128
0x38A8	0x19DB      	XORWF       main_min_for_start+1, 0, 1
0x38AA	0x5C02      	SUBWF       R2, 0 
0x38AC	0xE102      	BNZ         L__get_swr490
0x38AE	0x51DA      	MOVF        main_min_for_start, 0, 1
0x38B0	0x5DD5      	SUBWF       _PWR, 0, 1
L__get_swr490:
0x38B2	0x0E01      	MOVLW       1
0x38B4	0xB0D8      	BTFSC       STATUS, 0 
0x38B6	0x0E00      	MOVLW       0
0x38B8	0x6E02      	MOVWF       R2 
0x38BA	0x0E80      	MOVLW       128
0x38BC	0x19DF      	XORWF       main_max_for_start+1, 0, 1
0x38BE	0x6E01      	MOVWF       R1 
0x38C0	0x0E80      	MOVLW       128
0x38C2	0x19D6      	XORWF       _PWR+1, 0, 1
0x38C4	0x5C01      	SUBWF       R1, 0 
0x38C6	0xE102      	BNZ         L__get_swr491
0x38C8	0x51D5      	MOVF        _PWR, 0, 1
0x38CA	0x5DDE      	SUBWF       main_max_for_start, 0, 1
L__get_swr491:
0x38CC	0x0E01      	MOVLW       1
0x38CE	0xB0D8      	BTFSC       STATUS, 0 
0x38D0	0x0E00      	MOVLW       0
0x38D2	0x6E01      	MOVWF       R1 
0x38D4	0x0E80      	MOVLW       128
0x38D6	0x6E00      	MOVWF       R0 
0x38D8	0x0E80      	MOVLW       128
0x38DA	0x19DF      	XORWF       main_max_for_start+1, 0, 1
0x38DC	0x5C00      	SUBWF       R0, 0 
0x38DE	0xE102      	BNZ         L__get_swr492
0x38E0	0x51DE      	MOVF        main_max_for_start, 0, 1
0x38E2	0x0800      	SUBLW       0
L__get_swr492:
0x38E4	0x0E01      	MOVLW       1
0x38E6	0xB0D8      	BTFSC       STATUS, 0 
0x38E8	0x0E00      	MOVLW       0
0x38EA	0x6E00      	MOVWF       R0 
0x38EC	0x5001      	MOVF        R1, 0 
0x38EE	0x1600      	ANDWF       R0, 1 
0x38F0	0x5002      	MOVF        R2, 0 
0x38F2	0x1200      	IORWF       R0, 1 
0x38F4	0xE051      	BZ          L_get_swr42
;main.h,154 :: 		asm CLRWDT;
0x38F6	0x0004      	CLRWDT
;main.h,155 :: 		get_pwr();
0x38F8	0xF010EC3A  	CALL        _get_pwr, 0
;main.h,156 :: 		if (p_cnt != 100)
0x38FC	0x0102      	MOVLB       2
0x38FE	0x518B      	MOVF        _p_cnt, 0, 1
0x3900	0x0A64      	XORLW       100
0x3902	0xE010      	BZ          L_get_swr43
;main.h,158 :: 		p_cnt += 1;
0x3904	0x2B8B      	INCF        _p_cnt, 1, 1
;main.h,159 :: 		if (PWR > P_max)
0x3906	0x0E80      	MOVLW       128
0x3908	0x19DD      	XORWF       _P_max+1, 0, 1
0x390A	0x6E00      	MOVWF       R0 
0x390C	0x0E80      	MOVLW       128
0x390E	0x19D6      	XORWF       _PWR+1, 0, 1
0x3910	0x5C00      	SUBWF       R0, 0 
0x3912	0xE102      	BNZ         L__get_swr493
0x3914	0x51D5      	MOVF        _PWR, 0, 1
0x3916	0x5DDC      	SUBWF       _P_max, 0, 1
L__get_swr493:
0x3918	0xE204      	BC          L_get_swr44
;main.h,160 :: 		P_max = PWR;
0x391A	0xF2DCC2D5  	MOVFF       _PWR, _P_max
0x391E	0xF2DDC2D6  	MOVFF       _PWR+1, _P_max+1
L_get_swr44:
;main.h,161 :: 		}
0x3922	0xD00E      	BRA         L_get_swr45
L_get_swr43:
;main.h,164 :: 		p_cnt = 0;
0x3924	0x6B8B      	CLRF        _p_cnt, 1
;main.h,165 :: 		show_pwr(P_max, SWR);
0x3926	0xF341C2DC  	MOVFF       _P_max, FARG_show_pwr_Power
0x392A	0xF342C2DD  	MOVFF       _P_max+1, FARG_show_pwr_Power+1
0x392E	0xF343C2D8  	MOVFF       _SWR, FARG_show_pwr_SWR
0x3932	0xF344C2D9  	MOVFF       _SWR+1, FARG_show_pwr_SWR+1
0x3936	0xF012ECC0  	CALL        _show_pwr, 0
;main.h,166 :: 		P_max = 0;
0x393A	0x0102      	MOVLB       2
0x393C	0x6BDC      	CLRF        _P_max, 1
0x393E	0x6BDD      	CLRF        _P_max+1, 1
;main.h,167 :: 		}
L_get_swr45:
;main.h,169 :: 		if (Button( & PORTB, 0, 5, 1))
0x3940	0x0E81      	MOVLW       PORTB
0x3942	0x0103      	MOVLB       3
0x3944	0x6F5F      	MOVWF       FARG_Button_port, 1
0x3946	0x0E0F      	MOVLW       hi_addr(PORTB)
0x3948	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x394A	0x6B61      	CLRF        FARG_Button_pin, 1
0x394C	0x0E05      	MOVLW       5
0x394E	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x3950	0x0E01      	MOVLW       1
0x3952	0x6F63      	MOVWF       FARG_Button_active_state, 1
0x3954	0xF00AEC41  	CALL        _Button, 0
0x3958	0x5200      	MOVF        R0, 1 
0x395A	0xE003      	BZ          L_get_swr46
;main.h,170 :: 		rready = 1;
0x395C	0x0E01      	MOVLW       1
0x395E	0x0102      	MOVLB       2
0x3960	0x6F76      	MOVWF       _rready, 1
L_get_swr46:
0x3962	0x0102      	MOVLB       2
;main.h,171 :: 		if (rready == 1 & Button( & PORTB, 0, 5, 0))
0x3964	0x5176      	MOVF        _rready, 0, 1
0x3966	0x0A01      	XORLW       1
0x3968	0x0E01      	MOVLW       1
0x396A	0xA4D8      	BTFSS       STATUS, 2 
0x396C	0x0E00      	MOVLW       0
0x396E	0x0103      	MOVLB       3
0x3970	0x6F38      	MOVWF       FLOC__get_swr, 1
0x3972	0x0E81      	MOVLW       PORTB
0x3974	0x6F5F      	MOVWF       FARG_Button_port, 1
0x3976	0x0E0F      	MOVLW       hi_addr(PORTB)
0x3978	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x397A	0x6B61      	CLRF        FARG_Button_pin, 1
0x397C	0x0E05      	MOVLW       5
0x397E	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x3980	0x6B63      	CLRF        FARG_Button_active_state, 1
0x3982	0xF00AEC41  	CALL        _Button, 0
0x3986	0x5138      	MOVF        FLOC__get_swr, 0, 1
0x3988	0x1600      	ANDWF       R0, 1 
0x398A	0xE005      	BZ          L_get_swr47
;main.h,173 :: 		show_reset();
0x398C	0xDE16      	RCALL       _show_reset
;main.h,174 :: 		SWR = 0;	// wskaźnik przerwania oczekiwania na właściwą moc - reset
0x398E	0x0102      	MOVLB       2
0x3990	0x6BD8      	CLRF        _SWR, 1
0x3992	0x6BD9      	CLRF        _SWR+1, 1
;main.h,175 :: 		return;
0x3994	0xD001      	BRA         L_end_get_swr
;main.h,176 :: 		}
L_get_swr47:
;main.h,177 :: 		} //  good power
0x3996	0xD783      	BRA         L_get_swr41
L_get_swr42:
;main.h,178 :: 		return;
;main.h,179 :: 		}
L_end_get_swr:
0x3998	0x0012      	RETURN      0
; end of _get_swr
_coarse_cap:
;main.h,237 :: 		void coarse_cap() {
;main.h,238 :: 		char step = 3;
0x399A	0x0E03      	MOVLW       3
0x399C	0x0103      	MOVLB       3
0x399E	0x6F37      	MOVWF       coarse_cap_step_L0, 1
;main.h,242 :: 		cap = 0;
0x39A0	0x0102      	MOVLB       2
0x39A2	0x6B5D      	CLRF        main_cap, 1
;main.h,243 :: 		set_cap(cap);
0x39A4	0x0103      	MOVLB       3
0x39A6	0x6B41      	CLRF        FARG_set_cap_Cap, 1
0x39A8	0xF012EC5F  	CALL        _set_cap, 0
;main.h,244 :: 		step_cap = step;
0x39AC	0xF2A8C337  	MOVFF       coarse_cap_step_L0, main_step_cap
;main.h,245 :: 		get_swr();
0x39B0	0xDF52      	RCALL       _get_swr
;main.h,246 :: 		if (SWR == 0)
0x39B2	0x0E00      	MOVLW       0
0x39B4	0x0102      	MOVLB       2
0x39B6	0x19D9      	XORWF       _SWR+1, 0, 1
0x39B8	0xE102      	BNZ         L__coarse_cap544
0x39BA	0x0E00      	MOVLW       0
0x39BC	0x19D8      	XORWF       _SWR, 0, 1
L__coarse_cap544:
0x39BE	0xE101      	BNZ         L_coarse_cap52
;main.h,247 :: 		return;
0x39C0	0xD090      	BRA         L_end_coarse_cap
L_coarse_cap52:
;main.h,248 :: 		min_swr = SWR + SWR / 20;
0x39C2	0x0E14      	MOVLW       20
0x39C4	0x6E04      	MOVWF       R4 
0x39C6	0x0E00      	MOVLW       0
0x39C8	0x6E05      	MOVWF       R5 
0x39CA	0xF000C2D8  	MOVFF       _SWR, R0
0x39CE	0xF001C2D9  	MOVFF       _SWR+1, R1
0x39D2	0xDEDE      	RCALL       _Div_16x16_S
0x39D4	0x5000      	MOVF        R0, 0 
0x39D6	0x0102      	MOVLB       2
0x39D8	0x25D8      	ADDWF       _SWR, 0, 1
0x39DA	0x0103      	MOVLB       3
0x39DC	0x6F35      	MOVWF       coarse_cap_min_swr_L0, 1
0x39DE	0x5001      	MOVF        R1, 0 
0x39E0	0x0102      	MOVLB       2
0x39E2	0x21D9      	ADDWFC      _SWR+1, 0, 1
0x39E4	0x0103      	MOVLB       3
0x39E6	0x6F36      	MOVWF       coarse_cap_min_swr_L0+1, 1
;main.h,249 :: 		for (count = step; count <= 31;) {
0x39E8	0xF334C337  	MOVFF       coarse_cap_step_L0, coarse_cap_count_L0
L_coarse_cap53:
0x39EC	0x0103      	MOVLB       3
0x39EE	0x5134      	MOVF        coarse_cap_count_L0, 0, 1
0x39F0	0x081F      	SUBLW       31
0x39F2	0xA0D8      	BTFSS       STATUS, 0 
0x39F4	0xD072      	BRA         L_coarse_cap54
;main.h,250 :: 		set_cap(count * C_mult);
0x39F6	0x5134      	MOVF        coarse_cap_count_L0, 0, 1
0x39F8	0x0102      	MOVLB       2
0x39FA	0x03A7      	MULWF       main_C_mult, 1
0x39FC	0xF341CFF3  	MOVFF       PRODL, FARG_set_cap_Cap
0x3A00	0xF012EC5F  	CALL        _set_cap, 0
;main.h,251 :: 		get_swr();
0x3A04	0xDF28      	RCALL       _get_swr
;main.h,252 :: 		if (SWR == 0)
0x3A06	0x0E00      	MOVLW       0
0x3A08	0x0102      	MOVLB       2
0x3A0A	0x19D9      	XORWF       _SWR+1, 0, 1
0x3A0C	0xE102      	BNZ         L__coarse_cap545
0x3A0E	0x0E00      	MOVLW       0
0x3A10	0x19D8      	XORWF       _SWR, 0, 1
L__coarse_cap545:
0x3A12	0xE101      	BNZ         L_coarse_cap56
;main.h,253 :: 		return;
0x3A14	0xD066      	BRA         L_end_coarse_cap
L_coarse_cap56:
;main.h,254 :: 		if (SWR < min_swr) {
0x3A16	0x0E80      	MOVLW       128
0x3A18	0x19D9      	XORWF       _SWR+1, 0, 1
0x3A1A	0x6E00      	MOVWF       R0 
0x3A1C	0x0E80      	MOVLW       128
0x3A1E	0x0103      	MOVLB       3
0x3A20	0x1936      	XORWF       coarse_cap_min_swr_L0+1, 0, 1
0x3A22	0x5C00      	SUBWF       R0, 0 
0x3A24	0xE103      	BNZ         L__coarse_cap546
0x3A26	0x5135      	MOVF        coarse_cap_min_swr_L0, 0, 1
0x3A28	0x0102      	MOVLB       2
0x3A2A	0x5DD8      	SUBWF       _SWR, 0, 1
L__coarse_cap546:
0x3A2C	0xE254      	BC          L_coarse_cap57
;main.h,255 :: 		min_swr = SWR + SWR / 20;
0x3A2E	0x0E14      	MOVLW       20
0x3A30	0x6E04      	MOVWF       R4 
0x3A32	0x0E00      	MOVLW       0
0x3A34	0x6E05      	MOVWF       R5 
0x3A36	0xF000C2D8  	MOVFF       _SWR, R0
0x3A3A	0xF001C2D9  	MOVFF       _SWR+1, R1
0x3A3E	0xDEA8      	RCALL       _Div_16x16_S
0x3A40	0x5000      	MOVF        R0, 0 
0x3A42	0x0102      	MOVLB       2
0x3A44	0x25D8      	ADDWF       _SWR, 0, 1
0x3A46	0x0103      	MOVLB       3
0x3A48	0x6F35      	MOVWF       coarse_cap_min_swr_L0, 1
0x3A4A	0x5001      	MOVF        R1, 0 
0x3A4C	0x0102      	MOVLB       2
0x3A4E	0x21D9      	ADDWFC      _SWR+1, 0, 1
0x3A50	0x0103      	MOVLB       3
0x3A52	0x6F36      	MOVWF       coarse_cap_min_swr_L0+1, 1
;main.h,256 :: 		cap = count * C_mult;
0x3A54	0x5134      	MOVF        coarse_cap_count_L0, 0, 1
0x3A56	0x0102      	MOVLB       2
0x3A58	0x03A7      	MULWF       main_C_mult, 1
0x3A5A	0xF25DCFF3  	MOVFF       PRODL, main_cap
;main.h,257 :: 		step_cap = step;
0x3A5E	0xF2A8C337  	MOVFF       coarse_cap_step_L0, main_step_cap
;main.h,258 :: 		if (SWR < 120)
0x3A62	0x0E80      	MOVLW       128
0x3A64	0x19D9      	XORWF       _SWR+1, 0, 1
0x3A66	0x6E00      	MOVWF       R0 
0x3A68	0x0E80      	MOVLW       128
0x3A6A	0x5C00      	SUBWF       R0, 0 
0x3A6C	0xE102      	BNZ         L__coarse_cap547
0x3A6E	0x0E78      	MOVLW       120
0x3A70	0x5DD8      	SUBWF       _SWR, 0, 1
L__coarse_cap547:
0x3A72	0xE201      	BC          L_coarse_cap58
;main.h,259 :: 		break;
0x3A74	0xD032      	BRA         L_coarse_cap54
L_coarse_cap58:
;main.h,260 :: 		count += step;
0x3A76	0x0103      	MOVLB       3
0x3A78	0x5137      	MOVF        coarse_cap_step_L0, 0, 1
0x3A7A	0x2534      	ADDWF       coarse_cap_count_L0, 0, 1
0x3A7C	0x6E02      	MOVWF       R2 
0x3A7E	0xF334C002  	MOVFF       R2, coarse_cap_count_L0
;main.h,261 :: 		if (C_linear == 0 & count == 9)
0x3A82	0x0102      	MOVLB       2
0x3A84	0x51AE      	MOVF        main_C_linear, 0, 1
0x3A86	0x0A00      	XORLW       0
0x3A88	0x0E01      	MOVLW       1
0x3A8A	0xA4D8      	BTFSS       STATUS, 2 
0x3A8C	0x0E00      	MOVLW       0
0x3A8E	0x6E01      	MOVWF       R1 
0x3A90	0x5002      	MOVF        R2, 0 
0x3A92	0x0A09      	XORLW       9
0x3A94	0x0E01      	MOVLW       1
0x3A96	0xA4D8      	BTFSS       STATUS, 2 
0x3A98	0x0E00      	MOVLW       0
0x3A9A	0x6E00      	MOVWF       R0 
0x3A9C	0x5001      	MOVF        R1, 0 
0x3A9E	0x1600      	ANDWF       R0, 1 
0x3AA0	0xE004      	BZ          L_coarse_cap59
;main.h,262 :: 		count = 8;
0x3AA2	0x0E08      	MOVLW       8
0x3AA4	0x0103      	MOVLB       3
0x3AA6	0x6F34      	MOVWF       coarse_cap_count_L0, 1
0x3AA8	0xD015      	BRA         L_coarse_cap60
L_coarse_cap59:
;main.h,263 :: 		else if (C_linear == 0 & count == 17) {
0x3AAA	0x0102      	MOVLB       2
0x3AAC	0x51AE      	MOVF        main_C_linear, 0, 1
0x3AAE	0x0A00      	XORLW       0
0x3AB0	0x0E01      	MOVLW       1
0x3AB2	0xA4D8      	BTFSS       STATUS, 2 
0x3AB4	0x0E00      	MOVLW       0
0x3AB6	0x6E01      	MOVWF       R1 
0x3AB8	0x0103      	MOVLB       3
0x3ABA	0x5134      	MOVF        coarse_cap_count_L0, 0, 1
0x3ABC	0x0A11      	XORLW       17
0x3ABE	0x0E01      	MOVLW       1
0x3AC0	0xA4D8      	BTFSS       STATUS, 2 
0x3AC2	0x0E00      	MOVLW       0
0x3AC4	0x6E00      	MOVWF       R0 
0x3AC6	0x5001      	MOVF        R1, 0 
0x3AC8	0x1600      	ANDWF       R0, 1 
0x3ACA	0xE004      	BZ          L_coarse_cap61
;main.h,264 :: 		count = 16;
0x3ACC	0x0E10      	MOVLW       16
0x3ACE	0x6F34      	MOVWF       coarse_cap_count_L0, 1
;main.h,265 :: 		step = 4;
0x3AD0	0x0E04      	MOVLW       4
0x3AD2	0x6F37      	MOVWF       coarse_cap_step_L0, 1
;main.h,266 :: 		}
L_coarse_cap61:
L_coarse_cap60:
;main.h,267 :: 		} else
0x3AD4	0xD001      	BRA         L_coarse_cap62
L_coarse_cap57:
;main.h,268 :: 		break;
0x3AD6	0xD001      	BRA         L_coarse_cap54
L_coarse_cap62:
;main.h,269 :: 		}
0x3AD8	0xD789      	BRA         L_coarse_cap53
L_coarse_cap54:
;main.h,270 :: 		set_cap(cap);
0x3ADA	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x3ADE	0xF012EC5F  	CALL        _set_cap, 0
;main.h,271 :: 		return;
;main.h,272 :: 		}
L_end_coarse_cap:
0x3AE2	0x0012      	RETURN      0
; end of _coarse_cap
_sharp_ind:
;main.h,360 :: 		void sharp_ind()
;main.h,364 :: 		range = step_ind * L_mult;
0x3AE4	0x0102      	MOVLB       2
0x3AE6	0x51B7      	MOVF        main_step_ind, 0, 1
0x3AE8	0x03B6      	MULWF       main_L_mult, 1
0x3AEA	0xF000CFF3  	MOVFF       PRODL, R0
0x3AEE	0xF32EC000  	MOVFF       R0, sharp_ind_range_L0
;main.h,366 :: 		max_range = ind + range;
0x3AF2	0x5000      	MOVF        R0, 0 
0x3AF4	0x2575      	ADDWF       main_ind, 0, 1
0x3AF6	0x6E04      	MOVWF       R4 
0x3AF8	0xF330C004  	MOVFF       R4, sharp_ind_max_range_L0
;main.h,367 :: 		if (max_range > 32 * L_mult - 1)
0x3AFC	0x0E05      	MOVLW       5
0x3AFE	0x6E02      	MOVWF       R2 
0x3B00	0xF000C2B6  	MOVFF       main_L_mult, R0
0x3B04	0x0E00      	MOVLW       0
0x3B06	0x6E01      	MOVWF       R1 
0x3B08	0x5002      	MOVF        R2, 0 
L__sharp_ind565:
0x3B0A	0xE005      	BZ          L__sharp_ind566
0x3B0C	0x3600      	RLCF        R0, 1 
0x3B0E	0x9000      	BCF         R0, 0 
0x3B10	0x3601      	RLCF        R1, 1 
0x3B12	0x0FFF      	ADDLW       255
0x3B14	0xD7FA      	BRA         L__sharp_ind565
L__sharp_ind566:
0x3B16	0x0E01      	MOVLW       1
0x3B18	0x5C00      	SUBWF       R0, 0 
0x3B1A	0x6E02      	MOVWF       R2 
0x3B1C	0x0E00      	MOVLW       0
0x3B1E	0x5801      	SUBWFB      R1, 0 
0x3B20	0x6E03      	MOVWF       R3 
0x3B22	0x0E80      	MOVLW       128
0x3B24	0x1803      	XORWF       R3, 0 
0x3B26	0x6E00      	MOVWF       R0 
0x3B28	0x0E80      	MOVLW       128
0x3B2A	0x5C00      	SUBWF       R0, 0 
0x3B2C	0xE102      	BNZ         L__sharp_ind567
0x3B2E	0x5004      	MOVF        R4, 0 
0x3B30	0x5C02      	SUBWF       R2, 0 
L__sharp_ind567:
0x3B32	0xE20D      	BC          L_sharp_ind89
;main.h,368 :: 		max_range = 32 * L_mult - 1;
0x3B34	0x0E05      	MOVLW       5
0x3B36	0x6E00      	MOVWF       R0 
0x3B38	0xF330C2B6  	MOVFF       main_L_mult, sharp_ind_max_range_L0
0x3B3C	0x5000      	MOVF        R0, 0 
L__sharp_ind568:
0x3B3E	0xE005      	BZ          L__sharp_ind569
0x3B40	0x0103      	MOVLB       3
0x3B42	0x3730      	RLCF        sharp_ind_max_range_L0, 1, 1
0x3B44	0x9130      	BCF         sharp_ind_max_range_L0, 0, 1
0x3B46	0x0FFF      	ADDLW       255
0x3B48	0xD7FA      	BRA         L__sharp_ind568
L__sharp_ind569:
0x3B4A	0x0103      	MOVLB       3
0x3B4C	0x0730      	DECF        sharp_ind_max_range_L0, 1, 1
L_sharp_ind89:
;main.h,369 :: 		if (ind > range)
0x3B4E	0x0102      	MOVLB       2
0x3B50	0x5175      	MOVF        main_ind, 0, 1
0x3B52	0x0103      	MOVLB       3
0x3B54	0x5D2E      	SUBWF       sharp_ind_range_L0, 0, 1
0x3B56	0xE206      	BC          L_sharp_ind90
;main.h,370 :: 		min_range = ind - range;
0x3B58	0x512E      	MOVF        sharp_ind_range_L0, 0, 1
0x3B5A	0x0102      	MOVLB       2
0x3B5C	0x5D75      	SUBWF       main_ind, 0, 1
0x3B5E	0x0103      	MOVLB       3
0x3B60	0x6F31      	MOVWF       sharp_ind_min_range_L0, 1
0x3B62	0xD001      	BRA         L_sharp_ind91
L_sharp_ind90:
;main.h,372 :: 		min_range = 0;
0x3B64	0x6B31      	CLRF        sharp_ind_min_range_L0, 1
L_sharp_ind91:
;main.h,373 :: 		ind = min_range;
0x3B66	0xF275C331  	MOVFF       sharp_ind_min_range_L0, main_ind
;main.h,374 :: 		set_ind(ind);
0x3B6A	0xF341C331  	MOVFF       sharp_ind_min_range_L0, FARG_set_ind_Ind
0x3B6E	0xF017EC39  	CALL        _set_ind, 0
;main.h,375 :: 		get_swr();
0x3B72	0xDE71      	RCALL       _get_swr
;main.h,376 :: 		if (SWR == 0)
0x3B74	0x0E00      	MOVLW       0
0x3B76	0x0102      	MOVLB       2
0x3B78	0x19D9      	XORWF       _SWR+1, 0, 1
0x3B7A	0xE102      	BNZ         L__sharp_ind570
0x3B7C	0x0E00      	MOVLW       0
0x3B7E	0x19D8      	XORWF       _SWR, 0, 1
L__sharp_ind570:
0x3B80	0xE101      	BNZ         L_sharp_ind92
;main.h,377 :: 		return;
0x3B82	0xD070      	BRA         L_end_sharp_ind
L_sharp_ind92:
;main.h,378 :: 		min_SWR = SWR;
0x3B84	0xF332C2D8  	MOVFF       _SWR, sharp_ind_min_SWR_L0
0x3B88	0xF333C2D9  	MOVFF       _SWR+1, sharp_ind_min_SWR_L0+1
;main.h,379 :: 		for (count = min_range + L_mult; count <= max_range; count += L_mult) {
0x3B8C	0x51B6      	MOVF        main_L_mult, 0, 1
0x3B8E	0x0103      	MOVLB       3
0x3B90	0x2531      	ADDWF       sharp_ind_min_range_L0, 0, 1
0x3B92	0x6F2F      	MOVWF       sharp_ind_count_L0, 1
L_sharp_ind93:
0x3B94	0x512F      	MOVF        sharp_ind_count_L0, 0, 1
0x3B96	0x5D30      	SUBWF       sharp_ind_max_range_L0, 0, 1
0x3B98	0xE361      	BNC         L_sharp_ind94
;main.h,380 :: 		set_ind(count);
0x3B9A	0xF341C32F  	MOVFF       sharp_ind_count_L0, FARG_set_ind_Ind
0x3B9E	0xF017EC39  	CALL        _set_ind, 0
;main.h,381 :: 		get_swr();
0x3BA2	0xDE59      	RCALL       _get_swr
;main.h,382 :: 		if (SWR == 0)
0x3BA4	0x0E00      	MOVLW       0
0x3BA6	0x0102      	MOVLB       2
0x3BA8	0x19D9      	XORWF       _SWR+1, 0, 1
0x3BAA	0xE102      	BNZ         L__sharp_ind571
0x3BAC	0x0E00      	MOVLW       0
0x3BAE	0x19D8      	XORWF       _SWR, 0, 1
L__sharp_ind571:
0x3BB0	0xE101      	BNZ         L_sharp_ind96
;main.h,383 :: 		return;
0x3BB2	0xD058      	BRA         L_end_sharp_ind
L_sharp_ind96:
;main.h,384 :: 		if (SWR >= min_SWR) {
0x3BB4	0x0E80      	MOVLW       128
0x3BB6	0x19D9      	XORWF       _SWR+1, 0, 1
0x3BB8	0x6E00      	MOVWF       R0 
0x3BBA	0x0E80      	MOVLW       128
0x3BBC	0x0103      	MOVLB       3
0x3BBE	0x1933      	XORWF       sharp_ind_min_SWR_L0+1, 0, 1
0x3BC0	0x5C00      	SUBWF       R0, 0 
0x3BC2	0xE103      	BNZ         L__sharp_ind572
0x3BC4	0x5132      	MOVF        sharp_ind_min_SWR_L0, 0, 1
0x3BC6	0x0102      	MOVLB       2
0x3BC8	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_ind572:
0x3BCA	0xE30B      	BNC         L_sharp_ind97
;main.h,385 :: 		Delay_ms(10);
0x3BCC	0x0E34      	MOVLW       52
0x3BCE	0x6E0C      	MOVWF       R12, 0
0x3BD0	0x0EF1      	MOVLW       241
0x3BD2	0x6E0D      	MOVWF       R13, 0
L_sharp_ind98:
0x3BD4	0x2E0D      	DECFSZ      R13, 1, 0
0x3BD6	0xD7FE      	BRA         L_sharp_ind98
0x3BD8	0x2E0C      	DECFSZ      R12, 1, 0
0x3BDA	0xD7FC      	BRA         L_sharp_ind98
0x3BDC	0x0000      	NOP
0x3BDE	0x0000      	NOP
;main.h,386 :: 		get_swr();
0x3BE0	0xDE3A      	RCALL       _get_swr
;main.h,387 :: 		}
L_sharp_ind97:
;main.h,388 :: 		if (SWR >= min_SWR) {
0x3BE2	0x0E80      	MOVLW       128
0x3BE4	0x0102      	MOVLB       2
0x3BE6	0x19D9      	XORWF       _SWR+1, 0, 1
0x3BE8	0x6E00      	MOVWF       R0 
0x3BEA	0x0E80      	MOVLW       128
0x3BEC	0x0103      	MOVLB       3
0x3BEE	0x1933      	XORWF       sharp_ind_min_SWR_L0+1, 0, 1
0x3BF0	0x5C00      	SUBWF       R0, 0 
0x3BF2	0xE103      	BNZ         L__sharp_ind573
0x3BF4	0x5132      	MOVF        sharp_ind_min_SWR_L0, 0, 1
0x3BF6	0x0102      	MOVLB       2
0x3BF8	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_ind573:
0x3BFA	0xE30B      	BNC         L_sharp_ind99
;main.h,389 :: 		Delay_ms(10);
0x3BFC	0x0E34      	MOVLW       52
0x3BFE	0x6E0C      	MOVWF       R12, 0
0x3C00	0x0EF1      	MOVLW       241
0x3C02	0x6E0D      	MOVWF       R13, 0
L_sharp_ind100:
0x3C04	0x2E0D      	DECFSZ      R13, 1, 0
0x3C06	0xD7FE      	BRA         L_sharp_ind100
0x3C08	0x2E0C      	DECFSZ      R12, 1, 0
0x3C0A	0xD7FC      	BRA         L_sharp_ind100
0x3C0C	0x0000      	NOP
0x3C0E	0x0000      	NOP
;main.h,390 :: 		get_swr();
0x3C10	0xDE22      	RCALL       _get_swr
;main.h,391 :: 		}
L_sharp_ind99:
;main.h,392 :: 		if (SWR < min_SWR) {
0x3C12	0x0E80      	MOVLW       128
0x3C14	0x0102      	MOVLB       2
0x3C16	0x19D9      	XORWF       _SWR+1, 0, 1
0x3C18	0x6E00      	MOVWF       R0 
0x3C1A	0x0E80      	MOVLW       128
0x3C1C	0x0103      	MOVLB       3
0x3C1E	0x1933      	XORWF       sharp_ind_min_SWR_L0+1, 0, 1
0x3C20	0x5C00      	SUBWF       R0, 0 
0x3C22	0xE103      	BNZ         L__sharp_ind574
0x3C24	0x5132      	MOVF        sharp_ind_min_SWR_L0, 0, 1
0x3C26	0x0102      	MOVLB       2
0x3C28	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_ind574:
0x3C2A	0xE212      	BC          L_sharp_ind101
;main.h,393 :: 		min_SWR = SWR;
0x3C2C	0x0102      	MOVLB       2
0x3C2E	0xF332C2D8  	MOVFF       _SWR, sharp_ind_min_SWR_L0
0x3C32	0xF333C2D9  	MOVFF       _SWR+1, sharp_ind_min_SWR_L0+1
;main.h,394 :: 		ind = count;
0x3C36	0xF275C32F  	MOVFF       sharp_ind_count_L0, main_ind
;main.h,395 :: 		if (SWR < 120)
0x3C3A	0x0E80      	MOVLW       128
0x3C3C	0x19D9      	XORWF       _SWR+1, 0, 1
0x3C3E	0x6E00      	MOVWF       R0 
0x3C40	0x0E80      	MOVLW       128
0x3C42	0x5C00      	SUBWF       R0, 0 
0x3C44	0xE102      	BNZ         L__sharp_ind575
0x3C46	0x0E78      	MOVLW       120
0x3C48	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_ind575:
0x3C4A	0xE201      	BC          L_sharp_ind102
;main.h,396 :: 		break;
0x3C4C	0xD007      	BRA         L_sharp_ind94
L_sharp_ind102:
;main.h,397 :: 		} else
0x3C4E	0xD001      	BRA         L_sharp_ind103
L_sharp_ind101:
;main.h,398 :: 		break;
0x3C50	0xD005      	BRA         L_sharp_ind94
L_sharp_ind103:
0x3C52	0x0102      	MOVLB       2
;main.h,379 :: 		for (count = min_range + L_mult; count <= max_range; count += L_mult) {
0x3C54	0x51B6      	MOVF        main_L_mult, 0, 1
0x3C56	0x0103      	MOVLB       3
0x3C58	0x272F      	ADDWF       sharp_ind_count_L0, 1, 1
;main.h,399 :: 		}
0x3C5A	0xD79C      	BRA         L_sharp_ind93
L_sharp_ind94:
;main.h,400 :: 		set_ind(ind);
0x3C5C	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x3C60	0xF017EC39  	CALL        _set_ind, 0
;main.h,401 :: 		return;
;main.h,402 :: 		}
L_end_sharp_ind:
0x3C64	0x0012      	RETURN      0
; end of _sharp_ind
_coarse_tune:
;main.h,274 :: 		void coarse_tune() {
;main.h,275 :: 		char step = 3;
0x3C66	0x0E03      	MOVLW       3
0x3C68	0x0103      	MOVLB       3
0x3C6A	0x6F33      	MOVWF       coarse_tune_step_L0, 1
;main.h,280 :: 		mem_cap = 0;
0x3C6C	0x6B2F      	CLRF        coarse_tune_mem_cap_L0, 1
;main.h,281 :: 		step_ind = step;
0x3C6E	0xF2B7C333  	MOVFF       coarse_tune_step_L0, main_step_ind
;main.h,282 :: 		mem_step_cap = 3;
0x3C72	0x0E03      	MOVLW       3
0x3C74	0x6F30      	MOVWF       coarse_tune_mem_step_cap_L0, 1
;main.h,283 :: 		min_swr = SWR + SWR / 20;
0x3C76	0x0E14      	MOVLW       20
0x3C78	0x6E04      	MOVWF       R4 
0x3C7A	0x0E00      	MOVLW       0
0x3C7C	0x6E05      	MOVWF       R5 
0x3C7E	0xF000C2D8  	MOVFF       _SWR, R0
0x3C82	0xF001C2D9  	MOVFF       _SWR+1, R1
0x3C86	0xDD84      	RCALL       _Div_16x16_S
0x3C88	0x5000      	MOVF        R0, 0 
0x3C8A	0x0102      	MOVLB       2
0x3C8C	0x25D8      	ADDWF       _SWR, 0, 1
0x3C8E	0x0103      	MOVLB       3
0x3C90	0x6F31      	MOVWF       coarse_tune_min_swr_L0, 1
0x3C92	0x5001      	MOVF        R1, 0 
0x3C94	0x0102      	MOVLB       2
0x3C96	0x21D9      	ADDWFC      _SWR+1, 0, 1
0x3C98	0x0103      	MOVLB       3
0x3C9A	0x6F32      	MOVWF       coarse_tune_min_swr_L0+1, 1
;main.h,284 :: 		for (count = 0; count <= 31;) {
0x3C9C	0x6B2E      	CLRF        coarse_tune_count_L0, 1
L_coarse_tune63:
0x3C9E	0x0103      	MOVLB       3
0x3CA0	0x512E      	MOVF        coarse_tune_count_L0, 0, 1
0x3CA2	0x081F      	SUBLW       31
0x3CA4	0xA0D8      	BTFSS       STATUS, 0 
0x3CA6	0xD077      	BRA         L_coarse_tune64
;main.h,285 :: 		set_ind(count * L_mult);
0x3CA8	0x512E      	MOVF        coarse_tune_count_L0, 0, 1
0x3CAA	0x0102      	MOVLB       2
0x3CAC	0x03B6      	MULWF       main_L_mult, 1
0x3CAE	0xF341CFF3  	MOVFF       PRODL, FARG_set_ind_Ind
0x3CB2	0xF017EC39  	CALL        _set_ind, 0
;main.h,286 :: 		coarse_cap();
0x3CB6	0xDE71      	RCALL       _coarse_cap
;main.h,287 :: 		get_swr();
0x3CB8	0xDDCE      	RCALL       _get_swr
;main.h,288 :: 		if (SWR == 0)
0x3CBA	0x0E00      	MOVLW       0
0x3CBC	0x0102      	MOVLB       2
0x3CBE	0x19D9      	XORWF       _SWR+1, 0, 1
0x3CC0	0xE102      	BNZ         L__coarse_tune549
0x3CC2	0x0E00      	MOVLW       0
0x3CC4	0x19D8      	XORWF       _SWR, 0, 1
L__coarse_tune549:
0x3CC6	0xE101      	BNZ         L_coarse_tune66
;main.h,289 :: 		return;
0x3CC8	0xD07C      	BRA         L_end_coarse_tune
L_coarse_tune66:
;main.h,290 :: 		if (SWR < min_swr) {
0x3CCA	0x0E80      	MOVLW       128
0x3CCC	0x19D9      	XORWF       _SWR+1, 0, 1
0x3CCE	0x6E00      	MOVWF       R0 
0x3CD0	0x0E80      	MOVLW       128
0x3CD2	0x0103      	MOVLB       3
0x3CD4	0x1932      	XORWF       coarse_tune_min_swr_L0+1, 0, 1
0x3CD6	0x5C00      	SUBWF       R0, 0 
0x3CD8	0xE103      	BNZ         L__coarse_tune550
0x3CDA	0x5131      	MOVF        coarse_tune_min_swr_L0, 0, 1
0x3CDC	0x0102      	MOVLB       2
0x3CDE	0x5DD8      	SUBWF       _SWR, 0, 1
L__coarse_tune550:
0x3CE0	0xE258      	BC          L_coarse_tune67
;main.h,291 :: 		min_swr = SWR + SWR / 20;
0x3CE2	0x0E14      	MOVLW       20
0x3CE4	0x6E04      	MOVWF       R4 
0x3CE6	0x0E00      	MOVLW       0
0x3CE8	0x6E05      	MOVWF       R5 
0x3CEA	0xF000C2D8  	MOVFF       _SWR, R0
0x3CEE	0xF001C2D9  	MOVFF       _SWR+1, R1
0x3CF2	0xDD4E      	RCALL       _Div_16x16_S
0x3CF4	0x5000      	MOVF        R0, 0 
0x3CF6	0x0102      	MOVLB       2
0x3CF8	0x25D8      	ADDWF       _SWR, 0, 1
0x3CFA	0x0103      	MOVLB       3
0x3CFC	0x6F31      	MOVWF       coarse_tune_min_swr_L0, 1
0x3CFE	0x5001      	MOVF        R1, 0 
0x3D00	0x0102      	MOVLB       2
0x3D02	0x21D9      	ADDWFC      _SWR+1, 0, 1
0x3D04	0x0103      	MOVLB       3
0x3D06	0x6F32      	MOVWF       coarse_tune_min_swr_L0+1, 1
;main.h,292 :: 		ind = count * L_mult;
0x3D08	0x512E      	MOVF        coarse_tune_count_L0, 0, 1
0x3D0A	0x0102      	MOVLB       2
0x3D0C	0x03B6      	MULWF       main_L_mult, 1
0x3D0E	0xF275CFF3  	MOVFF       PRODL, main_ind
;main.h,293 :: 		mem_cap = cap;
0x3D12	0xF32FC25D  	MOVFF       main_cap, coarse_tune_mem_cap_L0
;main.h,294 :: 		step_ind = step;
0x3D16	0xF2B7C333  	MOVFF       coarse_tune_step_L0, main_step_ind
;main.h,295 :: 		mem_step_cap = step_cap;
0x3D1A	0xF330C2A8  	MOVFF       main_step_cap, coarse_tune_mem_step_cap_L0
;main.h,296 :: 		if (SWR < 120)
0x3D1E	0x0E80      	MOVLW       128
0x3D20	0x19D9      	XORWF       _SWR+1, 0, 1
0x3D22	0x6E00      	MOVWF       R0 
0x3D24	0x0E80      	MOVLW       128
0x3D26	0x5C00      	SUBWF       R0, 0 
0x3D28	0xE102      	BNZ         L__coarse_tune551
0x3D2A	0x0E78      	MOVLW       120
0x3D2C	0x5DD8      	SUBWF       _SWR, 0, 1
L__coarse_tune551:
0x3D2E	0xE201      	BC          L_coarse_tune68
;main.h,297 :: 		break;
0x3D30	0xD032      	BRA         L_coarse_tune64
L_coarse_tune68:
;main.h,298 :: 		count += step;
0x3D32	0x0103      	MOVLB       3
0x3D34	0x5133      	MOVF        coarse_tune_step_L0, 0, 1
0x3D36	0x252E      	ADDWF       coarse_tune_count_L0, 0, 1
0x3D38	0x6E02      	MOVWF       R2 
0x3D3A	0xF32EC002  	MOVFF       R2, coarse_tune_count_L0
;main.h,299 :: 		if (L_linear == 0 & count == 9)
0x3D3E	0x0102      	MOVLB       2
0x3D40	0x51B8      	MOVF        main_L_linear, 0, 1
0x3D42	0x0A00      	XORLW       0
0x3D44	0x0E01      	MOVLW       1
0x3D46	0xA4D8      	BTFSS       STATUS, 2 
0x3D48	0x0E00      	MOVLW       0
0x3D4A	0x6E01      	MOVWF       R1 
0x3D4C	0x5002      	MOVF        R2, 0 
0x3D4E	0x0A09      	XORLW       9
0x3D50	0x0E01      	MOVLW       1
0x3D52	0xA4D8      	BTFSS       STATUS, 2 
0x3D54	0x0E00      	MOVLW       0
0x3D56	0x6E00      	MOVWF       R0 
0x3D58	0x5001      	MOVF        R1, 0 
0x3D5A	0x1600      	ANDWF       R0, 1 
0x3D5C	0xE004      	BZ          L_coarse_tune69
;main.h,300 :: 		count = 8;
0x3D5E	0x0E08      	MOVLW       8
0x3D60	0x0103      	MOVLB       3
0x3D62	0x6F2E      	MOVWF       coarse_tune_count_L0, 1
0x3D64	0xD015      	BRA         L_coarse_tune70
L_coarse_tune69:
;main.h,301 :: 		else if (L_linear == 0 & count == 17) {
0x3D66	0x0102      	MOVLB       2
0x3D68	0x51B8      	MOVF        main_L_linear, 0, 1
0x3D6A	0x0A00      	XORLW       0
0x3D6C	0x0E01      	MOVLW       1
0x3D6E	0xA4D8      	BTFSS       STATUS, 2 
0x3D70	0x0E00      	MOVLW       0
0x3D72	0x6E01      	MOVWF       R1 
0x3D74	0x0103      	MOVLB       3
0x3D76	0x512E      	MOVF        coarse_tune_count_L0, 0, 1
0x3D78	0x0A11      	XORLW       17
0x3D7A	0x0E01      	MOVLW       1
0x3D7C	0xA4D8      	BTFSS       STATUS, 2 
0x3D7E	0x0E00      	MOVLW       0
0x3D80	0x6E00      	MOVWF       R0 
0x3D82	0x5001      	MOVF        R1, 0 
0x3D84	0x1600      	ANDWF       R0, 1 
0x3D86	0xE004      	BZ          L_coarse_tune71
;main.h,302 :: 		count = 16;
0x3D88	0x0E10      	MOVLW       16
0x3D8A	0x6F2E      	MOVWF       coarse_tune_count_L0, 1
;main.h,303 :: 		step = 4;
0x3D8C	0x0E04      	MOVLW       4
0x3D8E	0x6F33      	MOVWF       coarse_tune_step_L0, 1
;main.h,304 :: 		}
L_coarse_tune71:
L_coarse_tune70:
;main.h,305 :: 		} else
0x3D90	0xD001      	BRA         L_coarse_tune72
L_coarse_tune67:
;main.h,306 :: 		break;
0x3D92	0xD001      	BRA         L_coarse_tune64
L_coarse_tune72:
;main.h,307 :: 		}
0x3D94	0xD784      	BRA         L_coarse_tune63
L_coarse_tune64:
;main.h,308 :: 		cap = mem_cap;
0x3D96	0xF25DC32F  	MOVFF       coarse_tune_mem_cap_L0, main_cap
;main.h,309 :: 		set_ind(ind);
0x3D9A	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x3D9E	0xF017EC39  	CALL        _set_ind, 0
;main.h,310 :: 		set_cap(cap);
0x3DA2	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x3DA6	0xF012EC5F  	CALL        _set_cap, 0
;main.h,311 :: 		step_cap = mem_step_cap;
0x3DAA	0xF2A8C330  	MOVFF       coarse_tune_mem_step_cap_L0, main_step_cap
;main.h,312 :: 		Delay_ms(10);
0x3DAE	0x0E34      	MOVLW       52
0x3DB0	0x6E0C      	MOVWF       R12, 0
0x3DB2	0x0EF1      	MOVLW       241
0x3DB4	0x6E0D      	MOVWF       R13, 0
L_coarse_tune73:
0x3DB6	0x2E0D      	DECFSZ      R13, 1, 0
0x3DB8	0xD7FE      	BRA         L_coarse_tune73
0x3DBA	0x2E0C      	DECFSZ      R12, 1, 0
0x3DBC	0xD7FC      	BRA         L_coarse_tune73
0x3DBE	0x0000      	NOP
0x3DC0	0x0000      	NOP
;main.h,313 :: 		return;
;main.h,314 :: 		}
L_end_coarse_tune:
0x3DC2	0x0012      	RETURN      0
; end of _coarse_tune
_sharp_cap:
;main.h,316 :: 		void sharp_cap()
;main.h,320 :: 		range = step_cap * C_mult;
0x3DC4	0x0102      	MOVLB       2
0x3DC6	0x51A8      	MOVF        main_step_cap, 0, 1
0x3DC8	0x03A7      	MULWF       main_C_mult, 1
0x3DCA	0xF000CFF3  	MOVFF       PRODL, R0
0x3DCE	0xF32EC000  	MOVFF       R0, sharp_cap_range_L0
;main.h,322 :: 		max_range = cap + range;
0x3DD2	0x5000      	MOVF        R0, 0 
0x3DD4	0x255D      	ADDWF       main_cap, 0, 1
0x3DD6	0x6E04      	MOVWF       R4 
0x3DD8	0xF330C004  	MOVFF       R4, sharp_cap_max_range_L0
;main.h,323 :: 		if (max_range > 32 * C_mult - 1)
0x3DDC	0x0E05      	MOVLW       5
0x3DDE	0x6E02      	MOVWF       R2 
0x3DE0	0xF000C2A7  	MOVFF       main_C_mult, R0
0x3DE4	0x0E00      	MOVLW       0
0x3DE6	0x6E01      	MOVWF       R1 
0x3DE8	0x5002      	MOVF        R2, 0 
L__sharp_cap553:
0x3DEA	0xE005      	BZ          L__sharp_cap554
0x3DEC	0x3600      	RLCF        R0, 1 
0x3DEE	0x9000      	BCF         R0, 0 
0x3DF0	0x3601      	RLCF        R1, 1 
0x3DF2	0x0FFF      	ADDLW       255
0x3DF4	0xD7FA      	BRA         L__sharp_cap553
L__sharp_cap554:
0x3DF6	0x0E01      	MOVLW       1
0x3DF8	0x5C00      	SUBWF       R0, 0 
0x3DFA	0x6E02      	MOVWF       R2 
0x3DFC	0x0E00      	MOVLW       0
0x3DFE	0x5801      	SUBWFB      R1, 0 
0x3E00	0x6E03      	MOVWF       R3 
0x3E02	0x0E80      	MOVLW       128
0x3E04	0x1803      	XORWF       R3, 0 
0x3E06	0x6E00      	MOVWF       R0 
0x3E08	0x0E80      	MOVLW       128
0x3E0A	0x5C00      	SUBWF       R0, 0 
0x3E0C	0xE102      	BNZ         L__sharp_cap555
0x3E0E	0x5004      	MOVF        R4, 0 
0x3E10	0x5C02      	SUBWF       R2, 0 
L__sharp_cap555:
0x3E12	0xE20D      	BC          L_sharp_cap74
;main.h,324 :: 		max_range = 32 * C_mult - 1;
0x3E14	0x0E05      	MOVLW       5
0x3E16	0x6E00      	MOVWF       R0 
0x3E18	0xF330C2A7  	MOVFF       main_C_mult, sharp_cap_max_range_L0
0x3E1C	0x5000      	MOVF        R0, 0 
L__sharp_cap556:
0x3E1E	0xE005      	BZ          L__sharp_cap557
0x3E20	0x0103      	MOVLB       3
0x3E22	0x3730      	RLCF        sharp_cap_max_range_L0, 1, 1
0x3E24	0x9130      	BCF         sharp_cap_max_range_L0, 0, 1
0x3E26	0x0FFF      	ADDLW       255
0x3E28	0xD7FA      	BRA         L__sharp_cap556
L__sharp_cap557:
0x3E2A	0x0103      	MOVLB       3
0x3E2C	0x0730      	DECF        sharp_cap_max_range_L0, 1, 1
L_sharp_cap74:
;main.h,325 :: 		if (cap > range)
0x3E2E	0x0102      	MOVLB       2
0x3E30	0x515D      	MOVF        main_cap, 0, 1
0x3E32	0x0103      	MOVLB       3
0x3E34	0x5D2E      	SUBWF       sharp_cap_range_L0, 0, 1
0x3E36	0xE206      	BC          L_sharp_cap75
;main.h,326 :: 		min_range = cap - range;
0x3E38	0x512E      	MOVF        sharp_cap_range_L0, 0, 1
0x3E3A	0x0102      	MOVLB       2
0x3E3C	0x5D5D      	SUBWF       main_cap, 0, 1
0x3E3E	0x0103      	MOVLB       3
0x3E40	0x6F31      	MOVWF       sharp_cap_min_range_L0, 1
0x3E42	0xD001      	BRA         L_sharp_cap76
L_sharp_cap75:
;main.h,328 :: 		min_range = 0;
0x3E44	0x6B31      	CLRF        sharp_cap_min_range_L0, 1
L_sharp_cap76:
;main.h,329 :: 		cap = min_range;
0x3E46	0xF25DC331  	MOVFF       sharp_cap_min_range_L0, main_cap
;main.h,330 :: 		set_cap(cap);
0x3E4A	0xF341C331  	MOVFF       sharp_cap_min_range_L0, FARG_set_cap_Cap
0x3E4E	0xF012EC5F  	CALL        _set_cap, 0
;main.h,331 :: 		get_swr();
0x3E52	0xDD01      	RCALL       _get_swr
;main.h,332 :: 		if (SWR == 0)
0x3E54	0x0E00      	MOVLW       0
0x3E56	0x0102      	MOVLB       2
0x3E58	0x19D9      	XORWF       _SWR+1, 0, 1
0x3E5A	0xE102      	BNZ         L__sharp_cap558
0x3E5C	0x0E00      	MOVLW       0
0x3E5E	0x19D8      	XORWF       _SWR, 0, 1
L__sharp_cap558:
0x3E60	0xE101      	BNZ         L_sharp_cap77
;main.h,333 :: 		return;
0x3E62	0xD070      	BRA         L_end_sharp_cap
L_sharp_cap77:
;main.h,334 :: 		min_SWR = SWR;
0x3E64	0xF332C2D8  	MOVFF       _SWR, sharp_cap_min_swr_L0
0x3E68	0xF333C2D9  	MOVFF       _SWR+1, sharp_cap_min_swr_L0+1
;main.h,335 :: 		for (count = min_range + C_mult; count <= max_range; count += C_mult) {
0x3E6C	0x51A7      	MOVF        main_C_mult, 0, 1
0x3E6E	0x0103      	MOVLB       3
0x3E70	0x2531      	ADDWF       sharp_cap_min_range_L0, 0, 1
0x3E72	0x6F2F      	MOVWF       sharp_cap_count_L0, 1
L_sharp_cap78:
0x3E74	0x512F      	MOVF        sharp_cap_count_L0, 0, 1
0x3E76	0x5D30      	SUBWF       sharp_cap_max_range_L0, 0, 1
0x3E78	0xE361      	BNC         L_sharp_cap79
;main.h,336 :: 		set_cap(count);
0x3E7A	0xF341C32F  	MOVFF       sharp_cap_count_L0, FARG_set_cap_Cap
0x3E7E	0xF012EC5F  	CALL        _set_cap, 0
;main.h,337 :: 		get_swr();
0x3E82	0xDCE9      	RCALL       _get_swr
;main.h,338 :: 		if (SWR == 0)
0x3E84	0x0E00      	MOVLW       0
0x3E86	0x0102      	MOVLB       2
0x3E88	0x19D9      	XORWF       _SWR+1, 0, 1
0x3E8A	0xE102      	BNZ         L__sharp_cap559
0x3E8C	0x0E00      	MOVLW       0
0x3E8E	0x19D8      	XORWF       _SWR, 0, 1
L__sharp_cap559:
0x3E90	0xE101      	BNZ         L_sharp_cap81
;main.h,339 :: 		return;
0x3E92	0xD058      	BRA         L_end_sharp_cap
L_sharp_cap81:
;main.h,340 :: 		if (SWR >= min_SWR) {
0x3E94	0x0E80      	MOVLW       128
0x3E96	0x19D9      	XORWF       _SWR+1, 0, 1
0x3E98	0x6E00      	MOVWF       R0 
0x3E9A	0x0E80      	MOVLW       128
0x3E9C	0x0103      	MOVLB       3
0x3E9E	0x1933      	XORWF       sharp_cap_min_swr_L0+1, 0, 1
0x3EA0	0x5C00      	SUBWF       R0, 0 
0x3EA2	0xE103      	BNZ         L__sharp_cap560
0x3EA4	0x5132      	MOVF        sharp_cap_min_swr_L0, 0, 1
0x3EA6	0x0102      	MOVLB       2
0x3EA8	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_cap560:
0x3EAA	0xE30B      	BNC         L_sharp_cap82
;main.h,341 :: 		Delay_ms(10);
0x3EAC	0x0E34      	MOVLW       52
0x3EAE	0x6E0C      	MOVWF       R12, 0
0x3EB0	0x0EF1      	MOVLW       241
0x3EB2	0x6E0D      	MOVWF       R13, 0
L_sharp_cap83:
0x3EB4	0x2E0D      	DECFSZ      R13, 1, 0
0x3EB6	0xD7FE      	BRA         L_sharp_cap83
0x3EB8	0x2E0C      	DECFSZ      R12, 1, 0
0x3EBA	0xD7FC      	BRA         L_sharp_cap83
0x3EBC	0x0000      	NOP
0x3EBE	0x0000      	NOP
;main.h,342 :: 		get_swr();
0x3EC0	0xDCCA      	RCALL       _get_swr
;main.h,343 :: 		}
L_sharp_cap82:
;main.h,344 :: 		if (SWR >= min_SWR) {
0x3EC2	0x0E80      	MOVLW       128
0x3EC4	0x0102      	MOVLB       2
0x3EC6	0x19D9      	XORWF       _SWR+1, 0, 1
0x3EC8	0x6E00      	MOVWF       R0 
0x3ECA	0x0E80      	MOVLW       128
0x3ECC	0x0103      	MOVLB       3
0x3ECE	0x1933      	XORWF       sharp_cap_min_swr_L0+1, 0, 1
0x3ED0	0x5C00      	SUBWF       R0, 0 
0x3ED2	0xE103      	BNZ         L__sharp_cap561
0x3ED4	0x5132      	MOVF        sharp_cap_min_swr_L0, 0, 1
0x3ED6	0x0102      	MOVLB       2
0x3ED8	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_cap561:
0x3EDA	0xE30B      	BNC         L_sharp_cap84
;main.h,345 :: 		Delay_ms(10);
0x3EDC	0x0E34      	MOVLW       52
0x3EDE	0x6E0C      	MOVWF       R12, 0
0x3EE0	0x0EF1      	MOVLW       241
0x3EE2	0x6E0D      	MOVWF       R13, 0
L_sharp_cap85:
0x3EE4	0x2E0D      	DECFSZ      R13, 1, 0
0x3EE6	0xD7FE      	BRA         L_sharp_cap85
0x3EE8	0x2E0C      	DECFSZ      R12, 1, 0
0x3EEA	0xD7FC      	BRA         L_sharp_cap85
0x3EEC	0x0000      	NOP
0x3EEE	0x0000      	NOP
;main.h,346 :: 		get_swr();
0x3EF0	0xDCB2      	RCALL       _get_swr
;main.h,347 :: 		}
L_sharp_cap84:
;main.h,348 :: 		if (SWR < min_SWR) {
0x3EF2	0x0E80      	MOVLW       128
0x3EF4	0x0102      	MOVLB       2
0x3EF6	0x19D9      	XORWF       _SWR+1, 0, 1
0x3EF8	0x6E00      	MOVWF       R0 
0x3EFA	0x0E80      	MOVLW       128
0x3EFC	0x0103      	MOVLB       3
0x3EFE	0x1933      	XORWF       sharp_cap_min_swr_L0+1, 0, 1
0x3F00	0x5C00      	SUBWF       R0, 0 
0x3F02	0xE103      	BNZ         L__sharp_cap562
0x3F04	0x5132      	MOVF        sharp_cap_min_swr_L0, 0, 1
0x3F06	0x0102      	MOVLB       2
0x3F08	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_cap562:
0x3F0A	0xE212      	BC          L_sharp_cap86
;main.h,349 :: 		min_SWR = SWR;
0x3F0C	0x0102      	MOVLB       2
0x3F0E	0xF332C2D8  	MOVFF       _SWR, sharp_cap_min_swr_L0
0x3F12	0xF333C2D9  	MOVFF       _SWR+1, sharp_cap_min_swr_L0+1
;main.h,350 :: 		cap = count;
0x3F16	0xF25DC32F  	MOVFF       sharp_cap_count_L0, main_cap
;main.h,351 :: 		if (SWR < 120)
0x3F1A	0x0E80      	MOVLW       128
0x3F1C	0x19D9      	XORWF       _SWR+1, 0, 1
0x3F1E	0x6E00      	MOVWF       R0 
0x3F20	0x0E80      	MOVLW       128
0x3F22	0x5C00      	SUBWF       R0, 0 
0x3F24	0xE102      	BNZ         L__sharp_cap563
0x3F26	0x0E78      	MOVLW       120
0x3F28	0x5DD8      	SUBWF       _SWR, 0, 1
L__sharp_cap563:
0x3F2A	0xE201      	BC          L_sharp_cap87
;main.h,352 :: 		break;
0x3F2C	0xD007      	BRA         L_sharp_cap79
L_sharp_cap87:
;main.h,353 :: 		} else
0x3F2E	0xD001      	BRA         L_sharp_cap88
L_sharp_cap86:
;main.h,354 :: 		break;
0x3F30	0xD005      	BRA         L_sharp_cap79
L_sharp_cap88:
0x3F32	0x0102      	MOVLB       2
;main.h,335 :: 		for (count = min_range + C_mult; count <= max_range; count += C_mult) {
0x3F34	0x51A7      	MOVF        main_C_mult, 0, 1
0x3F36	0x0103      	MOVLB       3
0x3F38	0x272F      	ADDWF       sharp_cap_count_L0, 1, 1
;main.h,355 :: 		}
0x3F3A	0xD79C      	BRA         L_sharp_cap78
L_sharp_cap79:
;main.h,356 :: 		set_cap(cap);
0x3F3C	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x3F40	0xF012EC5F  	CALL        _set_cap, 0
;main.h,357 :: 		return;
;main.h,358 :: 		}
L_end_sharp_cap:
0x3F44	0x0012      	RETURN      0
; end of _sharp_cap
_sub_tune:
;main.h,404 :: 		void sub_tune()
;main.h,408 :: 		swr_mem = SWR;
0x3F46	0xF328C2D8  	MOVFF       _SWR, sub_tune_swr_mem_L0
0x3F4A	0xF329C2D9  	MOVFF       _SWR+1, sub_tune_swr_mem_L0+1
;main.h,409 :: 		coarse_tune();
0x3F4E	0xDE8B      	RCALL       _coarse_tune
;main.h,410 :: 		if (SWR == 0) {
0x3F50	0x0E00      	MOVLW       0
0x3F52	0x0102      	MOVLB       2
0x3F54	0x19D9      	XORWF       _SWR+1, 0, 1
0x3F56	0xE102      	BNZ         L__sub_tune577
0x3F58	0x0E00      	MOVLW       0
0x3F5A	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune577:
0x3F5C	0xE103      	BNZ         L_sub_tune104
;main.h,411 :: 		atu_reset();
0x3F5E	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,412 :: 		return;
0x3F62	0xD118      	BRA         L_end_sub_tune
;main.h,413 :: 		}
L_sub_tune104:
;main.h,414 :: 		get_swr();
0x3F64	0xDC78      	RCALL       _get_swr
;main.h,415 :: 		if (SWR < 120)
0x3F66	0x0E80      	MOVLW       128
0x3F68	0x0102      	MOVLB       2
0x3F6A	0x19D9      	XORWF       _SWR+1, 0, 1
0x3F6C	0x6E00      	MOVWF       R0 
0x3F6E	0x0E80      	MOVLW       128
0x3F70	0x5C00      	SUBWF       R0, 0 
0x3F72	0xE102      	BNZ         L__sub_tune578
0x3F74	0x0E78      	MOVLW       120
0x3F76	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune578:
0x3F78	0xE201      	BC          L_sub_tune105
;main.h,416 :: 		return;
0x3F7A	0xD10C      	BRA         L_end_sub_tune
L_sub_tune105:
;main.h,417 :: 		sharp_ind();
0x3F7C	0xDDB3      	RCALL       _sharp_ind
;main.h,418 :: 		if (SWR == 0) {
0x3F7E	0x0E00      	MOVLW       0
0x3F80	0x0102      	MOVLB       2
0x3F82	0x19D9      	XORWF       _SWR+1, 0, 1
0x3F84	0xE102      	BNZ         L__sub_tune579
0x3F86	0x0E00      	MOVLW       0
0x3F88	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune579:
0x3F8A	0xE103      	BNZ         L_sub_tune106
;main.h,419 :: 		atu_reset();
0x3F8C	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,420 :: 		return;
0x3F90	0xD101      	BRA         L_end_sub_tune
;main.h,421 :: 		}
L_sub_tune106:
;main.h,422 :: 		get_swr();
0x3F92	0xDC61      	RCALL       _get_swr
;main.h,423 :: 		if (SWR < 120)
0x3F94	0x0E80      	MOVLW       128
0x3F96	0x0102      	MOVLB       2
0x3F98	0x19D9      	XORWF       _SWR+1, 0, 1
0x3F9A	0x6E00      	MOVWF       R0 
0x3F9C	0x0E80      	MOVLW       128
0x3F9E	0x5C00      	SUBWF       R0, 0 
0x3FA0	0xE102      	BNZ         L__sub_tune580
0x3FA2	0x0E78      	MOVLW       120
0x3FA4	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune580:
0x3FA6	0xE201      	BC          L_sub_tune107
;main.h,424 :: 		return;
0x3FA8	0xD0F5      	BRA         L_end_sub_tune
L_sub_tune107:
;main.h,425 :: 		sharp_cap();
0x3FAA	0xDF0C      	RCALL       _sharp_cap
;main.h,426 :: 		if (SWR == 0) {
0x3FAC	0x0E00      	MOVLW       0
0x3FAE	0x0102      	MOVLB       2
0x3FB0	0x19D9      	XORWF       _SWR+1, 0, 1
0x3FB2	0xE102      	BNZ         L__sub_tune581
0x3FB4	0x0E00      	MOVLW       0
0x3FB6	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune581:
0x3FB8	0xE103      	BNZ         L_sub_tune108
;main.h,427 :: 		atu_reset();
0x3FBA	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,428 :: 		return;
0x3FBE	0xD0EA      	BRA         L_end_sub_tune
;main.h,429 :: 		}
L_sub_tune108:
;main.h,430 :: 		get_swr();
0x3FC0	0xDC4A      	RCALL       _get_swr
;main.h,431 :: 		if (SWR < 120)
0x3FC2	0x0E80      	MOVLW       128
0x3FC4	0x0102      	MOVLB       2
0x3FC6	0x19D9      	XORWF       _SWR+1, 0, 1
0x3FC8	0x6E00      	MOVWF       R0 
0x3FCA	0x0E80      	MOVLW       128
0x3FCC	0x5C00      	SUBWF       R0, 0 
0x3FCE	0xE102      	BNZ         L__sub_tune582
0x3FD0	0x0E78      	MOVLW       120
0x3FD2	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune582:
0x3FD4	0xE201      	BC          L_sub_tune109
;main.h,432 :: 		return;
0x3FD6	0xD0DE      	BRA         L_end_sub_tune
L_sub_tune109:
;main.h,434 :: 		if (SWR < 200 & SWR < swr_mem & (swr_mem - SWR) > 100)
0x3FD8	0x0E80      	MOVLW       128
0x3FDA	0x19D9      	XORWF       _SWR+1, 0, 1
0x3FDC	0x6E01      	MOVWF       R1 
0x3FDE	0x0E80      	MOVLW       128
0x3FE0	0x5C01      	SUBWF       R1, 0 
0x3FE2	0xE102      	BNZ         L__sub_tune583
0x3FE4	0x0EC8      	MOVLW       200
0x3FE6	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune583:
0x3FE8	0x0E01      	MOVLW       1
0x3FEA	0xB0D8      	BTFSC       STATUS, 0 
0x3FEC	0x0E00      	MOVLW       0
0x3FEE	0x6E01      	MOVWF       R1 
0x3FF0	0x0E80      	MOVLW       128
0x3FF2	0x19D9      	XORWF       _SWR+1, 0, 1
0x3FF4	0x6E00      	MOVWF       R0 
0x3FF6	0x0E80      	MOVLW       128
0x3FF8	0x0103      	MOVLB       3
0x3FFA	0x1929      	XORWF       sub_tune_swr_mem_L0+1, 0, 1
0x3FFC	0x5C00      	SUBWF       R0, 0 
0x3FFE	0xE103      	BNZ         L__sub_tune584
0x4000	0x5128      	MOVF        sub_tune_swr_mem_L0, 0, 1
0x4002	0x0102      	MOVLB       2
0x4004	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune584:
0x4006	0x0102      	MOVLB       2
0x4008	0x0E01      	MOVLW       1
0x400A	0xB0D8      	BTFSC       STATUS, 0 
0x400C	0x0E00      	MOVLW       0
0x400E	0x6E00      	MOVWF       R0 
0x4010	0x5000      	MOVF        R0, 0 
0x4012	0x1401      	ANDWF       R1, 0 
0x4014	0x6E03      	MOVWF       R3 
0x4016	0x51D8      	MOVF        _SWR, 0, 1
0x4018	0x0103      	MOVLB       3
0x401A	0x5D28      	SUBWF       sub_tune_swr_mem_L0, 0, 1
0x401C	0x6E01      	MOVWF       R1 
0x401E	0x0102      	MOVLB       2
0x4020	0x51D9      	MOVF        _SWR+1, 0, 1
0x4022	0x0103      	MOVLB       3
0x4024	0x5929      	SUBWFB      sub_tune_swr_mem_L0+1, 0, 1
0x4026	0x6E02      	MOVWF       R2 
0x4028	0x0E80      	MOVLW       128
0x402A	0x6E00      	MOVWF       R0 
0x402C	0x0E80      	MOVLW       128
0x402E	0x1802      	XORWF       R2, 0 
0x4030	0x5C00      	SUBWF       R0, 0 
0x4032	0xE102      	BNZ         L__sub_tune585
0x4034	0x5001      	MOVF        R1, 0 
0x4036	0x0864      	SUBLW       100
L__sub_tune585:
0x4038	0x0E01      	MOVLW       1
0x403A	0xB0D8      	BTFSC       STATUS, 0 
0x403C	0x0E00      	MOVLW       0
0x403E	0x6E00      	MOVWF       R0 
0x4040	0x5003      	MOVF        R3, 0 
0x4042	0x1600      	ANDWF       R0, 1 
0x4044	0xE001      	BZ          L_sub_tune110
;main.h,435 :: 		return;
0x4046	0xD0A6      	BRA         L_end_sub_tune
L_sub_tune110:
;main.h,436 :: 		swr_mem = SWR;
0x4048	0xF328C2D8  	MOVFF       _SWR, sub_tune_swr_mem_L0
0x404C	0xF329C2D9  	MOVFF       _SWR+1, sub_tune_swr_mem_L0+1
;main.h,437 :: 		ind_mem = ind;
0x4050	0xF32AC275  	MOVFF       main_ind, sub_tune_ind_mem_L0
0x4054	0x0E00      	MOVLW       0
0x4056	0x6F2B      	MOVWF       sub_tune_ind_mem_L0+1, 1
;main.h,438 :: 		cap_mem = cap;
0x4058	0xF32CC25D  	MOVFF       main_cap, sub_tune_cap_mem_L0
0x405C	0x0E00      	MOVLW       0
0x405E	0x6F2D      	MOVWF       sub_tune_cap_mem_L0+1, 1
;main.h,440 :: 		if (SW == 1)
0x4060	0x0102      	MOVLB       2
0x4062	0x5173      	MOVF        main_SW, 0, 1
0x4064	0x0A01      	XORLW       1
0x4066	0xE102      	BNZ         L_sub_tune111
;main.h,441 :: 		SW = 0;
0x4068	0x6B73      	CLRF        main_SW, 1
0x406A	0xD002      	BRA         L_sub_tune112
L_sub_tune111:
;main.h,443 :: 		SW = 1;
0x406C	0x0E01      	MOVLW       1
0x406E	0x6F73      	MOVWF       main_SW, 1
L_sub_tune112:
;main.h,444 :: 		atu_reset();
0x4070	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,445 :: 		set_sw(SW);
0x4074	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x4078	0xF017ECAC  	CALL        _set_sw, 0
;main.h,446 :: 		Delay_ms(50);
0x407C	0x0E02      	MOVLW       2
0x407E	0x6E0B      	MOVWF       R11, 0
0x4080	0x0E04      	MOVLW       4
0x4082	0x6E0C      	MOVWF       R12, 0
0x4084	0x0EBA      	MOVLW       186
0x4086	0x6E0D      	MOVWF       R13, 0
L_sub_tune113:
0x4088	0x2E0D      	DECFSZ      R13, 1, 0
0x408A	0xD7FE      	BRA         L_sub_tune113
0x408C	0x2E0C      	DECFSZ      R12, 1, 0
0x408E	0xD7FC      	BRA         L_sub_tune113
0x4090	0x2E0B      	DECFSZ      R11, 1, 0
0x4092	0xD7FA      	BRA         L_sub_tune113
0x4094	0x0000      	NOP
;main.h,447 :: 		get_swr();
0x4096	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,448 :: 		if (SWR < 120)
0x409A	0x0E80      	MOVLW       128
0x409C	0x0102      	MOVLB       2
0x409E	0x19D9      	XORWF       _SWR+1, 0, 1
0x40A0	0x6E00      	MOVWF       R0 
0x40A2	0x0E80      	MOVLW       128
0x40A4	0x5C00      	SUBWF       R0, 0 
0x40A6	0xE102      	BNZ         L__sub_tune586
0x40A8	0x0E78      	MOVLW       120
0x40AA	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune586:
0x40AC	0xE201      	BC          L_sub_tune114
;main.h,449 :: 		return;
0x40AE	0xD072      	BRA         L_end_sub_tune
L_sub_tune114:
;main.h,451 :: 		coarse_tune();
0x40B0	0xDDDA      	RCALL       _coarse_tune
;main.h,452 :: 		if (SWR == 0) {
0x40B2	0x0E00      	MOVLW       0
0x40B4	0x0102      	MOVLB       2
0x40B6	0x19D9      	XORWF       _SWR+1, 0, 1
0x40B8	0xE102      	BNZ         L__sub_tune587
0x40BA	0x0E00      	MOVLW       0
0x40BC	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune587:
0x40BE	0xE103      	BNZ         L_sub_tune115
;main.h,453 :: 		atu_reset();
0x40C0	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,454 :: 		return;
0x40C4	0xD067      	BRA         L_end_sub_tune
;main.h,455 :: 		}
L_sub_tune115:
;main.h,456 :: 		get_swr();
0x40C6	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,457 :: 		if (SWR < 120)
0x40CA	0x0E80      	MOVLW       128
0x40CC	0x0102      	MOVLB       2
0x40CE	0x19D9      	XORWF       _SWR+1, 0, 1
0x40D0	0x6E00      	MOVWF       R0 
0x40D2	0x0E80      	MOVLW       128
0x40D4	0x5C00      	SUBWF       R0, 0 
0x40D6	0xE102      	BNZ         L__sub_tune588
0x40D8	0x0E78      	MOVLW       120
0x40DA	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune588:
0x40DC	0xE201      	BC          L_sub_tune116
;main.h,458 :: 		return;
0x40DE	0xD05A      	BRA         L_end_sub_tune
L_sub_tune116:
;main.h,459 :: 		sharp_ind();
0x40E0	0xDD01      	RCALL       _sharp_ind
;main.h,460 :: 		if (SWR == 0) {
0x40E2	0x0E00      	MOVLW       0
0x40E4	0x0102      	MOVLB       2
0x40E6	0x19D9      	XORWF       _SWR+1, 0, 1
0x40E8	0xE102      	BNZ         L__sub_tune589
0x40EA	0x0E00      	MOVLW       0
0x40EC	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune589:
0x40EE	0xE103      	BNZ         L_sub_tune117
;main.h,461 :: 		atu_reset();
0x40F0	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,462 :: 		return;
0x40F4	0xD04F      	BRA         L_end_sub_tune
;main.h,463 :: 		}
L_sub_tune117:
;main.h,464 :: 		get_swr();
0x40F6	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,465 :: 		if (SWR < 120)
0x40FA	0x0E80      	MOVLW       128
0x40FC	0x0102      	MOVLB       2
0x40FE	0x19D9      	XORWF       _SWR+1, 0, 1
0x4100	0x6E00      	MOVWF       R0 
0x4102	0x0E80      	MOVLW       128
0x4104	0x5C00      	SUBWF       R0, 0 
0x4106	0xE102      	BNZ         L__sub_tune590
0x4108	0x0E78      	MOVLW       120
0x410A	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune590:
0x410C	0xE201      	BC          L_sub_tune118
;main.h,466 :: 		return;
0x410E	0xD042      	BRA         L_end_sub_tune
L_sub_tune118:
;main.h,467 :: 		sharp_cap();
0x4110	0xDE59      	RCALL       _sharp_cap
;main.h,468 :: 		if (SWR == 0) {
0x4112	0x0E00      	MOVLW       0
0x4114	0x0102      	MOVLB       2
0x4116	0x19D9      	XORWF       _SWR+1, 0, 1
0x4118	0xE102      	BNZ         L__sub_tune591
0x411A	0x0E00      	MOVLW       0
0x411C	0x19D8      	XORWF       _SWR, 0, 1
L__sub_tune591:
0x411E	0xE103      	BNZ         L_sub_tune119
;main.h,469 :: 		atu_reset();
0x4120	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,470 :: 		return;
0x4124	0xD037      	BRA         L_end_sub_tune
;main.h,471 :: 		}
L_sub_tune119:
;main.h,472 :: 		get_swr();
0x4126	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,473 :: 		if (SWR < 120)
0x412A	0x0E80      	MOVLW       128
0x412C	0x0102      	MOVLB       2
0x412E	0x19D9      	XORWF       _SWR+1, 0, 1
0x4130	0x6E00      	MOVWF       R0 
0x4132	0x0E80      	MOVLW       128
0x4134	0x5C00      	SUBWF       R0, 0 
0x4136	0xE102      	BNZ         L__sub_tune592
0x4138	0x0E78      	MOVLW       120
0x413A	0x5DD8      	SUBWF       _SWR, 0, 1
L__sub_tune592:
0x413C	0xE201      	BC          L_sub_tune120
;main.h,474 :: 		return;
0x413E	0xD02A      	BRA         L_end_sub_tune
L_sub_tune120:
;main.h,476 :: 		if (SWR > swr_mem)
0x4140	0x0E80      	MOVLW       128
0x4142	0x0103      	MOVLB       3
0x4144	0x1929      	XORWF       sub_tune_swr_mem_L0+1, 0, 1
0x4146	0x6E00      	MOVWF       R0 
0x4148	0x0E80      	MOVLW       128
0x414A	0x0102      	MOVLB       2
0x414C	0x19D9      	XORWF       _SWR+1, 0, 1
0x414E	0x5C00      	SUBWF       R0, 0 
0x4150	0xE103      	BNZ         L__sub_tune593
0x4152	0x51D8      	MOVF        _SWR, 0, 1
0x4154	0x0103      	MOVLB       3
0x4156	0x5D28      	SUBWF       sub_tune_swr_mem_L0, 0, 1
L__sub_tune593:
0x4158	0xE21C      	BC          L_sub_tune121
;main.h,478 :: 		if (SW == 1)
0x415A	0x0102      	MOVLB       2
0x415C	0x5173      	MOVF        main_SW, 0, 1
0x415E	0x0A01      	XORLW       1
0x4160	0xE102      	BNZ         L_sub_tune122
;main.h,479 :: 		SW = 0;
0x4162	0x6B73      	CLRF        main_SW, 1
0x4164	0xD002      	BRA         L_sub_tune123
L_sub_tune122:
;main.h,481 :: 		SW = 1;
0x4166	0x0E01      	MOVLW       1
0x4168	0x6F73      	MOVWF       main_SW, 1
L_sub_tune123:
;main.h,482 :: 		set_sw(SW);
0x416A	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x416E	0xF017ECAC  	CALL        _set_sw, 0
;main.h,483 :: 		ind = ind_mem;
0x4172	0xF275C32A  	MOVFF       sub_tune_ind_mem_L0, main_ind
;main.h,484 :: 		cap = cap_mem;
0x4176	0xF25DC32C  	MOVFF       sub_tune_cap_mem_L0, main_cap
;main.h,485 :: 		set_ind(ind);
0x417A	0xF341C32A  	MOVFF       sub_tune_ind_mem_L0, FARG_set_ind_Ind
0x417E	0xF017EC39  	CALL        _set_ind, 0
;main.h,486 :: 		set_cap(cap);
0x4182	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x4186	0xF012EC5F  	CALL        _set_cap, 0
;main.h,487 :: 		SWR = swr_mem;
0x418A	0xF2D8C328  	MOVFF       sub_tune_swr_mem_L0, _SWR
0x418E	0xF2D9C329  	MOVFF       sub_tune_swr_mem_L0+1, _SWR+1
;main.h,488 :: 		}
L_sub_tune121:
;main.h,490 :: 		asm CLRWDT;
0x4192	0x0004      	CLRWDT
;main.h,491 :: 		return;
;main.h,492 :: 		}
L_end_sub_tune:
0x4194	0x0012      	RETURN      0
; end of _sub_tune
_tune:
;main.h,496 :: 		void tune()
;main.h,500 :: 		asm CLRWDT;
0x4196	0x0004      	CLRWDT
;main.h,502 :: 		p_cnt = 0;
0x4198	0x0102      	MOVLB       2
0x419A	0x6B8B      	CLRF        _p_cnt, 1
;main.h,503 :: 		P_max = 0;
0x419C	0x6BDC      	CLRF        _P_max, 1
0x419E	0x6BDD      	CLRF        _P_max+1, 1
;main.h,505 :: 		rready = 0;
0x41A0	0x6B76      	CLRF        _rready, 1
;main.h,506 :: 		get_swr();
0x41A2	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,507 :: 		if (SWR < 110)
0x41A6	0x0E80      	MOVLW       128
0x41A8	0x0102      	MOVLB       2
0x41AA	0x19D9      	XORWF       _SWR+1, 0, 1
0x41AC	0x6E00      	MOVWF       R0 
0x41AE	0x0E80      	MOVLW       128
0x41B0	0x5C00      	SUBWF       R0, 0 
0x41B2	0xE102      	BNZ         L__tune595
0x41B4	0x0E6E      	MOVLW       110
0x41B6	0x5DD8      	SUBWF       _SWR, 0, 1
L__tune595:
0x41B8	0xE201      	BC          L_tune124
;main.h,508 :: 		return;
0x41BA	0xD0AB      	BRA         L_end_tune
L_tune124:
;main.h,509 :: 		atu_reset();
0x41BC	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,510 :: 		if (Loss_ind == 0)
0x41C0	0x0102      	MOVLB       2
0x41C2	0x515B      	MOVF        main_Loss_ind, 0, 1
0x41C4	0x0A00      	XORLW       0
0x41C6	0xE102      	BNZ         L_tune125
;main.h,511 :: 		lcd_ind();                // wyświetlenie wartości L i C
0x41C8	0xF008EC10  	CALL        _lcd_ind, 0
L_tune125:
;main.h,512 :: 		Delay_ms(50);
0x41CC	0x0E02      	MOVLW       2
0x41CE	0x6E0B      	MOVWF       R11, 0
0x41D0	0x0E04      	MOVLW       4
0x41D2	0x6E0C      	MOVWF       R12, 0
0x41D4	0x0EBA      	MOVLW       186
0x41D6	0x6E0D      	MOVWF       R13, 0
L_tune126:
0x41D8	0x2E0D      	DECFSZ      R13, 1, 0
0x41DA	0xD7FE      	BRA         L_tune126
0x41DC	0x2E0C      	DECFSZ      R12, 1, 0
0x41DE	0xD7FC      	BRA         L_tune126
0x41E0	0x2E0B      	DECFSZ      R11, 1, 0
0x41E2	0xD7FA      	BRA         L_tune126
0x41E4	0x0000      	NOP
;main.h,513 :: 		get_swr();
0x41E6	0xF01CEC2B  	CALL        _get_swr, 0
;main.h,514 :: 		swr_a = SWR;
0x41EA	0xF2D3C2D8  	MOVFF       _SWR, _swr_a
0x41EE	0xF2D4C2D9  	MOVFF       _SWR+1, _swr_a+1
;main.h,515 :: 		if (SWR < 110)
0x41F2	0x0E80      	MOVLW       128
0x41F4	0x0102      	MOVLB       2
0x41F6	0x19D9      	XORWF       _SWR+1, 0, 1
0x41F8	0x6E00      	MOVWF       R0 
0x41FA	0x0E80      	MOVLW       128
0x41FC	0x5C00      	SUBWF       R0, 0 
0x41FE	0xE102      	BNZ         L__tune596
0x4200	0x0E6E      	MOVLW       110
0x4202	0x5DD8      	SUBWF       _SWR, 0, 1
L__tune596:
0x4204	0xE201      	BC          L_tune127
;main.h,516 :: 		return;
0x4206	0xD085      	BRA         L_end_tune
L_tune127:
;main.h,517 :: 		if (max_swr > 110 & SWR > max_swr)
0x4208	0x0E80      	MOVLW       128
0x420A	0x6E01      	MOVWF       R1 
0x420C	0x0E80      	MOVLW       128
0x420E	0x0103      	MOVLB       3
0x4210	0x190E      	XORWF       main_max_swr+1, 0, 1
0x4212	0x5C01      	SUBWF       R1, 0 
0x4214	0xE102      	BNZ         L__tune597
0x4216	0x510D      	MOVF        main_max_swr, 0, 1
0x4218	0x086E      	SUBLW       110
L__tune597:
0x421A	0x0E01      	MOVLW       1
0x421C	0xB0D8      	BTFSC       STATUS, 0 
0x421E	0x0E00      	MOVLW       0
0x4220	0x6E01      	MOVWF       R1 
0x4222	0x0E80      	MOVLW       128
0x4224	0x190E      	XORWF       main_max_swr+1, 0, 1
0x4226	0x6E00      	MOVWF       R0 
0x4228	0x0E80      	MOVLW       128
0x422A	0x0102      	MOVLB       2
0x422C	0x19D9      	XORWF       _SWR+1, 0, 1
0x422E	0x5C00      	SUBWF       R0, 0 
0x4230	0xE103      	BNZ         L__tune598
0x4232	0x51D8      	MOVF        _SWR, 0, 1
0x4234	0x0103      	MOVLB       3
0x4236	0x5D0D      	SUBWF       main_max_swr, 0, 1
L__tune598:
0x4238	0x0E01      	MOVLW       1
0x423A	0xB0D8      	BTFSC       STATUS, 0 
0x423C	0x0E00      	MOVLW       0
0x423E	0x6E00      	MOVWF       R0 
0x4240	0x5001      	MOVF        R1, 0 
0x4242	0x1600      	ANDWF       R0, 1 
0x4244	0xE001      	BZ          L_tune128
;main.h,519 :: 		return;
0x4246	0xD065      	BRA         L_end_tune
L_tune128:
;main.h,522 :: 		sub_tune();
0x4248	0xDE7E      	RCALL       _sub_tune
;main.h,523 :: 		if (SWR == 0)
0x424A	0x0E00      	MOVLW       0
0x424C	0x0102      	MOVLB       2
0x424E	0x19D9      	XORWF       _SWR+1, 0, 1
0x4250	0xE102      	BNZ         L__tune599
0x4252	0x0E00      	MOVLW       0
0x4254	0x19D8      	XORWF       _SWR, 0, 1
L__tune599:
0x4256	0xE103      	BNZ         L_tune129
;main.h,525 :: 		atu_reset();
0x4258	0xF017ECB9  	CALL        _atu_reset, 0
;main.h,526 :: 		return;
0x425C	0xD05A      	BRA         L_end_tune
;main.h,527 :: 		}
L_tune129:
;main.h,528 :: 		if (SWR < 120)
0x425E	0x0E80      	MOVLW       128
0x4260	0x0102      	MOVLB       2
0x4262	0x19D9      	XORWF       _SWR+1, 0, 1
0x4264	0x6E00      	MOVWF       R0 
0x4266	0x0E80      	MOVLW       128
0x4268	0x5C00      	SUBWF       R0, 0 
0x426A	0xE102      	BNZ         L__tune600
0x426C	0x0E78      	MOVLW       120
0x426E	0x5DD8      	SUBWF       _SWR, 0, 1
L__tune600:
0x4270	0xE201      	BC          L_tune130
;main.h,529 :: 		return;
0x4272	0xD04F      	BRA         L_end_tune
L_tune130:
;main.h,530 :: 		if (C_q == 5 & L_q == 5)
0x4274	0x51B4      	MOVF        main_C_q, 0, 1
0x4276	0x0A05      	XORLW       5
0x4278	0x0E01      	MOVLW       1
0x427A	0xA4D8      	BTFSS       STATUS, 2 
0x427C	0x0E00      	MOVLW       0
0x427E	0x6E01      	MOVWF       R1 
0x4280	0x51B5      	MOVF        main_L_q, 0, 1
0x4282	0x0A05      	XORLW       5
0x4284	0x0E01      	MOVLW       1
0x4286	0xA4D8      	BTFSS       STATUS, 2 
0x4288	0x0E00      	MOVLW       0
0x428A	0x6E00      	MOVWF       R0 
0x428C	0x5001      	MOVF        R1, 0 
0x428E	0x1600      	ANDWF       R0, 1 
0x4290	0xE001      	BZ          L_tune131
;main.h,531 :: 		return;
0x4292	0xD03F      	BRA         L_end_tune
L_tune131:
;main.h,533 :: 		if (L_q > 5)
0x4294	0x51B5      	MOVF        main_L_q, 0, 1
0x4296	0x0805      	SUBLW       5
0x4298	0xE205      	BC          L_tune132
;main.h,535 :: 		step_ind = L_mult;
0x429A	0xF2B7C2B6  	MOVFF       main_L_mult, main_step_ind
;main.h,536 :: 		L_mult = 1;
0x429E	0x0E01      	MOVLW       1
0x42A0	0x6FB6      	MOVWF       main_L_mult, 1
;main.h,537 :: 		sharp_ind();
0x42A2	0xDC20      	RCALL       _sharp_ind
;main.h,538 :: 		}
L_tune132:
;main.h,539 :: 		if (SWR < 120)
0x42A4	0x0E80      	MOVLW       128
0x42A6	0x0102      	MOVLB       2
0x42A8	0x19D9      	XORWF       _SWR+1, 0, 1
0x42AA	0x6E00      	MOVWF       R0 
0x42AC	0x0E80      	MOVLW       128
0x42AE	0x5C00      	SUBWF       R0, 0 
0x42B0	0xE102      	BNZ         L__tune601
0x42B2	0x0E78      	MOVLW       120
0x42B4	0x5DD8      	SUBWF       _SWR, 0, 1
L__tune601:
0x42B6	0xE201      	BC          L_tune133
;main.h,540 :: 		return;
0x42B8	0xD02C      	BRA         L_end_tune
L_tune133:
;main.h,542 :: 		if (C_q > 5)
0x42BA	0x51B4      	MOVF        main_C_q, 0, 1
0x42BC	0x0805      	SUBLW       5
0x42BE	0xE205      	BC          L_tune134
;main.h,544 :: 		step_cap = C_mult; // = C_mult
0x42C0	0xF2A8C2A7  	MOVFF       main_C_mult, main_step_cap
;main.h,545 :: 		C_mult = 1;
0x42C4	0x0E01      	MOVLW       1
0x42C6	0x6FA7      	MOVWF       main_C_mult, 1
;main.h,546 :: 		sharp_cap();
0x42C8	0xDD7D      	RCALL       _sharp_cap
;main.h,547 :: 		}
L_tune134:
;main.h,548 :: 		if (L_q == 5)
0x42CA	0x0102      	MOVLB       2
0x42CC	0x51B5      	MOVF        main_L_q, 0, 1
0x42CE	0x0A05      	XORLW       5
0x42D0	0xE103      	BNZ         L_tune135
;main.h,549 :: 		L_mult = 1;
0x42D2	0x0E01      	MOVLW       1
0x42D4	0x6FB6      	MOVWF       main_L_mult, 1
0x42D6	0xD00B      	BRA         L_tune136
L_tune135:
;main.h,550 :: 		else if (L_q == 6)
0x42D8	0x51B5      	MOVF        main_L_q, 0, 1
0x42DA	0x0A06      	XORLW       6
0x42DC	0xE103      	BNZ         L_tune137
;main.h,551 :: 		L_mult = 2;
0x42DE	0x0E02      	MOVLW       2
0x42E0	0x6FB6      	MOVWF       main_L_mult, 1
0x42E2	0xD005      	BRA         L_tune138
L_tune137:
;main.h,552 :: 		else if (L_q == 7)
0x42E4	0x51B5      	MOVF        main_L_q, 0, 1
0x42E6	0x0A07      	XORLW       7
0x42E8	0xE102      	BNZ         L_tune139
;main.h,553 :: 		L_mult = 4;
0x42EA	0x0E04      	MOVLW       4
0x42EC	0x6FB6      	MOVWF       main_L_mult, 1
L_tune139:
L_tune138:
L_tune136:
;main.h,554 :: 		if (C_q == 5)
0x42EE	0x51B4      	MOVF        main_C_q, 0, 1
0x42F0	0x0A05      	XORLW       5
0x42F2	0xE103      	BNZ         L_tune140
;main.h,555 :: 		C_mult = 1;
0x42F4	0x0E01      	MOVLW       1
0x42F6	0x6FA7      	MOVWF       main_C_mult, 1
0x42F8	0xD00B      	BRA         L_tune141
L_tune140:
;main.h,556 :: 		else if (C_q == 6)
0x42FA	0x51B4      	MOVF        main_C_q, 0, 1
0x42FC	0x0A06      	XORLW       6
0x42FE	0xE103      	BNZ         L_tune142
;main.h,557 :: 		C_mult = 2;
0x4300	0x0E02      	MOVLW       2
0x4302	0x6FA7      	MOVWF       main_C_mult, 1
0x4304	0xD005      	BRA         L_tune143
L_tune142:
;main.h,558 :: 		else if (C_q == 7)
0x4306	0x51B4      	MOVF        main_C_q, 0, 1
0x4308	0x0A07      	XORLW       7
0x430A	0xE102      	BNZ         L_tune144
;main.h,559 :: 		C_mult = 4;
0x430C	0x0E04      	MOVLW       4
0x430E	0x6FA7      	MOVWF       main_C_mult, 1
L_tune144:
L_tune143:
L_tune141:
;main.h,560 :: 		asm CLRWDT;
0x4310	0x0004      	CLRWDT
;main.h,561 :: 		return;
;main.h,562 :: 		}
L_end_tune:
0x4312	0x0012      	RETURN      0
; end of _tune
_oled_init:
;oled_control.c,84 :: 		void oled_init (void) {  // OLED init
;oled_control.c,86 :: 		Soft_I2C_Start();
0x4314	0xF000EC45  	CALL        _Soft_I2C_Start, 0
;oled_control.c,87 :: 		Soft_I2C_Write(led_addr);             // device addres
0x4318	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x431C	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,88 :: 		Soft_I2C_Write(0);              // 0 - continious mode, command; 64 - Co, data
0x4320	0x0103      	MOVLB       3
0x4322	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x4324	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,89 :: 		Soft_I2C_Write (0xAE); // display OFF
0x4328	0x0EAE      	MOVLW       174
0x432A	0x0103      	MOVLB       3
0x432C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x432E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,91 :: 		if(led_type==2 | led_type==3) { // 128*32 OLED
0x4332	0x0102      	MOVLB       2
0x4334	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x4336	0x0A02      	XORLW       2
0x4338	0x0E01      	MOVLW       1
0x433A	0xA4D8      	BTFSS       STATUS, 2 
0x433C	0x0E00      	MOVLW       0
0x433E	0x6E01      	MOVWF       R1 
0x4340	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x4342	0x0A03      	XORLW       3
0x4344	0x0E01      	MOVLW       1
0x4346	0xA4D8      	BTFSS       STATUS, 2 
0x4348	0x0E00      	MOVLW       0
0x434A	0x6E00      	MOVWF       R0 
0x434C	0x5001      	MOVF        R1, 0 
0x434E	0x1200      	IORWF       R0, 1 
0x4350	0xB4D8      	BTFSC       STATUS, 2 
0x4352	0xD097      	BRA         L_oled_init18
;oled_control.c,92 :: 		Soft_I2C_Write (0xD5); // clock division
0x4354	0x0ED5      	MOVLW       213
0x4356	0x0103      	MOVLB       3
0x4358	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x435A	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,93 :: 		Soft_I2C_Write (0x80); // ratio
0x435E	0x0E80      	MOVLW       128
0x4360	0x0103      	MOVLB       3
0x4362	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4364	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,95 :: 		Soft_I2C_Write (0xA8); //  multiplexer
0x4368	0x0EA8      	MOVLW       168
0x436A	0x0103      	MOVLB       3
0x436C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x436E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,96 :: 		Soft_I2C_Write (0x3f); //
0x4372	0x0E3F      	MOVLW       63
0x4374	0x0103      	MOVLB       3
0x4376	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4378	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,98 :: 		Soft_I2C_Write (0xD3); //  offset
0x437C	0x0ED3      	MOVLW       211
0x437E	0x0103      	MOVLB       3
0x4380	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4382	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,99 :: 		if(led_type==2) Soft_I2C_Write (0 + shift_line); // column shift
0x4386	0x0102      	MOVLB       2
0x4388	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x438A	0x0A02      	XORLW       2
0x438C	0xE105      	BNZ         L_oled_init19
0x438E	0xF37FC2CA  	MOVFF       oled_control_shift_line, FARG_Soft_I2C_Write_d
0x4392	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
0x4396	0xD007      	BRA         L_oled_init20
L_oled_init19:
;oled_control.c,100 :: 		else Soft_I2C_Write (31 + shift_line); // column shift
0x4398	0x0102      	MOVLB       2
0x439A	0x51CA      	MOVF        oled_control_shift_line, 0, 1
0x439C	0x0F1F      	ADDLW       31
0x439E	0x0103      	MOVLB       3
0x43A0	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43A2	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
L_oled_init20:
;oled_control.c,102 :: 		Soft_I2C_Write (0x40); // set line, line = 0
0x43A6	0x0E40      	MOVLW       64
0x43A8	0x0103      	MOVLB       3
0x43AA	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43AC	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,104 :: 		Soft_I2C_Write (0x8D); //  charge pump
0x43B0	0x0E8D      	MOVLW       141
0x43B2	0x0103      	MOVLB       3
0x43B4	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43B6	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,105 :: 		Soft_I2C_Write (0x14); //  0x10 - external, 0x14 - internal
0x43BA	0x0E14      	MOVLW       20
0x43BC	0x0103      	MOVLB       3
0x43BE	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43C0	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,107 :: 		Soft_I2C_Write (0x81); //  contrast
0x43C4	0x0E81      	MOVLW       129
0x43C6	0x0103      	MOVLB       3
0x43C8	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43CA	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,108 :: 		Soft_I2C_Write (180); //   0-255
0x43CE	0x0EB4      	MOVLW       180
0x43D0	0x0103      	MOVLB       3
0x43D2	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43D4	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,110 :: 		Soft_I2C_Write (0xD9); //  pre-charge
0x43D8	0x0ED9      	MOVLW       217
0x43DA	0x0103      	MOVLB       3
0x43DC	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43DE	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,111 :: 		Soft_I2C_Write (0x22); //  0x22 - external, 0xF1 - internal
0x43E2	0x0E22      	MOVLW       34
0x43E4	0x0103      	MOVLB       3
0x43E6	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43E8	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,113 :: 		Soft_I2C_Write (0x20); //  memory addressing mode
0x43EC	0x0E20      	MOVLW       32
0x43EE	0x0103      	MOVLB       3
0x43F0	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43F2	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,114 :: 		Soft_I2C_Write (0x02); //  page addressing mode
0x43F6	0x0E02      	MOVLW       2
0x43F8	0x0103      	MOVLB       3
0x43FA	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x43FC	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,116 :: 		Soft_I2C_Write (0x21); // set column range
0x4400	0x0E21      	MOVLW       33
0x4402	0x0103      	MOVLB       3
0x4404	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4406	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,117 :: 		Soft_I2C_Write (0);    // column start
0x440A	0x0103      	MOVLB       3
0x440C	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x440E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,118 :: 		Soft_I2C_Write (127);  // column stop
0x4412	0x0E7F      	MOVLW       127
0x4414	0x0103      	MOVLB       3
0x4416	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4418	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,120 :: 		Soft_I2C_Write (0x2E); //  stop scrolling
0x441C	0x0E2E      	MOVLW       46
0x441E	0x0103      	MOVLB       3
0x4420	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4422	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,122 :: 		if(led_type==2) {
0x4426	0x0102      	MOVLB       2
0x4428	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x442A	0x0A02      	XORLW       2
0x442C	0xE10B      	BNZ         L_oled_init21
;oled_control.c,123 :: 		Soft_I2C_Write (0xA0); //  segment re-map, A0 - normal, A1 - remapped
0x442E	0x0EA0      	MOVLW       160
0x4430	0x0103      	MOVLB       3
0x4432	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4434	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,125 :: 		Soft_I2C_Write (0xC0); // scan direction, C0 - normal, C8 - remapped
0x4438	0x0EC0      	MOVLW       192
0x443A	0x0103      	MOVLB       3
0x443C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x443E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,126 :: 		}
0x4442	0xD00A      	BRA         L_oled_init22
L_oled_init21:
;oled_control.c,128 :: 		Soft_I2C_Write (0xA1); //  segment re-map, A0 - normal, A1 - remapped
0x4444	0x0EA1      	MOVLW       161
0x4446	0x0103      	MOVLB       3
0x4448	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x444A	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,130 :: 		Soft_I2C_Write (0xC8); // scan direction, C0 - normal, C8 - remapped
0x444E	0x0EC8      	MOVLW       200
0x4450	0x0103      	MOVLB       3
0x4452	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4454	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,131 :: 		}
L_oled_init22:
;oled_control.c,133 :: 		Soft_I2C_Write (0xDA); //  COM pins configure
0x4458	0x0EDA      	MOVLW       218
0x445A	0x0103      	MOVLB       3
0x445C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x445E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,134 :: 		Soft_I2C_Write (0x02); // 12 for x64
0x4462	0x0E02      	MOVLW       2
0x4464	0x0103      	MOVLB       3
0x4466	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4468	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,136 :: 		Soft_I2C_Write (0xDB); //  V-COM detect
0x446C	0x0EDB      	MOVLW       219
0x446E	0x0103      	MOVLB       3
0x4470	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4472	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,137 :: 		Soft_I2C_Write (0x40); //
0x4476	0x0E40      	MOVLW       64
0x4478	0x0103      	MOVLB       3
0x447A	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x447C	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,139 :: 		}
0x4480	0xD08A      	BRA         L_oled_init23
L_oled_init18:
;oled_control.c,141 :: 		Soft_I2C_Write (0xD5); // clock division
0x4482	0x0ED5      	MOVLW       213
0x4484	0x0103      	MOVLB       3
0x4486	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4488	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,142 :: 		Soft_I2C_Write (0x80); // ratio
0x448C	0x0E80      	MOVLW       128
0x448E	0x0103      	MOVLB       3
0x4490	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4492	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,144 :: 		Soft_I2C_Write (0xA8); //  multiplexer
0x4496	0x0EA8      	MOVLW       168
0x4498	0x0103      	MOVLB       3
0x449A	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x449C	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,145 :: 		Soft_I2C_Write (63); //
0x44A0	0x0E3F      	MOVLW       63
0x44A2	0x0103      	MOVLB       3
0x44A4	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44A6	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,147 :: 		Soft_I2C_Write (0xD3); //  offset
0x44AA	0x0ED3      	MOVLW       211
0x44AC	0x0103      	MOVLB       3
0x44AE	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44B0	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,148 :: 		Soft_I2C_Write (shift_line); // no offset for x64 !
0x44B4	0xF37FC2CA  	MOVFF       oled_control_shift_line, FARG_Soft_I2C_Write_d
0x44B8	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,150 :: 		Soft_I2C_Write (0x40); // set line, line = 0
0x44BC	0x0E40      	MOVLW       64
0x44BE	0x0103      	MOVLB       3
0x44C0	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44C2	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,152 :: 		Soft_I2C_Write (0x8D); //  charge pump
0x44C6	0x0E8D      	MOVLW       141
0x44C8	0x0103      	MOVLB       3
0x44CA	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44CC	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,153 :: 		Soft_I2C_Write (0x14); //  0x10 - external, 0x14 - internal
0x44D0	0x0E14      	MOVLW       20
0x44D2	0x0103      	MOVLB       3
0x44D4	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44D6	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,155 :: 		Soft_I2C_Write (0x81); //  contrast
0x44DA	0x0E81      	MOVLW       129
0x44DC	0x0103      	MOVLB       3
0x44DE	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44E0	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,156 :: 		Soft_I2C_Write (255); //   0-255
0x44E4	0x0EFF      	MOVLW       255
0x44E6	0x0103      	MOVLB       3
0x44E8	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44EA	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,158 :: 		Soft_I2C_Write (0xD9); //  pre-charge
0x44EE	0x0ED9      	MOVLW       217
0x44F0	0x0103      	MOVLB       3
0x44F2	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44F4	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,159 :: 		Soft_I2C_Write (0xf1); //  0x22 - external, 0xF1 - internal
0x44F8	0x0EF1      	MOVLW       241
0x44FA	0x0103      	MOVLB       3
0x44FC	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x44FE	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,161 :: 		Soft_I2C_Write (0x20); //  memory addressing mode
0x4502	0x0E20      	MOVLW       32
0x4504	0x0103      	MOVLB       3
0x4506	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4508	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,162 :: 		Soft_I2C_Write (0x02); //  page addressing mode   02
0x450C	0x0E02      	MOVLW       2
0x450E	0x0103      	MOVLB       3
0x4510	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4512	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,164 :: 		Soft_I2C_Write (0x21); // set column range
0x4516	0x0E21      	MOVLW       33
0x4518	0x0103      	MOVLB       3
0x451A	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x451C	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,165 :: 		Soft_I2C_Write (0);    // column start
0x4520	0x0103      	MOVLB       3
0x4522	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x4524	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,166 :: 		Soft_I2C_Write (127);  // column stop
0x4528	0x0E7F      	MOVLW       127
0x452A	0x0103      	MOVLB       3
0x452C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x452E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,168 :: 		Soft_I2C_Write (0x2E); //  stop scrolling
0x4532	0x0E2E      	MOVLW       46
0x4534	0x0103      	MOVLB       3
0x4536	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4538	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,170 :: 		if(led_type==4) {
0x453C	0x0102      	MOVLB       2
0x453E	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x4540	0x0A04      	XORLW       4
0x4542	0xE10B      	BNZ         L_oled_init24
;oled_control.c,171 :: 		Soft_I2C_Write (0xA0); //  segment re-map, A0 - normal, A1 - remapped
0x4544	0x0EA0      	MOVLW       160
0x4546	0x0103      	MOVLB       3
0x4548	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x454A	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,173 :: 		Soft_I2C_Write (0xC0); // scan direction, C0 - normal, C8 - remapped
0x454E	0x0EC0      	MOVLW       192
0x4550	0x0103      	MOVLB       3
0x4552	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4554	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,174 :: 		}
0x4558	0xD00A      	BRA         L_oled_init25
L_oled_init24:
;oled_control.c,176 :: 		Soft_I2C_Write (0xA1); //  segment re-map, A0 - normal, A1 - remapped
0x455A	0x0EA1      	MOVLW       161
0x455C	0x0103      	MOVLB       3
0x455E	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4560	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,178 :: 		Soft_I2C_Write (0xC8); // scan direction, C0 - normal, C8 - remapped
0x4564	0x0EC8      	MOVLW       200
0x4566	0x0103      	MOVLB       3
0x4568	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x456A	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,179 :: 		}
L_oled_init25:
;oled_control.c,181 :: 		Soft_I2C_Write (0xDA); //  COM pins configure
0x456E	0x0EDA      	MOVLW       218
0x4570	0x0103      	MOVLB       3
0x4572	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4574	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,182 :: 		Soft_I2C_Write (0x12); // 12 for x64
0x4578	0x0E12      	MOVLW       18
0x457A	0x0103      	MOVLB       3
0x457C	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x457E	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,184 :: 		Soft_I2C_Write (0xDB); //  V-COM detect
0x4582	0x0EDB      	MOVLW       219
0x4584	0x0103      	MOVLB       3
0x4586	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4588	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,185 :: 		Soft_I2C_Write (0x40); //
0x458C	0x0E40      	MOVLW       64
0x458E	0x0103      	MOVLB       3
0x4590	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x4592	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,186 :: 		}
L_oled_init23:
;oled_control.c,187 :: 		Soft_I2C_Write (0xA4); //  display entire ON
0x4596	0x0EA4      	MOVLW       164
0x4598	0x0103      	MOVLB       3
0x459A	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x459C	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,189 :: 		Soft_I2C_Write (0xA6); // 0xA6 - normal, 0xA7 - inverse
0x45A0	0x0EA6      	MOVLW       166
0x45A2	0x0103      	MOVLB       3
0x45A4	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x45A6	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,191 :: 		Soft_I2C_Stop ();
0x45AA	0xF000EC69  	CALL        _Soft_I2C_Stop, 0
;oled_control.c,195 :: 		Delay_ms(100);
0x45AE	0x0E03      	MOVLW       3
0x45B0	0x6E0B      	MOVWF       R11, 0
0x45B2	0x0E08      	MOVLW       8
0x45B4	0x6E0C      	MOVWF       R12, 0
0x45B6	0x0E77      	MOVLW       119
0x45B8	0x6E0D      	MOVWF       R13, 0
L_oled_init26:
0x45BA	0x2E0D      	DECFSZ      R13, 1, 0
0x45BC	0xD7FE      	BRA         L_oled_init26
0x45BE	0x2E0C      	DECFSZ      R12, 1, 0
0x45C0	0xD7FC      	BRA         L_oled_init26
0x45C2	0x2E0B      	DECFSZ      R11, 1, 0
0x45C4	0xD7FA      	BRA         L_oled_init26
;oled_control.c,196 :: 		Soft_I2C_Start();
0x45C6	0xF000EC45  	CALL        _Soft_I2C_Start, 0
;oled_control.c,197 :: 		Soft_I2C_Write(led_addr);             // device addres
0x45CA	0xF37FC2CC  	MOVFF       oled_control_led_addr, FARG_Soft_I2C_Write_d
0x45CE	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,198 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x45D2	0x0E40      	MOVLW       64
0x45D4	0x0103      	MOVLB       3
0x45D6	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x45D8	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;oled_control.c,200 :: 		if(led_type==2 | led_type==3) {  // 128*32 OLED
0x45DC	0x0102      	MOVLB       2
0x45DE	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x45E0	0x0A02      	XORLW       2
0x45E2	0x0E01      	MOVLW       1
0x45E4	0xA4D8      	BTFSS       STATUS, 2 
0x45E6	0x0E00      	MOVLW       0
0x45E8	0x6E01      	MOVWF       R1 
0x45EA	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x45EC	0x0A03      	XORLW       3
0x45EE	0x0E01      	MOVLW       1
0x45F0	0xA4D8      	BTFSS       STATUS, 2 
0x45F2	0x0E00      	MOVLW       0
0x45F4	0x6E00      	MOVWF       R0 
0x45F6	0x5001      	MOVF        R1, 0 
0x45F8	0x1200      	IORWF       R0, 1 
0x45FA	0xE019      	BZ          L_oled_init27
;oled_control.c,201 :: 		for (r = 0; r <=3; r++) {
0x45FC	0x0103      	MOVLB       3
0x45FE	0x6B27      	CLRF        oled_init_r_L0, 1
L_oled_init28:
0x4600	0x5127      	MOVF        oled_init_r_L0, 0, 1
0x4602	0x0803      	SUBLW       3
0x4604	0xE313      	BNC         L_oled_init29
;oled_control.c,202 :: 		set_addressing (r, 0);    // clear all 4 pages
0x4606	0xF37AC327  	MOVFF       oled_init_r_L0, FARG_set_addressing_pagenum
0x460A	0x6B7B      	CLRF        FARG_set_addressing_c_start, 1
0x460C	0xF000EC80  	CALL        _set_addressing, 0
;oled_control.c,203 :: 		for (i = 0; i < 128; i++, Soft_I2C_Write(0)); // clear one page pixels
0x4610	0x0103      	MOVLB       3
0x4612	0x6B26      	CLRF        oled_init_i_L0, 1
L_oled_init31:
0x4614	0x0103      	MOVLB       3
0x4616	0x0E80      	MOVLW       128
0x4618	0x5D26      	SUBWF       oled_init_i_L0, 0, 1
0x461A	0xE205      	BC          L_oled_init32
0x461C	0x2B26      	INCF        oled_init_i_L0, 1, 1
0x461E	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x4620	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
0x4624	0xD7F7      	BRA         L_oled_init31
L_oled_init32:
;oled_control.c,201 :: 		for (r = 0; r <=3; r++) {
0x4626	0x0103      	MOVLB       3
0x4628	0x2B27      	INCF        oled_init_r_L0, 1, 1
;oled_control.c,204 :: 		}
0x462A	0xD7EA      	BRA         L_oled_init28
L_oled_init29:
;oled_control.c,205 :: 		}
0x462C	0xD018      	BRA         L_oled_init34
L_oled_init27:
0x462E	0x0103      	MOVLB       3
;oled_control.c,207 :: 		for (r = 0; r <=7; r++) {
0x4630	0x6B27      	CLRF        oled_init_r_L0, 1
L_oled_init35:
0x4632	0x5127      	MOVF        oled_init_r_L0, 0, 1
0x4634	0x0807      	SUBLW       7
0x4636	0xE313      	BNC         L_oled_init36
;oled_control.c,208 :: 		set_addressing (r, 0);    // clear all 8 pages
0x4638	0xF37AC327  	MOVFF       oled_init_r_L0, FARG_set_addressing_pagenum
0x463C	0x6B7B      	CLRF        FARG_set_addressing_c_start, 1
0x463E	0xF000EC80  	CALL        _set_addressing, 0
;oled_control.c,209 :: 		for (i = 0; i < 128; i++, Soft_I2C_Write(0x00)); // clear one page pixels
0x4642	0x0103      	MOVLB       3
0x4644	0x6B26      	CLRF        oled_init_i_L0, 1
L_oled_init38:
0x4646	0x0103      	MOVLB       3
0x4648	0x0E80      	MOVLW       128
0x464A	0x5D26      	SUBWF       oled_init_i_L0, 0, 1
0x464C	0xE205      	BC          L_oled_init39
0x464E	0x2B26      	INCF        oled_init_i_L0, 1, 1
0x4650	0x6B7F      	CLRF        FARG_Soft_I2C_Write_d, 1
0x4652	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
0x4656	0xD7F7      	BRA         L_oled_init38
L_oled_init39:
;oled_control.c,207 :: 		for (r = 0; r <=7; r++) {
0x4658	0x0103      	MOVLB       3
0x465A	0x2B27      	INCF        oled_init_r_L0, 1, 1
;oled_control.c,210 :: 		}
0x465C	0xD7EA      	BRA         L_oled_init35
L_oled_init36:
;oled_control.c,212 :: 		}
L_oled_init34:
;oled_control.c,214 :: 		Soft_I2C_Stop ();
0x465E	0xF000EC69  	CALL        _Soft_I2C_Stop, 0
;oled_control.c,215 :: 		send_command (0xAF); //  display ON
0x4662	0x0EAF      	MOVLW       175
0x4664	0x0103      	MOVLB       3
0x4666	0x6F5F      	MOVWF       FARG_send_command_oled_command, 1
0x4668	0xF007ECFE  	CALL        _send_command, 0
;oled_control.c,218 :: 		}
L_end_oled_init:
0x466C	0x0012      	RETURN      0
; end of _oled_init
_Div_8X8_U:
;__Lib_Math.c,77 :: 		
;__Lib_Math.c,84 :: 		
0x466E	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,85 :: 		
0x4670	0x0E08      	MOVLW       8
;__Lib_Math.c,86 :: 		
0x4672	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,87 :: 		
0x4674	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c,88 :: 		
0x4676	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,89 :: 		
0x4678	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,90 :: 		
0x467A	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,91 :: 		
0x467C	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,92 :: 		
0x467E	0xD002      	BRA         $+6
;__Lib_Math.c,93 :: 		
0x4680	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,94 :: 		
0x4682	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,95 :: 		
0x4684	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,96 :: 		
0x4686	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,97 :: 		
0x4688	0xD7F5      	BRA         $-20
;__Lib_Math.c,99 :: 		
L_end_Div_8X8_U:
0x468A	0x0012      	RETURN      0
; end of _Div_8X8_U
_Soft_I2C_Read:
;oled_control.c,397 :: 		unsigned char Soft_I2C_Read () {
;oled_control.c,399 :: 		unsigned char readByte = 0;
0x468C	0x0103      	MOVLB       3
0x468E	0x6B26      	CLRF        Soft_I2C_Read_readByte_L0, 1
;oled_control.c,400 :: 		if(led_type!=0) {
0x4690	0x0102      	MOVLB       2
0x4692	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x4694	0x0A00      	XORLW       0
0x4696	0xE031      	BZ          L_Soft_I2C_Read91
;oled_control.c,401 :: 		Soft_I2C_Sda_Direction = 1;
0x4698	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,402 :: 		for(i=0; i<=7; i++) {
0x469A	0x6A01      	CLRF        R1 
L_Soft_I2C_Read92:
0x469C	0x5001      	MOVF        R1, 0 
0x469E	0x0807      	SUBLW       7
0x46A0	0xE31A      	BNC         L_Soft_I2C_Read93
;oled_control.c,403 :: 		readByte <<= 1;
0x46A2	0x0103      	MOVLB       3
0x46A4	0x3726      	RLCF        Soft_I2C_Read_readByte_L0, 1, 1
0x46A6	0x9126      	BCF         Soft_I2C_Read_readByte_L0, 0, 1
;oled_control.c,404 :: 		readByte &= 0xFE;
0x46A8	0x0EFE      	MOVLW       254
0x46AA	0x1726      	ANDWF       Soft_I2C_Read_readByte_L0, 1, 1
;oled_control.c,405 :: 		Delay_us(5);
0x46AC	0x0E06      	MOVLW       6
0x46AE	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read95:
0x46B0	0x2E0D      	DECFSZ      R13, 1, 0
0x46B2	0xD7FE      	BRA         L_Soft_I2C_Read95
0x46B4	0x0000      	NOP
;oled_control.c,406 :: 		Soft_I2C_Scl_Direction = 1;
0x46B6	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,407 :: 		Delay_us(5);
0x46B8	0x0E06      	MOVLW       6
0x46BA	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read96:
0x46BC	0x2E0D      	DECFSZ      R13, 1, 0
0x46BE	0xD7FE      	BRA         L_Soft_I2C_Read96
0x46C0	0x0000      	NOP
;oled_control.c,408 :: 		if (PORTB & 0x80) {
0x46C2	0xBE81      	BTFSC       PORTB, 7 
;oled_control.c,409 :: 		readByte += 1;
0x46C4	0x2B26      	INCF        Soft_I2C_Read_readByte_L0, 1, 1
;oled_control.c,410 :: 		}
L_Soft_I2C_Read97:
;oled_control.c,411 :: 		Soft_I2C_Scl_Direction = 0;
0x46C6	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,412 :: 		Delay_us(5);
0x46C8	0x0E06      	MOVLW       6
0x46CA	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read98:
0x46CC	0x2E0D      	DECFSZ      R13, 1, 0
0x46CE	0xD7FE      	BRA         L_Soft_I2C_Read98
0x46D0	0x0000      	NOP
;oled_control.c,402 :: 		for(i=0; i<=7; i++) {
0x46D2	0x2A01      	INCF        R1, 1 
;oled_control.c,413 :: 		}
0x46D4	0xD7E3      	BRA         L_Soft_I2C_Read92
L_Soft_I2C_Read93:
;oled_control.c,414 :: 		Soft_I2C_Sda_Direction = 1; //ACK
0x46D6	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,415 :: 		Delay_us(5);
0x46D8	0x0E06      	MOVLW       6
0x46DA	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read99:
0x46DC	0x2E0D      	DECFSZ      R13, 1, 0
0x46DE	0xD7FE      	BRA         L_Soft_I2C_Read99
0x46E0	0x0000      	NOP
;oled_control.c,416 :: 		Soft_I2C_Scl_Direction = 1;
0x46E2	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,417 :: 		Delay_us(5);
0x46E4	0x0E06      	MOVLW       6
0x46E6	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read100:
0x46E8	0x2E0D      	DECFSZ      R13, 1, 0
0x46EA	0xD7FE      	BRA         L_Soft_I2C_Read100
0x46EC	0x0000      	NOP
;oled_control.c,418 :: 		Soft_I2C_Scl_Direction = 0;
0x46EE	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,419 :: 		Delay_us(5);
0x46F0	0x0E06      	MOVLW       6
0x46F2	0x6E0D      	MOVWF       R13, 0
L_Soft_I2C_Read101:
0x46F4	0x2E0D      	DECFSZ      R13, 1, 0
0x46F6	0xD7FE      	BRA         L_Soft_I2C_Read101
0x46F8	0x0000      	NOP
;oled_control.c,420 :: 		}
L_Soft_I2C_Read91:
;oled_control.c,422 :: 		return readByte;
0x46FA	0xF000C326  	MOVFF       Soft_I2C_Read_readByte_L0, R0
;oled_control.c,423 :: 		}
L_end_Soft_I2C_Read:
0x46FE	0x0012      	RETURN      0
; end of _Soft_I2C_Read
_Get_Fosc_kHz:
;__Lib_Delays.c,1 :: 		unsigned long Get_Fosc_kHz(){
;__Lib_Delays.c,3 :: 		return Clock_kHz();
0x4700	0x0E80      	MOVLW       128
0x4702	0x6E00      	MOVWF       R0 
0x4704	0x0E3E      	MOVLW       62
0x4706	0x6E01      	MOVWF       R1 
0x4708	0x0E00      	MOVLW       0
0x470A	0x6E02      	MOVWF       R2 
0x470C	0x6E03      	MOVWF       R3 
;__Lib_Delays.c,5 :: 		}
L_end_Get_Fosc_kHz:
0x470E	0x0012      	RETURN      0
; end of _Get_Fosc_kHz
_EEPROM_Read:
;__Lib_EEPROM_256.c,7 :: 		
;__Lib_EEPROM_256.c,9 :: 		
0x4710	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,10 :: 		
0x4712	0xFFA9C326  	MOVFF       FARG_EEPROM_Read_address, EEADR
;__Lib_EEPROM_256.c,11 :: 		
0x4716	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,12 :: 		
0x4718	0x80A6      	BSF         EECON1, 0 
;__Lib_EEPROM_256.c,14 :: 		
0x471A	0xF000CFA8  	MOVFF       EEDATA, R0
;__Lib_EEPROM_256.c,16 :: 		
L_end_EEPROM_Read:
0x471E	0x0012      	RETURN      0
; end of _EEPROM_Read
_ADC_Init:
;__Lib_ADC_A_D.c,13 :: 		
;__Lib_ADC_A_D.c,14 :: 		
0x4720	0x0EA8      	MOVLW       _ADC_Get_Sample
0x4722	0x0102      	MOVLB       2
0x4724	0x6FCD      	MOVWF       _ADC_Get_Sample_Ptr, 1
0x4726	0x0E0B      	MOVLW       hi_addr(_ADC_Get_Sample)
0x4728	0x6FCE      	MOVWF       _ADC_Get_Sample_Ptr+1, 1
0x472A	0x0E66      	MOVLW       FARG_ADC_Get_Sample_channel
0x472C	0x6FCF      	MOVWF       _ADC_Get_Sample_Ptr+2, 1
0x472E	0x0E03      	MOVLW       hi_addr(FARG_ADC_Get_Sample_channel)
0x4730	0x6FD0      	MOVWF       _ADC_Get_Sample_Ptr+3, 1
;__Lib_ADC_A_D.c,16 :: 		
0x4732	0x6AC2      	CLRF        ADCON0 
;__Lib_ADC_A_D.c,17 :: 		
0x4734	0x0101      	MOVLB       1
0x4736	0x1DC5      	COMF        _vref_mask, 0, 1
0x4738	0x6E00      	MOVWF       R0 
0x473A	0x5000      	MOVF        R0, 0 
0x473C	0x16C1      	ANDWF       ADCON1, 1 
;__Lib_ADC_A_D.c,18 :: 		
0x473E	0x0E07      	MOVLW       7
0x4740	0x12C0      	IORWF       ADCON2, 1 
;__Lib_ADC_A_D.c,19 :: 		
0x4742	0x8EC0      	BSF         ADCON2, 7 
;__Lib_ADC_A_D.c,20 :: 		
0x4744	0x80C2      	BSF         ADCON0, 0 
;__Lib_ADC_A_D.c,21 :: 		
L_end_ADC_Init:
0x4746	0x0012      	RETURN      0
; end of _ADC_Init
_Bcd2Dec:
;__Lib_Conversions.c,368 :: 		
;__Lib_Conversions.c,369 :: 		
;__Lib_Conversions.c,371 :: 		
0x4748	0xF000C326  	MOVFF       FARG_Bcd2Dec_bcdnum, R0
0x474C	0x3200      	RRCF        R0, 1 
0x474E	0x9E00      	BCF         R0, 7 
0x4750	0x3200      	RRCF        R0, 1 
0x4752	0x9E00      	BCF         R0, 7 
0x4754	0x3200      	RRCF        R0, 1 
0x4756	0x9E00      	BCF         R0, 7 
0x4758	0x3200      	RRCF        R0, 1 
0x475A	0x9E00      	BCF         R0, 7 
0x475C	0x0E0A      	MOVLW       10
0x475E	0x0200      	MULWF       R0 
0x4760	0xF001CFF3  	MOVFF       PRODL, R1
;__Lib_Conversions.c,372 :: 		
0x4764	0x0E0F      	MOVLW       15
0x4766	0x0103      	MOVLB       3
0x4768	0x1526      	ANDWF       FARG_Bcd2Dec_bcdnum, 0, 1
0x476A	0x6E00      	MOVWF       R0 
0x476C	0x5001      	MOVF        R1, 0 
0x476E	0x2600      	ADDWF       R0, 1 
;__Lib_Conversions.c,373 :: 		
;__Lib_Conversions.c,374 :: 		
L_end_Bcd2Dec:
0x4770	0x0012      	RETURN      0
; end of _Bcd2Dec
_lcd_prep:
;main.c,454 :: 		void lcd_prep() {
;main.c,455 :: 		asm CLRWDT;
0x4772	0x0004      	CLRWDT
;main.c,456 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x4774	0x0102      	MOVLB       2
0x4776	0x51D7      	MOVF        _type, 0, 1
0x4778	0x0A04      	XORLW       4
0x477A	0x0E01      	MOVLW       1
0x477C	0xA4D8      	BTFSS       STATUS, 2 
0x477E	0x0E00      	MOVLW       0
0x4780	0x6E01      	MOVWF       R1 
0x4782	0x51D7      	MOVF        _type, 0, 1
0x4784	0x0A05      	XORLW       5
0x4786	0x0E01      	MOVLW       1
0x4788	0xA4D8      	BTFSS       STATUS, 2 
0x478A	0x0E00      	MOVLW       0
0x478C	0x6E00      	MOVWF       R0 
0x478E	0x5001      	MOVF        R1, 0 
0x4790	0x1200      	IORWF       R0, 1 
0x4792	0xB4D8      	BTFSC       STATUS, 2 
0x4794	0xD0D0      	BRA         L_lcd_prep276
;main.c,457 :: 		if (lcd_prep_short == 0) {
0x4796	0x502C      	MOVF        _lcd_prep_short, 0 
0x4798	0x0A00      	XORLW       0
0x479A	0xA4D8      	BTFSS       STATUS, 2 
0x479C	0xD085      	BRA         L_lcd_prep277
;main.c,458 :: 		led_wr_str(0, 22, "ATU-100", 7);
0x479E	0x0103      	MOVLB       3
0x47A0	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x47A2	0x0E16      	MOVLW       22
0x47A4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x47A6	0x0E26      	MOVLW       ?lstr28_main
0x47A8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x47AA	0x0E02      	MOVLW       hi_addr(?lstr28_main)
0x47AC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x47AE	0x0E07      	MOVLW       7
0x47B0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x47B2	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,459 :: 		led_wr_str(2, 6, "EXT board", 9);
0x47B6	0x0E02      	MOVLW       2
0x47B8	0x0103      	MOVLB       3
0x47BA	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x47BC	0x0E06      	MOVLW       6
0x47BE	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x47C0	0x0E32      	MOVLW       ?lstr29_main
0x47C2	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x47C4	0x0E02      	MOVLW       hi_addr(?lstr29_main)
0x47C6	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x47C8	0x0E09      	MOVLW       9
0x47CA	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x47CC	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,460 :: 		led_wr_str(4, 16, "by N7DDC", 8);
0x47D0	0x0E04      	MOVLW       4
0x47D2	0x0103      	MOVLB       3
0x47D4	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x47D6	0x0E10      	MOVLW       16
0x47D8	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x47DA	0x0E51      	MOVLW       ?lstr30_main
0x47DC	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x47DE	0x0E02      	MOVLW       hi_addr(?lstr30_main)
0x47E0	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x47E2	0x0E08      	MOVLW       8
0x47E4	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x47E6	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,461 :: 		led_wr_str(6, 4, "FW ver 3.1m", 11);
0x47EA	0x0E06      	MOVLW       6
0x47EC	0x0103      	MOVLB       3
0x47EE	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x47F0	0x0E04      	MOVLW       4
0x47F2	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x47F4	0x0E45      	MOVLW       ?lstr31_main
0x47F6	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x47F8	0x0E02      	MOVLW       hi_addr(?lstr31_main)
0x47FA	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x47FC	0x0E0B      	MOVLW       11
0x47FE	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4800	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,462 :: 		asm CLRWDT;
0x4804	0x0004      	CLRWDT
;main.c,463 :: 		Delay_ms(600);
0x4806	0x0E0D      	MOVLW       13
0x4808	0x6E0B      	MOVWF       R11, 0
0x480A	0x0E2D      	MOVLW       45
0x480C	0x6E0C      	MOVWF       R12, 0
0x480E	0x0ED7      	MOVLW       215
0x4810	0x6E0D      	MOVWF       R13, 0
L_lcd_prep278:
0x4812	0x2E0D      	DECFSZ      R13, 1, 0
0x4814	0xD7FE      	BRA         L_lcd_prep278
0x4816	0x2E0C      	DECFSZ      R12, 1, 0
0x4818	0xD7FC      	BRA         L_lcd_prep278
0x481A	0x2E0B      	DECFSZ      R11, 1, 0
0x481C	0xD7FA      	BRA         L_lcd_prep278
0x481E	0x0000      	NOP
0x4820	0x0000      	NOP
;main.c,464 :: 		asm CLRWDT;
0x4822	0x0004      	CLRWDT
;main.c,465 :: 		Delay_ms(500);
0x4824	0x0E0B      	MOVLW       11
0x4826	0x6E0B      	MOVWF       R11, 0
0x4828	0x0E26      	MOVLW       38
0x482A	0x6E0C      	MOVWF       R12, 0
0x482C	0x0E5D      	MOVLW       93
0x482E	0x6E0D      	MOVWF       R13, 0
L_lcd_prep279:
0x4830	0x2E0D      	DECFSZ      R13, 1, 0
0x4832	0xD7FE      	BRA         L_lcd_prep279
0x4834	0x2E0C      	DECFSZ      R12, 1, 0
0x4836	0xD7FC      	BRA         L_lcd_prep279
0x4838	0x2E0B      	DECFSZ      R11, 1, 0
0x483A	0xD7FA      	BRA         L_lcd_prep279
0x483C	0x0000      	NOP
0x483E	0x0000      	NOP
;main.c,466 :: 		asm CLRWDT;
0x4840	0x0004      	CLRWDT
;main.c,467 :: 		led_wr_str(0, 16, "        ", 8);
0x4842	0x0103      	MOVLB       3
0x4844	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4846	0x0E10      	MOVLW       16
0x4848	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x484A	0x0E3C      	MOVLW       ?lstr32_main
0x484C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x484E	0x0E02      	MOVLW       hi_addr(?lstr32_main)
0x4850	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4852	0x0E08      	MOVLW       8
0x4854	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4856	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,468 :: 		led_wr_str(2, 4, "          ", 10);
0x485A	0x0E02      	MOVLW       2
0x485C	0x0103      	MOVLB       3
0x485E	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4860	0x0E04      	MOVLW       4
0x4862	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4864	0x0E1B      	MOVLW       ?lstr33_main
0x4866	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4868	0x0E02      	MOVLW       hi_addr(?lstr33_main)
0x486A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x486C	0x0E0A      	MOVLW       10
0x486E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4870	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,469 :: 		led_wr_str(4, 16, "        ", 8);
0x4874	0x0E04      	MOVLW       4
0x4876	0x0103      	MOVLB       3
0x4878	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x487A	0x0E10      	MOVLW       16
0x487C	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x487E	0x0EF6      	MOVLW       ?lstr34_main
0x4880	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4882	0x0E01      	MOVLW       hi_addr(?lstr34_main)
0x4884	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4886	0x0E08      	MOVLW       8
0x4888	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x488A	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,470 :: 		led_wr_str(6, 4, "          ", 11);
0x488E	0x0E06      	MOVLW       6
0x4890	0x0103      	MOVLB       3
0x4892	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4894	0x0E04      	MOVLW       4
0x4896	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4898	0x0EEB      	MOVLW       ?lstr35_main
0x489A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x489C	0x0E01      	MOVLW       hi_addr(?lstr35_main)
0x489E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x48A0	0x0E0B      	MOVLW       11
0x48A2	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x48A4	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,471 :: 		}
L_lcd_prep277:
;main.c,472 :: 		Delay_ms(150);
0x48A8	0x0E04      	MOVLW       4
0x48AA	0x6E0B      	MOVWF       R11, 0
0x48AC	0x0E0C      	MOVLW       12
0x48AE	0x6E0C      	MOVWF       R12, 0
0x48B0	0x0E33      	MOVLW       51
0x48B2	0x6E0D      	MOVWF       R13, 0
L_lcd_prep280:
0x48B4	0x2E0D      	DECFSZ      R13, 1, 0
0x48B6	0xD7FE      	BRA         L_lcd_prep280
0x48B8	0x2E0C      	DECFSZ      R12, 1, 0
0x48BA	0xD7FC      	BRA         L_lcd_prep280
0x48BC	0x2E0B      	DECFSZ      R11, 1, 0
0x48BE	0xD7FA      	BRA         L_lcd_prep280
0x48C0	0x0000      	NOP
0x48C2	0x0000      	NOP
;main.c,473 :: 		if (P_High == 1)
0x48C4	0x504E      	MOVF        main_P_High, 0 
0x48C6	0x0A01      	XORLW       1
0x48C8	0xE10D      	BNZ         L_lcd_prep281
;main.c,474 :: 		led_wr_str(0, 16, "PWR=  0W", 8);
0x48CA	0x0103      	MOVLB       3
0x48CC	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x48CE	0x0E10      	MOVLW       16
0x48D0	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x48D2	0x0EE2      	MOVLW       ?lstr36_main
0x48D4	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x48D6	0x0E01      	MOVLW       hi_addr(?lstr36_main)
0x48D8	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x48DA	0x0E08      	MOVLW       8
0x48DC	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x48DE	0xF007EC7F  	CALL        _led_wr_str, 0
0x48E2	0xD00C      	BRA         L_lcd_prep282
L_lcd_prep281:
;main.c,476 :: 		led_wr_str(0, 16, "PWR=0.0W", 8);
0x48E4	0x0103      	MOVLB       3
0x48E6	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x48E8	0x0E10      	MOVLW       16
0x48EA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x48EC	0x0EFF      	MOVLW       ?lstr37_main
0x48EE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x48F0	0x0E01      	MOVLW       hi_addr(?lstr37_main)
0x48F2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x48F4	0x0E08      	MOVLW       8
0x48F6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x48F8	0xF007EC7F  	CALL        _led_wr_str, 0
L_lcd_prep282:
;main.c,477 :: 		led_wr_str(2, 16, "SWR=0.00", 8);
0x48FC	0x0E02      	MOVLW       2
0x48FE	0x0103      	MOVLB       3
0x4900	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4902	0x0E10      	MOVLW       16
0x4904	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4906	0x0E12      	MOVLW       ?lstr38_main
0x4908	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x490A	0x0E02      	MOVLW       hi_addr(?lstr38_main)
0x490C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x490E	0x0E08      	MOVLW       8
0x4910	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4912	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,478 :: 		if (Auto)
0x4916	0x0100      	MOVLB       0
0x4918	0x53C3      	MOVF        _Auto, 1, 1
0x491A	0xE00C      	BZ          L_lcd_prep283
;main.c,479 :: 		led_wr_str(0, 16 + 8 * 12, ".", 1);
0x491C	0x0103      	MOVLB       3
0x491E	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4920	0x0E70      	MOVLW       112
0x4922	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4924	0x0E10      	MOVLW       ?lstr39_main
0x4926	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4928	0x0E02      	MOVLW       hi_addr(?lstr39_main)
0x492A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x492C	0x0E01      	MOVLW       1
0x492E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4930	0xF007EC7F  	CALL        _led_wr_str, 0
L_lcd_prep283:
;main.c,480 :: 		} else if (type != 0) { // 1602 LCD & 128*32 OLED
0x4934	0xD0D3      	BRA         L_lcd_prep284
L_lcd_prep276:
0x4936	0x0102      	MOVLB       2
0x4938	0x51D7      	MOVF        _type, 0, 1
0x493A	0x0A00      	XORLW       0
0x493C	0xB4D8      	BTFSC       STATUS, 2 
0x493E	0xD0CE      	BRA         L_lcd_prep285
;main.c,481 :: 		if (lcd_prep_short == 0) {
0x4940	0x502C      	MOVF        _lcd_prep_short, 0 
0x4942	0x0A00      	XORLW       0
0x4944	0xA4D8      	BTFSS       STATUS, 2 
0x4946	0xD087      	BRA         L_lcd_prep286
;main.c,482 :: 		led_wr_str(0, 4, "ATU-100", 7);
0x4948	0x0103      	MOVLB       3
0x494A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x494C	0x0E04      	MOVLW       4
0x494E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4950	0x0E08      	MOVLW       ?lstr40_main
0x4952	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4954	0x0E02      	MOVLW       hi_addr(?lstr40_main)
0x4956	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4958	0x0E07      	MOVLW       7
0x495A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x495C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,483 :: 		led_wr_str(1, 3, "EXT board", 9);
0x4960	0x0E01      	MOVLW       1
0x4962	0x0103      	MOVLB       3
0x4964	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4966	0x0E03      	MOVLW       3
0x4968	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x496A	0x0E95      	MOVLW       ?lstr41_main
0x496C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x496E	0x0E01      	MOVLW       hi_addr(?lstr41_main)
0x4970	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4972	0x0E09      	MOVLW       9
0x4974	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4976	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,484 :: 		asm CLRWDT;
0x497A	0x0004      	CLRWDT
;main.c,485 :: 		Delay_ms(700);
0x497C	0x0E0F      	MOVLW       15
0x497E	0x6E0B      	MOVWF       R11, 0
0x4980	0x0E35      	MOVLW       53
0x4982	0x6E0C      	MOVWF       R12, 0
0x4984	0x0E51      	MOVLW       81
0x4986	0x6E0D      	MOVWF       R13, 0
L_lcd_prep287:
0x4988	0x2E0D      	DECFSZ      R13, 1, 0
0x498A	0xD7FE      	BRA         L_lcd_prep287
0x498C	0x2E0C      	DECFSZ      R12, 1, 0
0x498E	0xD7FC      	BRA         L_lcd_prep287
0x4990	0x2E0B      	DECFSZ      R11, 1, 0
0x4992	0xD7FA      	BRA         L_lcd_prep287
;main.c,486 :: 		asm CLRWDT;
0x4994	0x0004      	CLRWDT
;main.c,487 :: 		Delay_ms(500);
0x4996	0x0E0B      	MOVLW       11
0x4998	0x6E0B      	MOVWF       R11, 0
0x499A	0x0E26      	MOVLW       38
0x499C	0x6E0C      	MOVWF       R12, 0
0x499E	0x0E5D      	MOVLW       93
0x49A0	0x6E0D      	MOVWF       R13, 0
L_lcd_prep288:
0x49A2	0x2E0D      	DECFSZ      R13, 1, 0
0x49A4	0xD7FE      	BRA         L_lcd_prep288
0x49A6	0x2E0C      	DECFSZ      R12, 1, 0
0x49A8	0xD7FC      	BRA         L_lcd_prep288
0x49AA	0x2E0B      	DECFSZ      R11, 1, 0
0x49AC	0xD7FA      	BRA         L_lcd_prep288
0x49AE	0x0000      	NOP
0x49B0	0x0000      	NOP
;main.c,488 :: 		asm CLRWDT;
0x49B2	0x0004      	CLRWDT
;main.c,489 :: 		led_wr_str(0, 4, "by N7DDC", 8);
0x49B4	0x0103      	MOVLB       3
0x49B6	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x49B8	0x0E04      	MOVLW       4
0x49BA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x49BC	0x0E8C      	MOVLW       ?lstr42_main
0x49BE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x49C0	0x0E01      	MOVLW       hi_addr(?lstr42_main)
0x49C2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x49C4	0x0E08      	MOVLW       8
0x49C6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x49C8	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,490 :: 		led_wr_str(1, 3, "FW ver 3.1m", 11);
0x49CC	0x0E01      	MOVLW       1
0x49CE	0x0103      	MOVLB       3
0x49D0	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x49D2	0x0E03      	MOVLW       3
0x49D4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x49D6	0x0E80      	MOVLW       ?lstr43_main
0x49D8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x49DA	0x0E01      	MOVLW       hi_addr(?lstr43_main)
0x49DC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x49DE	0x0E0B      	MOVLW       11
0x49E0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x49E2	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,491 :: 		asm CLRWDT;
0x49E6	0x0004      	CLRWDT
;main.c,492 :: 		Delay_ms(600);
0x49E8	0x0E0D      	MOVLW       13
0x49EA	0x6E0B      	MOVWF       R11, 0
0x49EC	0x0E2D      	MOVLW       45
0x49EE	0x6E0C      	MOVWF       R12, 0
0x49F0	0x0ED7      	MOVLW       215
0x49F2	0x6E0D      	MOVWF       R13, 0
L_lcd_prep289:
0x49F4	0x2E0D      	DECFSZ      R13, 1, 0
0x49F6	0xD7FE      	BRA         L_lcd_prep289
0x49F8	0x2E0C      	DECFSZ      R12, 1, 0
0x49FA	0xD7FC      	BRA         L_lcd_prep289
0x49FC	0x2E0B      	DECFSZ      R11, 1, 0
0x49FE	0xD7FA      	BRA         L_lcd_prep289
0x4A00	0x0000      	NOP
0x4A02	0x0000      	NOP
;main.c,493 :: 		asm CLRWDT;
0x4A04	0x0004      	CLRWDT
;main.c,494 :: 		Delay_ms(500);
0x4A06	0x0E0B      	MOVLW       11
0x4A08	0x6E0B      	MOVWF       R11, 0
0x4A0A	0x0E26      	MOVLW       38
0x4A0C	0x6E0C      	MOVWF       R12, 0
0x4A0E	0x0E5D      	MOVLW       93
0x4A10	0x6E0D      	MOVWF       R13, 0
L_lcd_prep290:
0x4A12	0x2E0D      	DECFSZ      R13, 1, 0
0x4A14	0xD7FE      	BRA         L_lcd_prep290
0x4A16	0x2E0C      	DECFSZ      R12, 1, 0
0x4A18	0xD7FC      	BRA         L_lcd_prep290
0x4A1A	0x2E0B      	DECFSZ      R11, 1, 0
0x4A1C	0xD7FA      	BRA         L_lcd_prep290
0x4A1E	0x0000      	NOP
0x4A20	0x0000      	NOP
;main.c,495 :: 		asm CLRWDT;
0x4A22	0x0004      	CLRWDT
;main.c,496 :: 		led_wr_str(0, 4, "        ", 8);
0x4A24	0x0103      	MOVLB       3
0x4A26	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4A28	0x0E04      	MOVLW       4
0x4A2A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4A2C	0x0E9F      	MOVLW       ?lstr44_main
0x4A2E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4A30	0x0E01      	MOVLW       hi_addr(?lstr44_main)
0x4A32	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4A34	0x0E08      	MOVLW       8
0x4A36	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4A38	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,497 :: 		led_wr_str(1, 3, "          ", 11);
0x4A3C	0x0E01      	MOVLW       1
0x4A3E	0x0103      	MOVLB       3
0x4A40	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4A42	0x0E03      	MOVLW       3
0x4A44	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4A46	0x0EBA      	MOVLW       ?lstr45_main
0x4A48	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4A4A	0x0E01      	MOVLW       hi_addr(?lstr45_main)
0x4A4C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4A4E	0x0E0B      	MOVLW       11
0x4A50	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4A52	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,498 :: 		}
L_lcd_prep286:
;main.c,499 :: 		Delay_ms(150);
0x4A56	0x0E04      	MOVLW       4
0x4A58	0x6E0B      	MOVWF       R11, 0
0x4A5A	0x0E0C      	MOVLW       12
0x4A5C	0x6E0C      	MOVWF       R12, 0
0x4A5E	0x0E33      	MOVLW       51
0x4A60	0x6E0D      	MOVWF       R13, 0
L_lcd_prep291:
0x4A62	0x2E0D      	DECFSZ      R13, 1, 0
0x4A64	0xD7FE      	BRA         L_lcd_prep291
0x4A66	0x2E0C      	DECFSZ      R12, 1, 0
0x4A68	0xD7FC      	BRA         L_lcd_prep291
0x4A6A	0x2E0B      	DECFSZ      R11, 1, 0
0x4A6C	0xD7FA      	BRA         L_lcd_prep291
0x4A6E	0x0000      	NOP
0x4A70	0x0000      	NOP
;main.c,500 :: 		if (P_High == 1)
0x4A72	0x504E      	MOVF        main_P_High, 0 
0x4A74	0x0A01      	XORLW       1
0x4A76	0xE10C      	BNZ         L_lcd_prep292
;main.c,501 :: 		led_wr_str(0, 0, "PWR=  0W", 8);
0x4A78	0x0103      	MOVLB       3
0x4A7A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4A7C	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x4A7E	0x0EB1      	MOVLW       ?lstr46_main
0x4A80	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4A82	0x0E01      	MOVLW       hi_addr(?lstr46_main)
0x4A84	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4A86	0x0E08      	MOVLW       8
0x4A88	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4A8A	0xF007EC7F  	CALL        _led_wr_str, 0
0x4A8E	0xD00B      	BRA         L_lcd_prep293
L_lcd_prep292:
;main.c,503 :: 		led_wr_str(0, 0, "PWR=0.0W", 8);
0x4A90	0x0103      	MOVLB       3
0x4A92	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4A94	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x4A96	0x0EA8      	MOVLW       ?lstr47_main
0x4A98	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4A9A	0x0E01      	MOVLW       hi_addr(?lstr47_main)
0x4A9C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4A9E	0x0E08      	MOVLW       8
0x4AA0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4AA2	0xF007EC7F  	CALL        _led_wr_str, 0
L_lcd_prep293:
;main.c,504 :: 		led_wr_str(1, 0, "SWR=0.00", 8);
0x4AA6	0x0E01      	MOVLW       1
0x4AA8	0x0103      	MOVLB       3
0x4AAA	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4AAC	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x4AAE	0x0E77      	MOVLW       ?lstr48_main
0x4AB0	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4AB2	0x0E01      	MOVLW       hi_addr(?lstr48_main)
0x4AB4	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4AB6	0x0E08      	MOVLW       8
0x4AB8	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4ABA	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,505 :: 		if (Auto)
0x4ABE	0x0100      	MOVLB       0
0x4AC0	0x53C3      	MOVF        _Auto, 1, 1
0x4AC2	0xE00C      	BZ          L_lcd_prep294
;main.c,506 :: 		led_wr_str(0, 8, ".", 1);
0x4AC4	0x0103      	MOVLB       3
0x4AC6	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4AC8	0x0E08      	MOVLW       8
0x4ACA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4ACC	0x0E75      	MOVLW       ?lstr49_main
0x4ACE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4AD0	0x0E01      	MOVLW       hi_addr(?lstr49_main)
0x4AD2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4AD4	0x0E01      	MOVLW       1
0x4AD6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4AD8	0xF007EC7F  	CALL        _led_wr_str, 0
L_lcd_prep294:
;main.c,507 :: 		}
L_lcd_prep285:
L_lcd_prep284:
;main.c,508 :: 		asm CLRWDT;
0x4ADC	0x0004      	CLRWDT
;main.c,509 :: 		lcd_ind();
0x4ADE	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,510 :: 		return;
;main.c,511 :: 		}
L_end_lcd_prep:
0x4AE2	0x0012      	RETURN      0
; end of _lcd_prep
_btn_push:
;main.c,410 :: 		void btn_push()
;main.c,412 :: 		asm CLRWDT;
0x4AE4	0x0004      	CLRWDT
;main.c,413 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x4AE6	0x0102      	MOVLB       2
0x4AE8	0x51D7      	MOVF        _type, 0, 1
0x4AEA	0x0A04      	XORLW       4
0x4AEC	0x0E01      	MOVLW       1
0x4AEE	0xA4D8      	BTFSS       STATUS, 2 
0x4AF0	0x0E00      	MOVLW       0
0x4AF2	0x6E01      	MOVWF       R1 
0x4AF4	0x51D7      	MOVF        _type, 0, 1
0x4AF6	0x0A05      	XORLW       5
0x4AF8	0x0E01      	MOVLW       1
0x4AFA	0xA4D8      	BTFSS       STATUS, 2 
0x4AFC	0x0E00      	MOVLW       0
0x4AFE	0x6E00      	MOVWF       R0 
0x4B00	0x5001      	MOVF        R1, 0 
0x4B02	0x1200      	IORWF       R0, 1 
0x4B04	0xE00E      	BZ          L_btn_push265
;main.c,414 :: 		led_wr_str(2, 16 + 12 * 4, "TUNE", 4);
0x4B06	0x0E02      	MOVLW       2
0x4B08	0x0103      	MOVLB       3
0x4B0A	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4B0C	0x0E40      	MOVLW       64
0x4B0E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4B10	0x0EA9      	MOVLW       ?lstr26_main
0x4B12	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4B14	0x0E02      	MOVLW       hi_addr(?lstr26_main)
0x4B16	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4B18	0x0E04      	MOVLW       4
0x4B1A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4B1C	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,415 :: 		} else if (type != 0) { // 1602 LCD & 128*32 OLED
0x4B20	0xD014      	BRA         L_btn_push266
L_btn_push265:
0x4B22	0x0102      	MOVLB       2
0x4B24	0x51D7      	MOVF        _type, 0, 1
0x4B26	0x0A00      	XORLW       0
0x4B28	0xE00E      	BZ          L_btn_push267
;main.c,416 :: 		led_wr_str(1, 4, "TUNE", 4);
0x4B2A	0x0E01      	MOVLW       1
0x4B2C	0x0103      	MOVLB       3
0x4B2E	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x4B30	0x0E04      	MOVLW       4
0x4B32	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4B34	0x0EAF      	MOVLW       ?lstr27_main
0x4B36	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4B38	0x0E02      	MOVLW       hi_addr(?lstr27_main)
0x4B3A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4B3C	0x0E04      	MOVLW       4
0x4B3E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4B40	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,417 :: 		} else {
0x4B44	0xD002      	BRA         L_btn_push268
L_btn_push267:
;main.c,418 :: 		LATB.B6 = 1;
0x4B46	0x8C8A      	BSF         LATB, 6 
;main.c,419 :: 		LATB.B7 = 1;
0x4B48	0x8E8A      	BSF         LATB, 7 
;main.c,420 :: 		}
L_btn_push268:
L_btn_push266:
;main.c,421 :: 		tune();		// strojenie
0x4B4A	0xF020ECCB  	CALL        _tune, 0
;main.c,422 :: 		if (type == 0)
0x4B4E	0x0102      	MOVLB       2
0x4B50	0x51D7      	MOVF        _type, 0, 1
0x4B52	0x0A00      	XORLW       0
0x4B54	0xE11B      	BNZ         L_btn_push269
;main.c,424 :: 		if (swr <= 150) {
0x4B56	0x0E80      	MOVLW       128
0x4B58	0x6E00      	MOVWF       R0 
0x4B5A	0x0E80      	MOVLW       128
0x4B5C	0x19D9      	XORWF       _SWR+1, 0, 1
0x4B5E	0x5C00      	SUBWF       R0, 0 
0x4B60	0xE102      	BNZ         L__btn_push622
0x4B62	0x51D8      	MOVF        _SWR, 0, 1
0x4B64	0x0896      	SUBLW       150
L__btn_push622:
0x4B66	0xE303      	BNC         L_btn_push270
;main.c,425 :: 		LATB.B6 = 0;
0x4B68	0x9C8A      	BCF         LATB, 6 
;main.c,426 :: 		LATB.B7 = 1;
0x4B6A	0x8E8A      	BSF         LATB, 7 
;main.c,427 :: 		} // Green
0x4B6C	0xD00E      	BRA         L_btn_push271
L_btn_push270:
;main.c,428 :: 		else if (swr <= 250) {
0x4B6E	0x0E80      	MOVLW       128
0x4B70	0x6E00      	MOVWF       R0 
0x4B72	0x0E80      	MOVLW       128
0x4B74	0x19D9      	XORWF       _SWR+1, 0, 1
0x4B76	0x5C00      	SUBWF       R0, 0 
0x4B78	0xE102      	BNZ         L__btn_push623
0x4B7A	0x51D8      	MOVF        _SWR, 0, 1
0x4B7C	0x08FA      	SUBLW       250
L__btn_push623:
0x4B7E	0xE303      	BNC         L_btn_push272
;main.c,429 :: 		PORTB.B6 = 0;
0x4B80	0x9C81      	BCF         PORTB, 6 
;main.c,430 :: 		PORTB.B7 = 0;
0x4B82	0x9E81      	BCF         PORTB, 7 
;main.c,431 :: 		} // Orange
0x4B84	0xD002      	BRA         L_btn_push273
L_btn_push272:
;main.c,433 :: 		PORTB.B6 = 1;
0x4B86	0x8C81      	BSF         PORTB, 6 
;main.c,434 :: 		PORTB.B7 = 0;
0x4B88	0x9E81      	BCF         PORTB, 7 
;main.c,435 :: 		} // Red
L_btn_push273:
L_btn_push271:
;main.c,436 :: 		}
0x4B8A	0xD011      	BRA         L_btn_push274
L_btn_push269:
;main.c,437 :: 		else if (Loss_mode == 0 | Loss_ind == 0)
0x4B8C	0x5174      	MOVF        _Loss_mode, 0, 1
0x4B8E	0x0A00      	XORLW       0
0x4B90	0x0E01      	MOVLW       1
0x4B92	0xA4D8      	BTFSS       STATUS, 2 
0x4B94	0x0E00      	MOVLW       0
0x4B96	0x6E01      	MOVWF       R1 
0x4B98	0x515B      	MOVF        main_Loss_ind, 0, 1
0x4B9A	0x0A00      	XORLW       0
0x4B9C	0x0E01      	MOVLW       1
0x4B9E	0xA4D8      	BTFSS       STATUS, 2 
0x4BA0	0x0E00      	MOVLW       0
0x4BA2	0x6E00      	MOVWF       R0 
0x4BA4	0x5001      	MOVF        R1, 0 
0x4BA6	0x1200      	IORWF       R0, 1 
0x4BA8	0xE002      	BZ          L_btn_push275
;main.c,438 :: 		lcd_ind();
0x4BAA	0xF008EC10  	CALL        _lcd_ind, 0
L_btn_push275:
L_btn_push274:
;main.c,439 :: 		EEPROM_Write(255 - mem_offset * 5, cap);
0x4BAE	0x0E05      	MOVLW       5
0x4BB0	0x0102      	MOVLB       2
0x4BB2	0x0372      	MULWF       _mem_offset, 1
0x4BB4	0xF000CFF3  	MOVFF       PRODL, R0
0x4BB8	0x5000      	MOVF        R0, 0 
0x4BBA	0x08FF      	SUBLW       255
0x4BBC	0x0103      	MOVLB       3
0x4BBE	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x4BC0	0xF33AC25D  	MOVFF       main_cap, FARG_EEPROM_Write_data_
0x4BC4	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,440 :: 		EEPROM_Write(254 - mem_offset * 5, ind);
0x4BC8	0x0E05      	MOVLW       5
0x4BCA	0x0102      	MOVLB       2
0x4BCC	0x0372      	MULWF       _mem_offset, 1
0x4BCE	0xF000CFF3  	MOVFF       PRODL, R0
0x4BD2	0x5000      	MOVF        R0, 0 
0x4BD4	0x08FE      	SUBLW       254
0x4BD6	0x0103      	MOVLB       3
0x4BD8	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x4BDA	0xF33AC275  	MOVFF       main_ind, FARG_EEPROM_Write_data_
0x4BDE	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,441 :: 		EEPROM_Write(253 - mem_offset * 5, SW);
0x4BE2	0x0E05      	MOVLW       5
0x4BE4	0x0102      	MOVLB       2
0x4BE6	0x0372      	MULWF       _mem_offset, 1
0x4BE8	0xF000CFF3  	MOVFF       PRODL, R0
0x4BEC	0x5000      	MOVF        R0, 0 
0x4BEE	0x08FD      	SUBLW       253
0x4BF0	0x0103      	MOVLB       3
0x4BF2	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x4BF4	0xF33AC273  	MOVFF       main_SW, FARG_EEPROM_Write_data_
0x4BF8	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,442 :: 		EEPROM_Write(252 - mem_offset * 5, swr_a / 256);
0x4BFC	0x0E05      	MOVLW       5
0x4BFE	0x0102      	MOVLB       2
0x4C00	0x0372      	MULWF       _mem_offset, 1
0x4C02	0xF000CFF3  	MOVFF       PRODL, R0
0x4C06	0x5000      	MOVF        R0, 0 
0x4C08	0x08FC      	SUBLW       252
0x4C0A	0x0103      	MOVLB       3
0x4C0C	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x4C0E	0x0E00      	MOVLW       0
0x4C10	0x6E04      	MOVWF       R4 
0x4C12	0x0E01      	MOVLW       1
0x4C14	0x6E05      	MOVWF       R5 
0x4C16	0xF000C2D3  	MOVFF       _swr_a, R0
0x4C1A	0xF001C2D4  	MOVFF       _swr_a+1, R1
0x4C1E	0xF01BECC8  	CALL        _Div_16x16_S, 0
0x4C22	0xF33AC000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x4C26	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,443 :: 		EEPROM_Write(251 - mem_offset * 5, swr_a % 256);
0x4C2A	0x0E05      	MOVLW       5
0x4C2C	0x0102      	MOVLB       2
0x4C2E	0x0372      	MULWF       _mem_offset, 1
0x4C30	0xF000CFF3  	MOVFF       PRODL, R0
0x4C34	0x5000      	MOVF        R0, 0 
0x4C36	0x08FB      	SUBLW       251
0x4C38	0x0103      	MOVLB       3
0x4C3A	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x4C3C	0x0E00      	MOVLW       0
0x4C3E	0x6E04      	MOVWF       R4 
0x4C40	0x0E01      	MOVLW       1
0x4C42	0x6E05      	MOVWF       R5 
0x4C44	0xF000C2D3  	MOVFF       _swr_a, R0
0x4C48	0xF001C2D4  	MOVFF       _swr_a+1, R1
0x4C4C	0xF01BECC8  	CALL        _Div_16x16_S, 0
0x4C50	0xF000C008  	MOVFF       R8, R0
0x4C54	0xF001C009  	MOVFF       R9, R1
0x4C58	0xF33AC000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x4C5C	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,444 :: 		SWR_old = 10000;
0x4C60	0x0E10      	MOVLW       16
0x4C62	0x0102      	MOVLB       2
0x4C64	0x6F89      	MOVWF       _SWR_old, 1
0x4C66	0x0E27      	MOVLW       39
0x4C68	0x6F8A      	MOVWF       _SWR_old+1, 1
;main.c,445 :: 		Power_old = 10000;
0x4C6A	0x0E10      	MOVLW       16
0x4C6C	0x6F8C      	MOVWF       _Power_old, 1
0x4C6E	0x0E27      	MOVLW       39
0x4C70	0x6F8D      	MOVWF       _Power_old+1, 1
;main.c,446 :: 		lcd_pwr();
0x4C72	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,447 :: 		SWR_fixed_old = SWR;
0x4C76	0xF25EC2D8  	MOVFF       _SWR, _SWR_fixed_old
0x4C7A	0xF25FC2D9  	MOVFF       _SWR+1, _SWR_fixed_old+1
;main.c,449 :: 		n_Tx = 1;
0x4C7E	0x8C89      	BSF         LATA6_bit, BitPos(LATA6_bit+0) 
;main.c,450 :: 		asm CLRWDT;
0x4C80	0x0004      	CLRWDT
;main.c,451 :: 		return;
;main.c,452 :: 		}
L_end_btn_push:
0x4C82	0x0012      	RETURN      0
; end of _btn_push
_button_proc_test:
;main.c,178 :: 		void button_proc_test(void) {
;main.c,179 :: 		if (Button( & PORTB, 0, 50, 0)) { // Tune btn
0x4C84	0x0E81      	MOVLW       PORTB
0x4C86	0x0103      	MOVLB       3
0x4C88	0x6F5F      	MOVWF       FARG_Button_port, 1
0x4C8A	0x0E0F      	MOVLW       hi_addr(PORTB)
0x4C8C	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x4C8E	0x6B61      	CLRF        FARG_Button_pin, 1
0x4C90	0x0E32      	MOVLW       50
0x4C92	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x4C94	0x6B63      	CLRF        FARG_Button_active_state, 1
0x4C96	0xF00AEC41  	CALL        _Button, 0
0x4C9A	0x5200      	MOVF        R0, 1 
0x4C9C	0xB4D8      	BTFSC       STATUS, 2 
0x4C9E	0xD097      	BRA         L_button_proc_test186
;main.c,180 :: 		Delay_ms(250);
0x4CA0	0x0E06      	MOVLW       6
0x4CA2	0x6E0B      	MOVWF       R11, 0
0x4CA4	0x0E13      	MOVLW       19
0x4CA6	0x6E0C      	MOVWF       R12, 0
0x4CA8	0x0EAD      	MOVLW       173
0x4CAA	0x6E0D      	MOVWF       R13, 0
L_button_proc_test187:
0x4CAC	0x2E0D      	DECFSZ      R13, 1, 0
0x4CAE	0xD7FE      	BRA         L_button_proc_test187
0x4CB0	0x2E0C      	DECFSZ      R12, 1, 0
0x4CB2	0xD7FC      	BRA         L_button_proc_test187
0x4CB4	0x2E0B      	DECFSZ      R11, 1, 0
0x4CB6	0xD7FA      	BRA         L_button_proc_test187
0x4CB8	0x0000      	NOP
0x4CBA	0x0000      	NOP
;main.c,181 :: 		asm CLRWDT;
0x4CBC	0x0004      	CLRWDT
;main.c,182 :: 		if (PORTB.B0 == 1) { // short press button
0x4CBE	0xA081      	BTFSS       PORTB, 0 
0x4CC0	0xD00F      	BRA         L_button_proc_test188
;main.c,183 :: 		if (SW == 0)
0x4CC2	0x0102      	MOVLB       2
0x4CC4	0x5173      	MOVF        main_SW, 0, 1
0x4CC6	0x0A00      	XORLW       0
0x4CC8	0xE103      	BNZ         L_button_proc_test189
;main.c,184 :: 		SW = 1;
0x4CCA	0x0E01      	MOVLW       1
0x4CCC	0x6F73      	MOVWF       main_SW, 1
0x4CCE	0xD001      	BRA         L_button_proc_test190
L_button_proc_test189:
;main.c,186 :: 		SW = 0;
0x4CD0	0x6B73      	CLRF        main_SW, 1
L_button_proc_test190:
;main.c,187 :: 		set_sw(SW);
0x4CD2	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x4CD6	0xF017ECAC  	CALL        _set_sw, 0
;main.c,188 :: 		lcd_ind();
0x4CDA	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,189 :: 		} else { // long press button
0x4CDE	0xD066      	BRA         L_button_proc_test191
L_button_proc_test188:
;main.c,190 :: 		if (L == 1)
0x4CE0	0x0100      	MOVLB       0
0x4CE2	0x51BA      	MOVF        _L, 0, 1
0x4CE4	0x0A01      	XORLW       1
0x4CE6	0xE102      	BNZ         L_button_proc_test192
;main.c,191 :: 		L = 0;
0x4CE8	0x6BBA      	CLRF        _L, 1
0x4CEA	0xD002      	BRA         L_button_proc_test193
L_button_proc_test192:
;main.c,193 :: 		L = 1;
0x4CEC	0x0E01      	MOVLW       1
0x4CEE	0x6FBA      	MOVWF       _L, 1
L_button_proc_test193:
;main.c,194 :: 		if (L == 1) {
0x4CF0	0x51BA      	MOVF        _L, 0, 1
0x4CF2	0x0A01      	XORLW       1
0x4CF4	0xE12E      	BNZ         L_button_proc_test194
;main.c,195 :: 		if (type == 4 | type == 5) // 128*64 OLED
0x4CF6	0x0102      	MOVLB       2
0x4CF8	0x51D7      	MOVF        _type, 0, 1
0x4CFA	0x0A04      	XORLW       4
0x4CFC	0x0E01      	MOVLW       1
0x4CFE	0xA4D8      	BTFSS       STATUS, 2 
0x4D00	0x0E00      	MOVLW       0
0x4D02	0x6E01      	MOVWF       R1 
0x4D04	0x51D7      	MOVF        _type, 0, 1
0x4D06	0x0A05      	XORLW       5
0x4D08	0x0E01      	MOVLW       1
0x4D0A	0xA4D8      	BTFSS       STATUS, 2 
0x4D0C	0x0E00      	MOVLW       0
0x4D0E	0x6E00      	MOVWF       R0 
0x4D10	0x5001      	MOVF        R1, 0 
0x4D12	0x1200      	IORWF       R0, 1 
0x4D14	0xE00D      	BZ          L_button_proc_test195
;main.c,196 :: 		led_wr_str(0, 16 + 12 * 8, "l", 1);
0x4D16	0x0103      	MOVLB       3
0x4D18	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4D1A	0x0E70      	MOVLW       112
0x4D1C	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4D1E	0x0EB8      	MOVLW       ?lstr6_main
0x4D20	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4D22	0x0E00      	MOVLW       hi_addr(?lstr6_main)
0x4D24	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4D26	0x0E01      	MOVLW       1
0x4D28	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4D2A	0xF007EC7F  	CALL        _led_wr_str, 0
0x4D2E	0xD010      	BRA         L_button_proc_test196
L_button_proc_test195:
;main.c,197 :: 		else if (type != 0) // 1602 LCD & 128*32 OLED
0x4D30	0x0102      	MOVLB       2
0x4D32	0x51D7      	MOVF        _type, 0, 1
0x4D34	0x0A00      	XORLW       0
0x4D36	0xE00C      	BZ          L_button_proc_test197
;main.c,198 :: 		led_wr_str(0, 8, "l", 1);
0x4D38	0x0103      	MOVLB       3
0x4D3A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4D3C	0x0E08      	MOVLW       8
0x4D3E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4D40	0x0E94      	MOVLW       ?lstr7_main
0x4D42	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4D44	0x0E00      	MOVLW       hi_addr(?lstr7_main)
0x4D46	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4D48	0x0E01      	MOVLW       1
0x4D4A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4D4C	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc_test197:
L_button_proc_test196:
;main.c,199 :: 		} else {
0x4D50	0xD02D      	BRA         L_button_proc_test198
L_button_proc_test194:
;main.c,200 :: 		if (type == 4 | type == 5) // 128*64 OLED
0x4D52	0x0102      	MOVLB       2
0x4D54	0x51D7      	MOVF        _type, 0, 1
0x4D56	0x0A04      	XORLW       4
0x4D58	0x0E01      	MOVLW       1
0x4D5A	0xA4D8      	BTFSS       STATUS, 2 
0x4D5C	0x0E00      	MOVLW       0
0x4D5E	0x6E01      	MOVWF       R1 
0x4D60	0x51D7      	MOVF        _type, 0, 1
0x4D62	0x0A05      	XORLW       5
0x4D64	0x0E01      	MOVLW       1
0x4D66	0xA4D8      	BTFSS       STATUS, 2 
0x4D68	0x0E00      	MOVLW       0
0x4D6A	0x6E00      	MOVWF       R0 
0x4D6C	0x5001      	MOVF        R1, 0 
0x4D6E	0x1200      	IORWF       R0, 1 
0x4D70	0xE00D      	BZ          L_button_proc_test199
;main.c,201 :: 		led_wr_str(0, 16 + 12 * 8, "c", 1);
0x4D72	0x0103      	MOVLB       3
0x4D74	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4D76	0x0E70      	MOVLW       112
0x4D78	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4D7A	0x0E6A      	MOVLW       ?lstr8_main
0x4D7C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4D7E	0x0E00      	MOVLW       hi_addr(?lstr8_main)
0x4D80	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4D82	0x0E01      	MOVLW       1
0x4D84	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4D86	0xF007EC7F  	CALL        _led_wr_str, 0
0x4D8A	0xD010      	BRA         L_button_proc_test200
L_button_proc_test199:
;main.c,202 :: 		else if (type != 0) // 1602 LCD & 128*32 OLED
0x4D8C	0x0102      	MOVLB       2
0x4D8E	0x51D7      	MOVF        _type, 0, 1
0x4D90	0x0A00      	XORLW       0
0x4D92	0xE00C      	BZ          L_button_proc_test201
;main.c,203 :: 		led_wr_str(0, 8, "c", 1);
0x4D94	0x0103      	MOVLB       3
0x4D96	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x4D98	0x0E08      	MOVLW       8
0x4D9A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x4D9C	0x0E68      	MOVLW       ?lstr9_main
0x4D9E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x4DA0	0x0E00      	MOVLW       hi_addr(?lstr9_main)
0x4DA2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x4DA4	0x0E01      	MOVLW       1
0x4DA6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x4DA8	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc_test201:
L_button_proc_test200:
;main.c,204 :: 		}
L_button_proc_test198:
;main.c,205 :: 		}
L_button_proc_test191:
;main.c,206 :: 		while (Button( & PORTB, 0, 50, 0))
L_button_proc_test202:
0x4DAC	0x0E81      	MOVLW       PORTB
0x4DAE	0x0103      	MOVLB       3
0x4DB0	0x6F5F      	MOVWF       FARG_Button_port, 1
0x4DB2	0x0E0F      	MOVLW       hi_addr(PORTB)
0x4DB4	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x4DB6	0x6B61      	CLRF        FARG_Button_pin, 1
0x4DB8	0x0E32      	MOVLW       50
0x4DBA	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x4DBC	0x6B63      	CLRF        FARG_Button_active_state, 1
0x4DBE	0xF00AEC41  	CALL        _Button, 0
0x4DC2	0x5200      	MOVF        R0, 1 
0x4DC4	0xE004      	BZ          L_button_proc_test203
;main.c,208 :: 		lcd_pwr();
0x4DC6	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,209 :: 		asm CLRWDT;
0x4DCA	0x0004      	CLRWDT
;main.c,210 :: 		}
0x4DCC	0xD7EF      	BRA         L_button_proc_test202
L_button_proc_test203:
;main.c,211 :: 		} // END Tune btn
L_button_proc_test186:
;main.c,213 :: 		if (Button( & PORTB, 2, 50, 0)) { // BYP button
0x4DCE	0x0E81      	MOVLW       PORTB
0x4DD0	0x0103      	MOVLB       3
0x4DD2	0x6F5F      	MOVWF       FARG_Button_port, 1
0x4DD4	0x0E0F      	MOVLW       hi_addr(PORTB)
0x4DD6	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x4DD8	0x0E02      	MOVLW       2
0x4DDA	0x6F61      	MOVWF       FARG_Button_pin, 1
0x4DDC	0x0E32      	MOVLW       50
0x4DDE	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x4DE0	0x6B63      	CLRF        FARG_Button_active_state, 1
0x4DE2	0xF00AEC41  	CALL        _Button, 0
0x4DE6	0x5200      	MOVF        R0, 1 
0x4DE8	0xE06B      	BZ          L_button_proc_test204
;main.c,214 :: 		asm CLRWDT;
0x4DEA	0x0004      	CLRWDT
;main.c,215 :: 		while (PORTB.B2 == 0)
L_button_proc_test205:
0x4DEC	0xB481      	BTFSC       PORTB, 2 
0x4DEE	0xD068      	BRA         L_button_proc_test206
;main.c,217 :: 		if (L & ind < 32 * L_mult - 1)
0x4DF0	0x0E05      	MOVLW       5
0x4DF2	0x6E02      	MOVWF       R2 
0x4DF4	0xF000C2B6  	MOVFF       main_L_mult, R0
0x4DF8	0x0E00      	MOVLW       0
0x4DFA	0x6E01      	MOVWF       R1 
0x4DFC	0x5002      	MOVF        R2, 0 
L__button_proc_test611:
0x4DFE	0xE005      	BZ          L__button_proc_test612
0x4E00	0x3600      	RLCF        R0, 1 
0x4E02	0x9000      	BCF         R0, 0 
0x4E04	0x3601      	RLCF        R1, 1 
0x4E06	0x0FFF      	ADDLW       255
0x4E08	0xD7FA      	BRA         L__button_proc_test611
L__button_proc_test612:
0x4E0A	0x0E01      	MOVLW       1
0x4E0C	0x5C00      	SUBWF       R0, 0 
0x4E0E	0x6E02      	MOVWF       R2 
0x4E10	0x0E00      	MOVLW       0
0x4E12	0x5801      	SUBWFB      R1, 0 
0x4E14	0x6E03      	MOVWF       R3 
0x4E16	0x0E80      	MOVLW       128
0x4E18	0x6E00      	MOVWF       R0 
0x4E1A	0x0E80      	MOVLW       128
0x4E1C	0x1803      	XORWF       R3, 0 
0x4E1E	0x5C00      	SUBWF       R0, 0 
0x4E20	0xE103      	BNZ         L__button_proc_test613
0x4E22	0x5002      	MOVF        R2, 0 
0x4E24	0x0102      	MOVLB       2
0x4E26	0x5D75      	SUBWF       main_ind, 0, 1
L__button_proc_test613:
0x4E28	0x0E01      	MOVLW       1
0x4E2A	0xB0D8      	BTFSC       STATUS, 0 
0x4E2C	0x0E00      	MOVLW       0
0x4E2E	0x6E00      	MOVWF       R0 
0x4E30	0x0100      	MOVLB       0
0x4E32	0x51BA      	MOVF        _L, 0, 1
0x4E34	0x1600      	ANDWF       R0, 1 
0x4E36	0xE007      	BZ          L_button_proc_test207
;main.c,219 :: 		ind++;
0x4E38	0x0102      	MOVLB       2
0x4E3A	0x2B75      	INCF        main_ind, 1, 1
;main.c,220 :: 		set_ind(ind);
0x4E3C	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x4E40	0xF017EC39  	CALL        _set_ind, 0
;main.c,221 :: 		}
0x4E44	0xD02F      	BRA         L_button_proc_test208
L_button_proc_test207:
;main.c,222 :: 		else if (!L & cap < 32 * L_mult - 1)
0x4E46	0x0100      	MOVLB       0
0x4E48	0x53BA      	MOVF        _L, 1, 1
0x4E4A	0x0E01      	MOVLW       1
0x4E4C	0xA4D8      	BTFSS       STATUS, 2 
0x4E4E	0x0E00      	MOVLW       0
0x4E50	0x6E04      	MOVWF       R4 
0x4E52	0x0E05      	MOVLW       5
0x4E54	0x6E02      	MOVWF       R2 
0x4E56	0xF000C2B6  	MOVFF       main_L_mult, R0
0x4E5A	0x0E00      	MOVLW       0
0x4E5C	0x6E01      	MOVWF       R1 
0x4E5E	0x5002      	MOVF        R2, 0 
L__button_proc_test614:
0x4E60	0xE005      	BZ          L__button_proc_test615
0x4E62	0x3600      	RLCF        R0, 1 
0x4E64	0x9000      	BCF         R0, 0 
0x4E66	0x3601      	RLCF        R1, 1 
0x4E68	0x0FFF      	ADDLW       255
0x4E6A	0xD7FA      	BRA         L__button_proc_test614
L__button_proc_test615:
0x4E6C	0x0E01      	MOVLW       1
0x4E6E	0x5C00      	SUBWF       R0, 0 
0x4E70	0x6E02      	MOVWF       R2 
0x4E72	0x0E00      	MOVLW       0
0x4E74	0x5801      	SUBWFB      R1, 0 
0x4E76	0x6E03      	MOVWF       R3 
0x4E78	0x0E80      	MOVLW       128
0x4E7A	0x6E00      	MOVWF       R0 
0x4E7C	0x0E80      	MOVLW       128
0x4E7E	0x1803      	XORWF       R3, 0 
0x4E80	0x5C00      	SUBWF       R0, 0 
0x4E82	0xE103      	BNZ         L__button_proc_test616
0x4E84	0x5002      	MOVF        R2, 0 
0x4E86	0x0102      	MOVLB       2
0x4E88	0x5D5D      	SUBWF       main_cap, 0, 1
L__button_proc_test616:
0x4E8A	0x0E01      	MOVLW       1
0x4E8C	0xB0D8      	BTFSC       STATUS, 0 
0x4E8E	0x0E00      	MOVLW       0
0x4E90	0x6E00      	MOVWF       R0 
0x4E92	0x5004      	MOVF        R4, 0 
0x4E94	0x1600      	ANDWF       R0, 1 
0x4E96	0xE006      	BZ          L_button_proc_test209
;main.c,224 :: 		cap++;
0x4E98	0x0102      	MOVLB       2
0x4E9A	0x2B5D      	INCF        main_cap, 1, 1
;main.c,225 :: 		set_cap(cap);
0x4E9C	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x4EA0	0xF012EC5F  	CALL        _set_cap, 0
;main.c,226 :: 		}
L_button_proc_test209:
L_button_proc_test208:
;main.c,227 :: 		lcd_ind();
0x4EA4	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,228 :: 		lcd_pwr();
0x4EA8	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,229 :: 		Delay_ms(30);
0x4EAC	0x0E9C      	MOVLW       156
0x4EAE	0x6E0C      	MOVWF       R12, 0
0x4EB0	0x0ED7      	MOVLW       215
0x4EB2	0x6E0D      	MOVWF       R13, 0
L_button_proc_test210:
0x4EB4	0x2E0D      	DECFSZ      R13, 1, 0
0x4EB6	0xD7FE      	BRA         L_button_proc_test210
0x4EB8	0x2E0C      	DECFSZ      R12, 1, 0
0x4EBA	0xD7FC      	BRA         L_button_proc_test210
;main.c,230 :: 		asm CLRWDT;
0x4EBC	0x0004      	CLRWDT
;main.c,231 :: 		}
0x4EBE	0xD796      	BRA         L_button_proc_test205
L_button_proc_test206:
;main.c,232 :: 		} // end of BYP button
L_button_proc_test204:
;main.c,234 :: 		if (Button( & PORTB, 1, 50, 0) & Bypas == 0)
0x4EC0	0x0E81      	MOVLW       PORTB
0x4EC2	0x0103      	MOVLB       3
0x4EC4	0x6F5F      	MOVWF       FARG_Button_port, 1
0x4EC6	0x0E0F      	MOVLW       hi_addr(PORTB)
0x4EC8	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x4ECA	0x0E01      	MOVLW       1
0x4ECC	0x6F61      	MOVWF       FARG_Button_pin, 1
0x4ECE	0x0E32      	MOVLW       50
0x4ED0	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x4ED2	0x6B63      	CLRF        FARG_Button_active_state, 1
0x4ED4	0xF00AEC41  	CALL        _Button, 0
0x4ED8	0x5067      	MOVF        _bypas, 0 
0x4EDA	0x0A00      	XORLW       0
0x4EDC	0x0E01      	MOVLW       1
0x4EDE	0xA4D8      	BTFSS       STATUS, 2 
0x4EE0	0x0E00      	MOVLW       0
0x4EE2	0x6E01      	MOVWF       R1 
0x4EE4	0x5001      	MOVF        R1, 0 
0x4EE6	0x1600      	ANDWF       R0, 1 
0x4EE8	0xE038      	BZ          L_button_proc_test211
;main.c,236 :: 		asm CLRWDT;
0x4EEA	0x0004      	CLRWDT
;main.c,237 :: 		while (PORTB.B1 == 0) {
L_button_proc_test212:
0x4EEC	0xB281      	BTFSC       PORTB, 1 
0x4EEE	0xD035      	BRA         L_button_proc_test213
;main.c,238 :: 		if (L & ind > 0) {
0x4EF0	0x0102      	MOVLB       2
0x4EF2	0x5175      	MOVF        main_ind, 0, 1
0x4EF4	0x0800      	SUBLW       0
0x4EF6	0x0E01      	MOVLW       1
0x4EF8	0xB0D8      	BTFSC       STATUS, 0 
0x4EFA	0x0E00      	MOVLW       0
0x4EFC	0x6E00      	MOVWF       R0 
0x4EFE	0x0100      	MOVLB       0
0x4F00	0x51BA      	MOVF        _L, 0, 1
0x4F02	0x1600      	ANDWF       R0, 1 
0x4F04	0xE007      	BZ          L_button_proc_test214
;main.c,239 :: 		ind--;
0x4F06	0x0102      	MOVLB       2
0x4F08	0x0775      	DECF        main_ind, 1, 1
;main.c,240 :: 		set_ind(ind);
0x4F0A	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x4F0E	0xF017EC39  	CALL        _set_ind, 0
;main.c,241 :: 		} else if (!L & cap > 0) {
0x4F12	0xD015      	BRA         L_button_proc_test215
L_button_proc_test214:
0x4F14	0x0100      	MOVLB       0
0x4F16	0x53BA      	MOVF        _L, 1, 1
0x4F18	0x0E01      	MOVLW       1
0x4F1A	0xA4D8      	BTFSS       STATUS, 2 
0x4F1C	0x0E00      	MOVLW       0
0x4F1E	0x6E01      	MOVWF       R1 
0x4F20	0x0102      	MOVLB       2
0x4F22	0x515D      	MOVF        main_cap, 0, 1
0x4F24	0x0800      	SUBLW       0
0x4F26	0x0E01      	MOVLW       1
0x4F28	0xB0D8      	BTFSC       STATUS, 0 
0x4F2A	0x0E00      	MOVLW       0
0x4F2C	0x6E00      	MOVWF       R0 
0x4F2E	0x5001      	MOVF        R1, 0 
0x4F30	0x1600      	ANDWF       R0, 1 
0x4F32	0xE005      	BZ          L_button_proc_test216
;main.c,242 :: 		cap--;
0x4F34	0x075D      	DECF        main_cap, 1, 1
;main.c,243 :: 		set_cap(cap);
0x4F36	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x4F3A	0xF012EC5F  	CALL        _set_cap, 0
;main.c,244 :: 		}
L_button_proc_test216:
L_button_proc_test215:
;main.c,245 :: 		lcd_ind();
0x4F3E	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,246 :: 		lcd_pwr();
0x4F42	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,247 :: 		Delay_ms(30);
0x4F46	0x0E9C      	MOVLW       156
0x4F48	0x6E0C      	MOVWF       R12, 0
0x4F4A	0x0ED7      	MOVLW       215
0x4F4C	0x6E0D      	MOVWF       R13, 0
L_button_proc_test217:
0x4F4E	0x2E0D      	DECFSZ      R13, 1, 0
0x4F50	0xD7FE      	BRA         L_button_proc_test217
0x4F52	0x2E0C      	DECFSZ      R12, 1, 0
0x4F54	0xD7FC      	BRA         L_button_proc_test217
;main.c,248 :: 		asm CLRWDT;
0x4F56	0x0004      	CLRWDT
;main.c,249 :: 		}
0x4F58	0xD7C9      	BRA         L_button_proc_test212
L_button_proc_test213:
;main.c,250 :: 		}
L_button_proc_test211:
;main.c,251 :: 		return;
;main.c,252 :: 		}
L_end_button_proc_test:
0x4F5A	0x0012      	RETURN      0
; end of _button_proc_test
_Soft_I2C_Init:
;oled_control.c,346 :: 		void Soft_I2C_Init () {
;oled_control.c,347 :: 		led_addr = EEPROM_read(0);   //  4E,7E for 1602   or 78, 7A for OLED
0x4F5C	0x0103      	MOVLB       3
0x4F5E	0x6B26      	CLRF        FARG_EEPROM_Read_address, 1
0x4F60	0xF023EC88  	CALL        _EEPROM_Read, 0
0x4F64	0xF2CCC000  	MOVFF       R0, oled_control_led_addr
;oled_control.c,348 :: 		led_type = EEPROM_read(1);
0x4F68	0x0E01      	MOVLW       1
0x4F6A	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x4F6C	0xF023EC88  	CALL        _EEPROM_Read, 0
0x4F70	0xF2BCC000  	MOVFF       R0, oled_control_led_type
;oled_control.c,349 :: 		if(led_type==0) {
0x4F74	0x5000      	MOVF        R0, 0 
0x4F76	0x0A00      	XORLW       0
0x4F78	0xE105      	BNZ         L_Soft_I2C_Init72
;oled_control.c,350 :: 		Soft_I2C_Scl_Direction = 0;
0x4F7A	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,351 :: 		Soft_I2C_Sda_Direction = 0;
0x4F7C	0x9E93      	BCF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,352 :: 		LATB.B6 = 1;
0x4F7E	0x8C8A      	BSF         LATB, 6 
;oled_control.c,353 :: 		LATB.B7 = 1;
0x4F80	0x8E8A      	BSF         LATB, 7 
;oled_control.c,354 :: 		}
0x4F82	0xD004      	BRA         L_Soft_I2C_Init73
L_Soft_I2C_Init72:
;oled_control.c,356 :: 		Soft_I2C_Scl_Direction = 1;
0x4F84	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;oled_control.c,357 :: 		Soft_I2C_Sda_Direction = 1;
0x4F86	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;oled_control.c,358 :: 		Soft_I2C_Scl = 0;
0x4F88	0x9C8A      	BCF         LATB6_bit, BitPos(LATB6_bit+0) 
;oled_control.c,359 :: 		Soft_I2C_Sda = 0;
0x4F8A	0x9E8A      	BCF         LATB7_bit, BitPos(LATB7_bit+0) 
;oled_control.c,360 :: 		}
L_Soft_I2C_Init73:
;oled_control.c,361 :: 		}
L_end_Soft_I2C_Init:
0x4F8C	0x0012      	RETURN      0
; end of _Soft_I2C_Init
_pic_init:
;pic_init.c,6 :: 		void pic_init (void) {
;pic_init.c,7 :: 		CMCON = 0b00000111; // Comparator OFF
0x4F8E	0x0E07      	MOVLW       7
0x4F90	0x6EB4      	MOVWF       CMCON 
;pic_init.c,9 :: 		OSCCON = 0b01100000; // 4 MHz oscillator      //  0b01110000  - 8 MHz
0x4F92	0x0E60      	MOVLW       96
0x4F94	0x6ED3      	MOVWF       OSCCON 
;pic_init.c,10 :: 		PLLEN_bit = 1; //4xPLL enable   4 * 4 = 16 MHz
0x4F96	0x8C9B      	BSF         PLLEN_bit, BitPos(PLLEN_bit+0) 
;pic_init.c,12 :: 		PORTA = 0;
0x4F98	0x6A80      	CLRF        PORTA 
;pic_init.c,13 :: 		PORTB = 0;
0x4F9A	0x6A81      	CLRF        PORTB 
;pic_init.c,14 :: 		PORTC = 0;
0x4F9C	0x6A82      	CLRF        PORTC 
;pic_init.c,15 :: 		LATA = 0b01000000;   // PORT6 /Tx_req to 1
0x4F9E	0x0E40      	MOVLW       64
0x4FA0	0x6E89      	MOVWF       LATA 
;pic_init.c,16 :: 		LATB = 0;
0x4FA2	0x6A8A      	CLRF        LATB 
;pic_init.c,17 :: 		LATC = 0;
0x4FA4	0x6A8B      	CLRF        LATC 
;pic_init.c,18 :: 		TRISA = 0b00000011;
0x4FA6	0x0E03      	MOVLW       3
0x4FA8	0x6E92      	MOVWF       TRISA 
;pic_init.c,19 :: 		TRISB = 0b00000111;
0x4FAA	0x0E07      	MOVLW       7
0x4FAC	0x6E93      	MOVWF       TRISB 
;pic_init.c,20 :: 		TRISC = 0b00000000;     //
0x4FAE	0x6A94      	CLRF        TRISC 
;pic_init.c,22 :: 		ADC_Init();
0x4FB0	0xF023EC90  	CALL        _ADC_Init, 0
;pic_init.c,25 :: 		ADCON1 = 0b00001101; // ADC ports conf
0x4FB4	0x0E0D      	MOVLW       13
0x4FB6	0x6EC1      	MOVWF       ADCON1 
;pic_init.c,27 :: 		RBPU_bit = 0;
0x4FB8	0x9EF1      	BCF         RBPU_bit, BitPos(RBPU_bit+0) 
;pic_init.c,30 :: 		GIE_bit = 0;
0x4FBA	0x9EF2      	BCF         GIE_bit, BitPos(GIE_bit+0) 
;pic_init.c,31 :: 		}
L_end_pic_init:
0x4FBC	0x0012      	RETURN      0
; end of _pic_init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x4FBE	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x4FC0	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x4FC4	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x4FC6	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x4FC8	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x4FCA	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x4FCC	0x0012      	RETURN      0
; end of ___CC2DW
_cells_init:
;main.c,988 :: 		void cells_init(void) {
;main.c,990 :: 		asm CLRWDT;
0x4FCE	0x0004      	CLRWDT
;main.c,992 :: 		type = EEPROM_Read(1); // type of display
0x4FD0	0x0E01      	MOVLW       1
0x4FD2	0x0103      	MOVLB       3
0x4FD4	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x4FD6	0xF023EC88  	CALL        _EEPROM_Read, 0
0x4FDA	0xF2D7C000  	MOVFF       R0, _type
;main.c,993 :: 		if (EEPROM_Read(2) == 1)
0x4FDE	0x0E02      	MOVLW       2
0x4FE0	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x4FE2	0xF023EC88  	CALL        _EEPROM_Read, 0
0x4FE6	0x5000      	MOVF        R0, 0 
0x4FE8	0x0A01      	XORLW       1
0x4FEA	0xE103      	BNZ         L_cells_init458
;main.c,994 :: 		Auto = 1;
0x4FEC	0x0E01      	MOVLW       1
0x4FEE	0x0100      	MOVLB       0
0x4FF0	0x6FC3      	MOVWF       _Auto, 1
L_cells_init458:
;main.c,995 :: 		Rel_Del = Bcd2Dec(EEPROM_Read(3)); // Relay's Delay
0x4FF2	0x0E03      	MOVLW       3
0x4FF4	0x0103      	MOVLB       3
0x4FF6	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x4FF8	0xF023EC88  	CALL        _EEPROM_Read, 0
0x4FFC	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5000	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5004	0xF2D1C000  	MOVFF       R0, main_Rel_Del
0x5008	0x0E00      	MOVLW       0
0x500A	0x0102      	MOVLB       2
0x500C	0x6FD2      	MOVWF       main_Rel_Del+1, 1
;main.c,996 :: 		Auto_delta = Bcd2Dec(EEPROM_Read(4)) * 10; // Auto_delta
0x500E	0x0E04      	MOVLW       4
0x5010	0x0103      	MOVLB       3
0x5012	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5014	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5018	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x501C	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5020	0x0E0A      	MOVLW       10
0x5022	0x0200      	MULWF       R0 
0x5024	0xF2BACFF3  	MOVFF       PRODL, _Auto_delta
0x5028	0xF2BBCFF4  	MOVFF       PRODH, _Auto_delta+1
;main.c,997 :: 		min_for_start = Bcd2Dec(EEPROM_Read(5)) * 10; // P_min_for_start
0x502C	0x0E05      	MOVLW       5
0x502E	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5030	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5034	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5038	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x503C	0x0E0A      	MOVLW       10
0x503E	0x0200      	MULWF       R0 
0x5040	0xF2DACFF3  	MOVFF       PRODL, main_min_for_start
0x5044	0xF2DBCFF4  	MOVFF       PRODH, main_min_for_start+1
;main.c,998 :: 		max_for_start = Bcd2Dec(EEPROM_Read(6)) * 10; // P_max_for_start
0x5048	0x0E06      	MOVLW       6
0x504A	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x504C	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5050	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5054	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5058	0x0E0A      	MOVLW       10
0x505A	0x0200      	MULWF       R0 
0x505C	0xF2DECFF3  	MOVFF       PRODL, main_max_for_start
0x5060	0xF2DFCFF4  	MOVFF       PRODH, main_max_for_start+1
;main.c,1001 :: 		max_swr = Bcd2Dec(EEPROM_Read(9)) * 10; // Max SWR
0x5064	0x0E09      	MOVLW       9
0x5066	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5068	0xF023EC88  	CALL        _EEPROM_Read, 0
0x506C	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5070	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5074	0x0E0A      	MOVLW       10
0x5076	0x0200      	MULWF       R0 
0x5078	0xF30DCFF3  	MOVFF       PRODL, main_max_swr
0x507C	0xF30ECFF4  	MOVFF       PRODH, main_max_swr+1
;main.c,1002 :: 		L_q = EEPROM_Read(10);
0x5080	0x0E0A      	MOVLW       10
0x5082	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5084	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5088	0xF2B5C000  	MOVFF       R0, main_L_q
;main.c,1003 :: 		L_linear = EEPROM_Read(11);
0x508C	0x0E0B      	MOVLW       11
0x508E	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5090	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5094	0xF2B8C000  	MOVFF       R0, main_L_linear
;main.c,1004 :: 		C_q = EEPROM_Read(12);
0x5098	0x0E0C      	MOVLW       12
0x509A	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x509C	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50A0	0xF2B4C000  	MOVFF       R0, main_C_q
;main.c,1005 :: 		C_linear = EEPROM_Read(13);
0x50A4	0x0E0D      	MOVLW       13
0x50A6	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x50A8	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50AC	0xF2AEC000  	MOVFF       R0, main_C_linear
;main.c,1006 :: 		D_correction = EEPROM_Read(14);
0x50B0	0x0E0E      	MOVLW       14
0x50B2	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x50B4	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50B8	0xF050C000  	MOVFF       R0, main_D_correction
;main.c,1007 :: 		L_invert = EEPROM_Read(15);
0x50BC	0x0E0F      	MOVLW       15
0x50BE	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x50C0	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50C4	0xF25CC000  	MOVFF       R0, main_L_invert
;main.c,1009 :: 		asm CLRWDT;
0x50C8	0x0004      	CLRWDT
;main.c,1010 :: 		Ind1 = Bcd2Dec(EEPROM_Read(16)) * 100 + Bcd2Dec(EEPROM_Read(17)); // Ind1
0x50CA	0x0E10      	MOVLW       16
0x50CC	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x50CE	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50D2	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x50D6	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x50DA	0x0E64      	MOVLW       100
0x50DC	0x0200      	MULWF       R0 
0x50DE	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x50E2	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x50E6	0x0E11      	MOVLW       17
0x50E8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x50EA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x50EE	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x50F2	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x50F6	0x5000      	MOVF        R0, 0 
0x50F8	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x50FA	0x0102      	MOVLB       2
0x50FC	0x6FF4      	MOVWF       _Ind1, 1
0x50FE	0x0E00      	MOVLW       0
0x5100	0x0103      	MOVLB       3
0x5102	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5104	0x0102      	MOVLB       2
0x5106	0x6FF5      	MOVWF       _Ind1+1, 1
;main.c,1011 :: 		Ind2 = Bcd2Dec(EEPROM_Read(18)) * 100 + Bcd2Dec(EEPROM_Read(19)); // Ind2
0x5108	0x0E12      	MOVLW       18
0x510A	0x0103      	MOVLB       3
0x510C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x510E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5112	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5116	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x511A	0x0E64      	MOVLW       100
0x511C	0x0200      	MULWF       R0 
0x511E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5122	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5126	0x0E13      	MOVLW       19
0x5128	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x512A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x512E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5132	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5136	0x5000      	MOVF        R0, 0 
0x5138	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x513A	0x0102      	MOVLB       2
0x513C	0x6FF2      	MOVWF       _Ind2, 1
0x513E	0x0E00      	MOVLW       0
0x5140	0x0103      	MOVLB       3
0x5142	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5144	0x0102      	MOVLB       2
0x5146	0x6FF3      	MOVWF       _Ind2+1, 1
;main.c,1012 :: 		Ind3 = Bcd2Dec(EEPROM_Read(20)) * 100 + Bcd2Dec(EEPROM_Read(21)); // Ind3
0x5148	0x0E14      	MOVLW       20
0x514A	0x0103      	MOVLB       3
0x514C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x514E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5152	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5156	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x515A	0x0E64      	MOVLW       100
0x515C	0x0200      	MULWF       R0 
0x515E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5162	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5166	0x0E15      	MOVLW       21
0x5168	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x516A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x516E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5172	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5176	0x5000      	MOVF        R0, 0 
0x5178	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x517A	0x0102      	MOVLB       2
0x517C	0x6FFC      	MOVWF       _Ind3, 1
0x517E	0x0E00      	MOVLW       0
0x5180	0x0103      	MOVLB       3
0x5182	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5184	0x0102      	MOVLB       2
0x5186	0x6FFD      	MOVWF       _Ind3+1, 1
;main.c,1013 :: 		Ind4 = Bcd2Dec(EEPROM_Read(22)) * 100 + Bcd2Dec(EEPROM_Read(23)); // Ind4
0x5188	0x0E16      	MOVLW       22
0x518A	0x0103      	MOVLB       3
0x518C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x518E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5192	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5196	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x519A	0x0E64      	MOVLW       100
0x519C	0x0200      	MULWF       R0 
0x519E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x51A2	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x51A6	0x0E17      	MOVLW       23
0x51A8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x51AA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x51AE	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x51B2	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x51B6	0x5000      	MOVF        R0, 0 
0x51B8	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x51BA	0x0102      	MOVLB       2
0x51BC	0x6FFA      	MOVWF       _Ind4, 1
0x51BE	0x0E00      	MOVLW       0
0x51C0	0x0103      	MOVLB       3
0x51C2	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x51C4	0x0102      	MOVLB       2
0x51C6	0x6FFB      	MOVWF       _Ind4+1, 1
;main.c,1014 :: 		Ind5 = Bcd2Dec(EEPROM_Read(24)) * 100 + Bcd2Dec(EEPROM_Read(25)); // Ind5
0x51C8	0x0E18      	MOVLW       24
0x51CA	0x0103      	MOVLB       3
0x51CC	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x51CE	0xF023EC88  	CALL        _EEPROM_Read, 0
0x51D2	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x51D6	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x51DA	0x0E64      	MOVLW       100
0x51DC	0x0200      	MULWF       R0 
0x51DE	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x51E2	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x51E6	0x0E19      	MOVLW       25
0x51E8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x51EA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x51EE	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x51F2	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x51F6	0x5000      	MOVF        R0, 0 
0x51F8	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x51FA	0x0102      	MOVLB       2
0x51FC	0x6FF8      	MOVWF       _Ind5, 1
0x51FE	0x0E00      	MOVLW       0
0x5200	0x0103      	MOVLB       3
0x5202	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5204	0x0102      	MOVLB       2
0x5206	0x6FF9      	MOVWF       _Ind5+1, 1
;main.c,1015 :: 		Ind6 = Bcd2Dec(EEPROM_Read(26)) * 100 + Bcd2Dec(EEPROM_Read(27)); // Ind6
0x5208	0x0E1A      	MOVLW       26
0x520A	0x0103      	MOVLB       3
0x520C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x520E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5212	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5216	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x521A	0x0E64      	MOVLW       100
0x521C	0x0200      	MULWF       R0 
0x521E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5222	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5226	0x0E1B      	MOVLW       27
0x5228	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x522A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x522E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5232	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5236	0x5000      	MOVF        R0, 0 
0x5238	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x523A	0x0102      	MOVLB       2
0x523C	0x6FF0      	MOVWF       _Ind6, 1
0x523E	0x0E00      	MOVLW       0
0x5240	0x0103      	MOVLB       3
0x5242	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5244	0x0102      	MOVLB       2
0x5246	0x6FF1      	MOVWF       _Ind6+1, 1
;main.c,1016 :: 		Ind7 = Bcd2Dec(EEPROM_Read(28)) * 100 + Bcd2Dec(EEPROM_Read(29)); // Ind7
0x5248	0x0E1C      	MOVLW       28
0x524A	0x0103      	MOVLB       3
0x524C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x524E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5252	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5256	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x525A	0x0E64      	MOVLW       100
0x525C	0x0200      	MULWF       R0 
0x525E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5262	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5266	0x0E1D      	MOVLW       29
0x5268	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x526A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x526E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5272	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5276	0x5000      	MOVF        R0, 0 
0x5278	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x527A	0x0102      	MOVLB       2
0x527C	0x6FEE      	MOVWF       _Ind7, 1
0x527E	0x0E00      	MOVLW       0
0x5280	0x0103      	MOVLB       3
0x5282	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5284	0x0102      	MOVLB       2
0x5286	0x6FEF      	MOVWF       _Ind7+1, 1
;main.c,1018 :: 		Cap1 = Bcd2Dec(EEPROM_Read(32)) * 100 + Bcd2Dec(EEPROM_Read(33)); // Cap1
0x5288	0x0E20      	MOVLW       32
0x528A	0x0103      	MOVLB       3
0x528C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x528E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5292	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5296	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x529A	0x0E64      	MOVLW       100
0x529C	0x0200      	MULWF       R0 
0x529E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x52A2	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x52A6	0x0E21      	MOVLW       33
0x52A8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x52AA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x52AE	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x52B2	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x52B6	0x5000      	MOVF        R0, 0 
0x52B8	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x52BA	0x6F0B      	MOVWF       _Cap1, 1
0x52BC	0x0E00      	MOVLW       0
0x52BE	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x52C0	0x6F0C      	MOVWF       _Cap1+1, 1
;main.c,1019 :: 		Cap2 = Bcd2Dec(EEPROM_Read(34)) * 100 + Bcd2Dec(EEPROM_Read(35)); // Cap2
0x52C2	0x0E22      	MOVLW       34
0x52C4	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x52C6	0xF023EC88  	CALL        _EEPROM_Read, 0
0x52CA	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x52CE	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x52D2	0x0E64      	MOVLW       100
0x52D4	0x0200      	MULWF       R0 
0x52D6	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x52DA	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x52DE	0x0E23      	MOVLW       35
0x52E0	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x52E2	0xF023EC88  	CALL        _EEPROM_Read, 0
0x52E6	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x52EA	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x52EE	0x5000      	MOVF        R0, 0 
0x52F0	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x52F2	0x6F09      	MOVWF       _Cap2, 1
0x52F4	0x0E00      	MOVLW       0
0x52F6	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x52F8	0x6F0A      	MOVWF       _Cap2+1, 1
;main.c,1020 :: 		Cap3 = Bcd2Dec(EEPROM_Read(36)) * 100 + Bcd2Dec(EEPROM_Read(37)); // Cap3
0x52FA	0x0E24      	MOVLW       36
0x52FC	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x52FE	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5302	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5306	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x530A	0x0E64      	MOVLW       100
0x530C	0x0200      	MULWF       R0 
0x530E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5312	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5316	0x0E25      	MOVLW       37
0x5318	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x531A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x531E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5322	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5326	0x5000      	MOVF        R0, 0 
0x5328	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x532A	0x6F07      	MOVWF       _Cap3, 1
0x532C	0x0E00      	MOVLW       0
0x532E	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5330	0x6F08      	MOVWF       _Cap3+1, 1
;main.c,1021 :: 		Cap4 = Bcd2Dec(EEPROM_Read(38)) * 100 + Bcd2Dec(EEPROM_Read(39)); // Cap4
0x5332	0x0E26      	MOVLW       38
0x5334	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5336	0xF023EC88  	CALL        _EEPROM_Read, 0
0x533A	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x533E	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5342	0x0E64      	MOVLW       100
0x5344	0x0200      	MULWF       R0 
0x5346	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x534A	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x534E	0x0E27      	MOVLW       39
0x5350	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5352	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5356	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x535A	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x535E	0x5000      	MOVF        R0, 0 
0x5360	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x5362	0x6F05      	MOVWF       _Cap4, 1
0x5364	0x0E00      	MOVLW       0
0x5366	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5368	0x6F06      	MOVWF       _Cap4+1, 1
;main.c,1022 :: 		Cap5 = Bcd2Dec(EEPROM_Read(40)) * 100 + Bcd2Dec(EEPROM_Read(41)); // Cap5
0x536A	0x0E28      	MOVLW       40
0x536C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x536E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5372	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5376	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x537A	0x0E64      	MOVLW       100
0x537C	0x0200      	MULWF       R0 
0x537E	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x5382	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x5386	0x0E29      	MOVLW       41
0x5388	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x538A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x538E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5392	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5396	0x5000      	MOVF        R0, 0 
0x5398	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x539A	0x6F03      	MOVWF       _Cap5, 1
0x539C	0x0E00      	MOVLW       0
0x539E	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x53A0	0x6F04      	MOVWF       _Cap5+1, 1
;main.c,1023 :: 		Cap6 = Bcd2Dec(EEPROM_Read(42)) * 100 + Bcd2Dec(EEPROM_Read(43)); // Cap6
0x53A2	0x0E2A      	MOVLW       42
0x53A4	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x53A6	0xF023EC88  	CALL        _EEPROM_Read, 0
0x53AA	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x53AE	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x53B2	0x0E64      	MOVLW       100
0x53B4	0x0200      	MULWF       R0 
0x53B6	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x53BA	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x53BE	0x0E2B      	MOVLW       43
0x53C0	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x53C2	0xF023EC88  	CALL        _EEPROM_Read, 0
0x53C6	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x53CA	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x53CE	0x5000      	MOVF        R0, 0 
0x53D0	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x53D2	0x6F01      	MOVWF       _Cap6, 1
0x53D4	0x0E00      	MOVLW       0
0x53D6	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x53D8	0x6F02      	MOVWF       _Cap6+1, 1
;main.c,1024 :: 		Cap7 = Bcd2Dec(EEPROM_Read(44)) * 100 + Bcd2Dec(EEPROM_Read(45)); // Cap7
0x53DA	0x0E2C      	MOVLW       44
0x53DC	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x53DE	0xF023EC88  	CALL        _EEPROM_Read, 0
0x53E2	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x53E6	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x53EA	0x0E64      	MOVLW       100
0x53EC	0x0200      	MULWF       R0 
0x53EE	0xF30FCFF3  	MOVFF       PRODL, FLOC__cells_init
0x53F2	0xF310CFF4  	MOVFF       PRODH, FLOC__cells_init+1
0x53F6	0x0E2D      	MOVLW       45
0x53F8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x53FA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x53FE	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5402	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5406	0x5000      	MOVF        R0, 0 
0x5408	0x250F      	ADDWF       FLOC__cells_init, 0, 1
0x540A	0x0102      	MOVLB       2
0x540C	0x6FFE      	MOVWF       _Cap7, 1
0x540E	0x0E00      	MOVLW       0
0x5410	0x0103      	MOVLB       3
0x5412	0x2110      	ADDWFC      FLOC__cells_init+1, 0, 1
0x5414	0x0102      	MOVLB       2
0x5416	0x6FFF      	MOVWF       _Cap7+1, 1
;main.c,1026 :: 		P_High = EEPROM_Read(0x30); // High power
0x5418	0x0E30      	MOVLW       48
0x541A	0x0103      	MOVLB       3
0x541C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x541E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5422	0xF04EC000  	MOVFF       R0, main_P_High
;main.c,1027 :: 		K_Mult = Bcd2Dec(EEPROM_Read(0x31)); // Tandem Natch rate
0x5426	0x0E31      	MOVLW       49
0x5428	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x542A	0xF023EC88  	CALL        _EEPROM_Read, 0
0x542E	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5432	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x5436	0xF04FC000  	MOVFF       R0, main_K_Mult
;main.c,1028 :: 		Dysp_delay = Bcd2Dec(EEPROM_Read(0x32)); // Dysplay ON delay
0x543A	0x0E32      	MOVLW       50
0x543C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x543E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5442	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5446	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x544A	0xF0C8C000  	MOVFF       R0, _Dysp_delay
;main.c,1029 :: 		Loss_ind = EEPROM_Read(0x33);
0x544E	0x0E33      	MOVLW       51
0x5450	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5452	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5456	0xF25BC000  	MOVFF       R0, main_Loss_ind
;main.c,1030 :: 		Fid_loss = Bcd2Dec(EEPROM_Read(0x34));
0x545A	0x0E34      	MOVLW       52
0x545C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x545E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5462	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x5466	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x546A	0xF2B9C000  	MOVFF       R0, _Fid_loss
;main.c,1031 :: 		asm CLRWDT;
0x546E	0x0004      	CLRWDT
;main.c,1032 :: 		return;
;main.c,1034 :: 		}
L_end_cells_init:
0x5470	0x0012      	RETURN      0
; end of _cells_init
_dysp_off:
;oled_control.c,73 :: 		void dysp_off() {
;oled_control.c,74 :: 		if(led_type > 1) send_command(0xAE); // display OFF
0x5472	0x0102      	MOVLB       2
0x5474	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x5476	0x0801      	SUBLW       1
0x5478	0xE206      	BC          L_dysp_off15
0x547A	0x0EAE      	MOVLW       174
0x547C	0x0103      	MOVLB       3
0x547E	0x6F5F      	MOVWF       FARG_send_command_oled_command, 1
0x5480	0xF007ECFE  	CALL        _send_command, 0
0x5484	0xD00D      	BRA         L_dysp_off16
L_dysp_off15:
;oled_control.c,75 :: 		else if(led_type==1) {
0x5486	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x5488	0x0A01      	XORLW       1
0x548A	0xE10A      	BNZ         L_dysp_off17
;oled_control.c,76 :: 		LED = 0;
0x548C	0x6BBE      	CLRF        oled_control_LED, 1
;oled_control.c,77 :: 		RS = 0;
0x548E	0x6BBF      	CLRF        oled_control_RS, 1
;oled_control.c,78 :: 		led_send(0);
0x5490	0x0103      	MOVLB       3
0x5492	0x6B70      	CLRF        FARG_led_send_nible, 1
0x5494	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,79 :: 		led_send(0);
0x5498	0x0103      	MOVLB       3
0x549A	0x6B70      	CLRF        FARG_led_send_nible, 1
0x549C	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,80 :: 		}
L_dysp_off17:
L_dysp_off16:
;oled_control.c,81 :: 		}
L_end_dysp_off:
0x54A0	0x0012      	RETURN      0
; end of _dysp_off
_Soft_UART_Init:
;__Lib_SoftUART.c,154 :: 		
;__Lib_SoftUART.c,158 :: 		
0x54A2	0xF2C8C30F  	MOVFF       FARG_Soft_UART_Init_port, __Lib_SoftUART__port_addr
0x54A6	0xF2C9C310  	MOVFF       FARG_Soft_UART_Init_port+1, __Lib_SoftUART__port_addr+1
;__Lib_SoftUART.c,159 :: 		
0x54AA	0xF000C311  	MOVFF       FARG_Soft_UART_Init_rx_pin, R0
0x54AE	0x0E01      	MOVLW       1
0x54B0	0x6E02      	MOVWF       R2 
0x54B2	0x5000      	MOVF        R0, 0 
L__Soft_UART_Init32:
0x54B4	0xE004      	BZ          L__Soft_UART_Init33
0x54B6	0x3602      	RLCF        R2, 1 
0x54B8	0x9002      	BCF         R2, 0 
0x54BA	0x0FFF      	ADDLW       255
0x54BC	0xD7FB      	BRA         L__Soft_UART_Init32
L__Soft_UART_Init33:
0x54BE	0xF2C3C002  	MOVFF       R2, __Lib_SoftUART__rx_mask1
;__Lib_SoftUART.c,160 :: 		
0x54C2	0x1C02      	COMF        R2, 0 
0x54C4	0x0102      	MOVLB       2
0x54C6	0x6FC2      	MOVWF       __Lib_SoftUART__rx_mask0, 1
;__Lib_SoftUART.c,161 :: 		
0x54C8	0xF001C312  	MOVFF       FARG_Soft_UART_Init_tx_pin, R1
0x54CC	0x0E01      	MOVLW       1
0x54CE	0x6E00      	MOVWF       R0 
0x54D0	0x5001      	MOVF        R1, 0 
L__Soft_UART_Init34:
0x54D2	0xE004      	BZ          L__Soft_UART_Init35
0x54D4	0x3600      	RLCF        R0, 1 
0x54D6	0x9000      	BCF         R0, 0 
0x54D8	0x0FFF      	ADDLW       255
0x54DA	0xD7FB      	BRA         L__Soft_UART_Init34
L__Soft_UART_Init35:
0x54DC	0xF2C1C000  	MOVFF       R0, __Lib_SoftUART__tx_mask1
;__Lib_SoftUART.c,162 :: 		
0x54E0	0x1E00      	COMF        R0, 1 
0x54E2	0xF2C4C000  	MOVFF       R0, __Lib_SoftUART__tx_mask0
;__Lib_SoftUART.c,165 :: 		
0x54E6	0x0E12      	MOVLW       18
0x54E8	0x0103      	MOVLB       3
0x54EA	0x250F      	ADDWF       FARG_Soft_UART_Init_port, 0, 1
0x54EC	0x6EE9      	MOVWF       FSR0 
0x54EE	0x0E00      	MOVLW       0
0x54F0	0x2110      	ADDWFC      FARG_Soft_UART_Init_port+1, 0, 1
0x54F2	0x6EEA      	MOVWF       FSR0+1 
;__Lib_SoftUART.c,166 :: 		
0x54F4	0x5002      	MOVF        R2, 0 
0x54F6	0x12EF      	IORWF       INDF0, 1 
;__Lib_SoftUART.c,169 :: 		
0x54F8	0x5000      	MOVF        R0, 0 
0x54FA	0x16EF      	ANDWF       INDF0, 1 
;__Lib_SoftUART.c,171 :: 		
0x54FC	0x0102      	MOVLB       2
0x54FE	0x6BC7      	CLRF        __Lib_SoftUART_InvertMaskRd, 1
;__Lib_SoftUART.c,172 :: 		
0x5500	0x0103      	MOVLB       3
0x5502	0x5317      	MOVF        FARG_Soft_UART_Init_inverted, 1, 1
0x5504	0xE002      	BZ          L_Soft_UART_Init21
;__Lib_SoftUART.c,173 :: 		
0x5506	0x0102      	MOVLB       2
0x5508	0x1FC7      	COMF        __Lib_SoftUART_InvertMaskRd, 1, 1
L_Soft_UART_Init21:
0x550A	0x0102      	MOVLB       2
;__Lib_SoftUART.c,176 :: 		
0x550C	0x0E12      	MOVLW       18
0x550E	0x5EE9      	SUBWF       FSR0L, 1 
;__Lib_SoftUART.c,177 :: 		
0x5510	0x51C7      	MOVF        __Lib_SoftUART_InvertMaskRd, 0, 1
0x5512	0x0A00      	XORLW       0
0x5514	0xE003      	BZ          L_Soft_UART_Init22
;__Lib_SoftUART.c,179 :: 		
0x5516	0x51C4      	MOVF        __Lib_SoftUART__tx_mask0, 0, 1
0x5518	0x16EF      	ANDWF       INDF0, 1 
0x551A	0xD002      	BRA         L_Soft_UART_Init23
L_Soft_UART_Init22:
;__Lib_SoftUART.c,182 :: 		
0x551C	0x51C1      	MOVF        __Lib_SoftUART__tx_mask1, 0, 1
0x551E	0x12EF      	IORWF       INDF0, 1 
L_Soft_UART_Init23:
;__Lib_SoftUART.c,184 :: 		
0x5520	0xF023EC80  	CALL        _Get_Fosc_kHz, 0
0x5524	0x0EE8      	MOVLW       232
0x5526	0x6E04      	MOVWF       R4 
0x5528	0x0E03      	MOVLW       3
0x552A	0x6E05      	MOVWF       R5 
0x552C	0x0E00      	MOVLW       0
0x552E	0x6E06      	MOVWF       R6 
0x5530	0x6E07      	MOVWF       R7 
0x5532	0xF003EC81  	CALL        _Mul_32x32_U, 0
0x5536	0xF322C000  	MOVFF       R0, FLOC__Soft_UART_Init
0x553A	0xF323C001  	MOVFF       R1, FLOC__Soft_UART_Init+1
0x553E	0xF324C002  	MOVFF       R2, FLOC__Soft_UART_Init+2
0x5542	0xF325C003  	MOVFF       R3, FLOC__Soft_UART_Init+3
0x5546	0xF318C322  	MOVFF       FLOC__Soft_UART_Init, Soft_UART_Init_q1_L0
0x554A	0xF319C323  	MOVFF       FLOC__Soft_UART_Init+1, Soft_UART_Init_q1_L0+1
0x554E	0xF31AC324  	MOVFF       FLOC__Soft_UART_Init+2, Soft_UART_Init_q1_L0+2
0x5552	0xF31BC325  	MOVFF       FLOC__Soft_UART_Init+3, Soft_UART_Init_q1_L0+3
;__Lib_SoftUART.c,185 :: 		
0x5556	0xF000C313  	MOVFF       FARG_Soft_UART_Init_baud_rate, R0
0x555A	0xF001C314  	MOVFF       FARG_Soft_UART_Init_baud_rate+1, R1
0x555E	0xF002C315  	MOVFF       FARG_Soft_UART_Init_baud_rate+2, R2
0x5562	0xF003C316  	MOVFF       FARG_Soft_UART_Init_baud_rate+3, R3
0x5566	0x3600      	RLCF        R0, 1 
0x5568	0x9000      	BCF         R0, 0 
0x556A	0x3601      	RLCF        R1, 1 
0x556C	0x3602      	RLCF        R2, 1 
0x556E	0x3603      	RLCF        R3, 1 
0x5570	0x3600      	RLCF        R0, 1 
0x5572	0x9000      	BCF         R0, 0 
0x5574	0x3601      	RLCF        R1, 1 
0x5576	0x3602      	RLCF        R2, 1 
0x5578	0x3603      	RLCF        R3, 1 
0x557A	0x0E0A      	MOVLW       10
0x557C	0x6E04      	MOVWF       R4 
0x557E	0x0E00      	MOVLW       0
0x5580	0x6E05      	MOVWF       R5 
0x5582	0x6E06      	MOVWF       R6 
0x5584	0x6E07      	MOVWF       R7 
0x5586	0xF003EC81  	CALL        _Mul_32x32_U, 0
0x558A	0xF31CC000  	MOVFF       R0, Soft_UART_Init_q2_L0
0x558E	0xF31DC001  	MOVFF       R1, Soft_UART_Init_q2_L0+1
0x5592	0xF31EC002  	MOVFF       R2, Soft_UART_Init_q2_L0+2
0x5596	0xF31FC003  	MOVFF       R3, Soft_UART_Init_q2_L0+3
;__Lib_SoftUART.c,188 :: 		
0x559A	0xF004C000  	MOVFF       R0, R4
0x559E	0xF005C001  	MOVFF       R1, R5
0x55A2	0xF006C002  	MOVFF       R2, R6
0x55A6	0xF007C003  	MOVFF       R3, R7
0x55AA	0xF000C322  	MOVFF       FLOC__Soft_UART_Init, R0
0x55AE	0xF001C323  	MOVFF       FLOC__Soft_UART_Init+1, R1
0x55B2	0xF002C324  	MOVFF       FLOC__Soft_UART_Init+2, R2
0x55B6	0xF003C325  	MOVFF       FLOC__Soft_UART_Init+3, R3
0x55BA	0xF00DECB4  	CALL        _Div_32x32_S, 0
0x55BE	0xF320C000  	MOVFF       R0, Soft_UART_Init_temp_word_L0
0x55C2	0xF321C001  	MOVFF       R1, Soft_UART_Init_temp_word_L0+1
;__Lib_SoftUART.c,189 :: 		
0x55C6	0xF004C001  	MOVFF       R1, R4
0x55CA	0x6A05      	CLRF        R5 
0x55CC	0x5004      	MOVF        R4, 0 
0x55CE	0x1005      	IORWF       R5, 0 
0x55D0	0xE003      	BZ          L_Soft_UART_Init24
;__Lib_SoftUART.c,190 :: 		
0x55D2	0x0E02      	MOVLW       2
0x55D4	0x6E00      	MOVWF       R0 
0x55D6	0xD052      	BRA         L_end_Soft_UART_Init
L_Soft_UART_Init24:
;__Lib_SoftUART.c,192 :: 		
0x55D8	0xF2C6C320  	MOVFF       Soft_UART_Init_temp_word_L0, __Lib_SoftUART_FullBit
;__Lib_SoftUART.c,193 :: 		
0x55DC	0xF004C31C  	MOVFF       Soft_UART_Init_q2_L0, R4
0x55E0	0xF005C31D  	MOVFF       Soft_UART_Init_q2_L0+1, R5
0x55E4	0xF006C31E  	MOVFF       Soft_UART_Init_q2_L0+2, R6
0x55E8	0xF007C31F  	MOVFF       Soft_UART_Init_q2_L0+3, R7
0x55EC	0xF000C318  	MOVFF       Soft_UART_Init_q1_L0, R0
0x55F0	0xF001C319  	MOVFF       Soft_UART_Init_q1_L0+1, R1
0x55F4	0xF002C31A  	MOVFF       Soft_UART_Init_q1_L0+2, R2
0x55F8	0xF003C31B  	MOVFF       Soft_UART_Init_q1_L0+3, R3
0x55FC	0xF00DECB4  	CALL        _Div_32x32_S, 0
0x5600	0xF000C008  	MOVFF       R8, R0
0x5604	0xF001C009  	MOVFF       R9, R1
0x5608	0xF002C00A  	MOVFF       R10, R2
0x560C	0xF003C00B  	MOVFF       R11, R3
0x5610	0xF318C000  	MOVFF       R0, Soft_UART_Init_q1_L0
0x5614	0xF319C001  	MOVFF       R1, Soft_UART_Init_q1_L0+1
0x5618	0xF31AC002  	MOVFF       R2, Soft_UART_Init_q1_L0+2
0x561C	0xF31BC003  	MOVFF       R3, Soft_UART_Init_q1_L0+3
;__Lib_SoftUART.c,195 :: 		
0x5620	0xF005C31C  	MOVFF       Soft_UART_Init_q2_L0, R5
0x5624	0xF006C31D  	MOVFF       Soft_UART_Init_q2_L0+1, R6
0x5628	0xF007C31E  	MOVFF       Soft_UART_Init_q2_L0+2, R7
0x562C	0xF008C31F  	MOVFF       Soft_UART_Init_q2_L0+3, R8
0x5630	0x3208      	RRCF        R8, 1 
0x5632	0x3207      	RRCF        R7, 1 
0x5634	0x3206      	RRCF        R6, 1 
0x5636	0x3205      	RRCF        R5, 1 
0x5638	0x9E08      	BCF         R8, 7 
0x563A	0xBC08      	BTFSC       R8, 6 
0x563C	0x8E08      	BSF         R8, 7 
0x563E	0x0E80      	MOVLW       128
0x5640	0x1808      	XORWF       R8, 0 
0x5642	0x6E04      	MOVWF       R4 
0x5644	0x0E80      	MOVLW       128
0x5646	0x1803      	XORWF       R3, 0 
0x5648	0x5C04      	SUBWF       R4, 0 
0x564A	0xE108      	BNZ         L__Soft_UART_Init36
0x564C	0x5002      	MOVF        R2, 0 
0x564E	0x5C07      	SUBWF       R7, 0 
0x5650	0xE105      	BNZ         L__Soft_UART_Init36
0x5652	0x5001      	MOVF        R1, 0 
0x5654	0x5C06      	SUBWF       R6, 0 
0x5656	0xE102      	BNZ         L__Soft_UART_Init36
0x5658	0x5000      	MOVF        R0, 0 
0x565A	0x5C05      	SUBWF       R5, 0 
L__Soft_UART_Init36:
0x565C	0xE202      	BC          L_Soft_UART_Init25
;__Lib_SoftUART.c,196 :: 		
0x565E	0x0102      	MOVLB       2
0x5660	0x2BC6      	INCF        __Lib_SoftUART_FullBit, 1, 1
L_Soft_UART_Init25:
;__Lib_SoftUART.c,198 :: 		
0x5662	0xF001C2C6  	MOVFF       __Lib_SoftUART_FullBit, R1
0x5666	0x3201      	RRCF        R1, 1 
0x5668	0x9E01      	BCF         R1, 7 
0x566A	0xF2C5C001  	MOVFF       R1, __Lib_SoftUART_HalfBit
;__Lib_SoftUART.c,200 :: 		
0x566E	0x0E07      	MOVLW       7
0x5670	0x5C01      	SUBWF       R1, 0 
0x5672	0xE203      	BC          L_Soft_UART_Init26
;__Lib_SoftUART.c,201 :: 		
0x5674	0x0E01      	MOVLW       1
0x5676	0x6E00      	MOVWF       R0 
0x5678	0xD001      	BRA         L_end_Soft_UART_Init
L_Soft_UART_Init26:
;__Lib_SoftUART.c,203 :: 		
0x567A	0x6A00      	CLRF        R0 
;__Lib_SoftUART.c,204 :: 		
L_end_Soft_UART_Init:
0x567C	0x0012      	RETURN      0
; end of _Soft_UART_Init
_Test_init:
;main.c,953 :: 		void Test_init(void) { // Test mode
;main.c,954 :: 		if (type == 4 | type == 5) // 128*64 OLED
0x567E	0x0102      	MOVLB       2
0x5680	0x51D7      	MOVF        _type, 0, 1
0x5682	0x0A04      	XORLW       4
0x5684	0x0E01      	MOVLW       1
0x5686	0xA4D8      	BTFSS       STATUS, 2 
0x5688	0x0E00      	MOVLW       0
0x568A	0x6E01      	MOVWF       R1 
0x568C	0x51D7      	MOVF        _type, 0, 1
0x568E	0x0A05      	XORLW       5
0x5690	0x0E01      	MOVLW       1
0x5692	0xA4D8      	BTFSS       STATUS, 2 
0x5694	0x0E00      	MOVLW       0
0x5696	0x6E00      	MOVWF       R0 
0x5698	0x5001      	MOVF        R1, 0 
0x569A	0x1200      	IORWF       R0, 1 
0x569C	0xE00D      	BZ          L_Test_init445
;main.c,955 :: 		led_wr_str(0, 10, "TEST MODE", 9);
0x569E	0x0103      	MOVLB       3
0x56A0	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x56A2	0x0E0A      	MOVLW       10
0x56A4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x56A6	0x0E6C      	MOVLW       ?lstr89_main
0x56A8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x56AA	0x0E00      	MOVLW       hi_addr(?lstr89_main)
0x56AC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x56AE	0x0E09      	MOVLW       9
0x56B0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x56B2	0xF007EC7F  	CALL        _led_wr_str, 0
0x56B6	0xD010      	BRA         L_Test_init446
L_Test_init445:
;main.c,956 :: 		else if (type != 0) // 1602 LCD  or 128*32 OLED
0x56B8	0x0102      	MOVLB       2
0x56BA	0x51D7      	MOVF        _type, 0, 1
0x56BC	0x0A00      	XORLW       0
0x56BE	0xE00C      	BZ          L_Test_init447
;main.c,957 :: 		led_wr_str(0, 3, "TEST MODE", 9);
0x56C0	0x0103      	MOVLB       3
0x56C2	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x56C4	0x0E03      	MOVLW       3
0x56C6	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x56C8	0x0E8A      	MOVLW       ?lstr90_main
0x56CA	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x56CC	0x0E00      	MOVLW       hi_addr(?lstr90_main)
0x56CE	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x56D0	0x0E09      	MOVLW       9
0x56D2	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x56D4	0xF007EC7F  	CALL        _led_wr_str, 0
L_Test_init447:
L_Test_init446:
;main.c,958 :: 		asm CLRWDT;
0x56D8	0x0004      	CLRWDT
;main.c,959 :: 		Delay_ms(500);
0x56DA	0x0E0B      	MOVLW       11
0x56DC	0x6E0B      	MOVWF       R11, 0
0x56DE	0x0E26      	MOVLW       38
0x56E0	0x6E0C      	MOVWF       R12, 0
0x56E2	0x0E5D      	MOVLW       93
0x56E4	0x6E0D      	MOVWF       R13, 0
L_Test_init448:
0x56E6	0x2E0D      	DECFSZ      R13, 1, 0
0x56E8	0xD7FE      	BRA         L_Test_init448
0x56EA	0x2E0C      	DECFSZ      R12, 1, 0
0x56EC	0xD7FC      	BRA         L_Test_init448
0x56EE	0x2E0B      	DECFSZ      R11, 1, 0
0x56F0	0xD7FA      	BRA         L_Test_init448
0x56F2	0x0000      	NOP
0x56F4	0x0000      	NOP
;main.c,960 :: 		asm CLRWDT;
0x56F6	0x0004      	CLRWDT
;main.c,961 :: 		Delay_ms(500);
0x56F8	0x0E0B      	MOVLW       11
0x56FA	0x6E0B      	MOVWF       R11, 0
0x56FC	0x0E26      	MOVLW       38
0x56FE	0x6E0C      	MOVWF       R12, 0
0x5700	0x0E5D      	MOVLW       93
0x5702	0x6E0D      	MOVWF       R13, 0
L_Test_init449:
0x5704	0x2E0D      	DECFSZ      R13, 1, 0
0x5706	0xD7FE      	BRA         L_Test_init449
0x5708	0x2E0C      	DECFSZ      R12, 1, 0
0x570A	0xD7FC      	BRA         L_Test_init449
0x570C	0x2E0B      	DECFSZ      R11, 1, 0
0x570E	0xD7FA      	BRA         L_Test_init449
0x5710	0x0000      	NOP
0x5712	0x0000      	NOP
;main.c,962 :: 		asm CLRWDT;
0x5714	0x0004      	CLRWDT
;main.c,963 :: 		Delay_ms(500);
0x5716	0x0E0B      	MOVLW       11
0x5718	0x6E0B      	MOVWF       R11, 0
0x571A	0x0E26      	MOVLW       38
0x571C	0x6E0C      	MOVWF       R12, 0
0x571E	0x0E5D      	MOVLW       93
0x5720	0x6E0D      	MOVWF       R13, 0
L_Test_init450:
0x5722	0x2E0D      	DECFSZ      R13, 1, 0
0x5724	0xD7FE      	BRA         L_Test_init450
0x5726	0x2E0C      	DECFSZ      R12, 1, 0
0x5728	0xD7FC      	BRA         L_Test_init450
0x572A	0x2E0B      	DECFSZ      R11, 1, 0
0x572C	0xD7FA      	BRA         L_Test_init450
0x572E	0x0000      	NOP
0x5730	0x0000      	NOP
;main.c,964 :: 		asm CLRWDT;
0x5732	0x0004      	CLRWDT
;main.c,965 :: 		Delay_ms(500);
0x5734	0x0E0B      	MOVLW       11
0x5736	0x6E0B      	MOVWF       R11, 0
0x5738	0x0E26      	MOVLW       38
0x573A	0x6E0C      	MOVWF       R12, 0
0x573C	0x0E5D      	MOVLW       93
0x573E	0x6E0D      	MOVWF       R13, 0
L_Test_init451:
0x5740	0x2E0D      	DECFSZ      R13, 1, 0
0x5742	0xD7FE      	BRA         L_Test_init451
0x5744	0x2E0C      	DECFSZ      R12, 1, 0
0x5746	0xD7FC      	BRA         L_Test_init451
0x5748	0x2E0B      	DECFSZ      R11, 1, 0
0x574A	0xD7FA      	BRA         L_Test_init451
0x574C	0x0000      	NOP
0x574E	0x0000      	NOP
;main.c,966 :: 		asm CLRWDT;
0x5750	0x0004      	CLRWDT
;main.c,967 :: 		if (type == 4 | type == 5) // 128*64 OLED
0x5752	0x0102      	MOVLB       2
0x5754	0x51D7      	MOVF        _type, 0, 1
0x5756	0x0A04      	XORLW       4
0x5758	0x0E01      	MOVLW       1
0x575A	0xA4D8      	BTFSS       STATUS, 2 
0x575C	0x0E00      	MOVLW       0
0x575E	0x6E01      	MOVWF       R1 
0x5760	0x51D7      	MOVF        _type, 0, 1
0x5762	0x0A05      	XORLW       5
0x5764	0x0E01      	MOVLW       1
0x5766	0xA4D8      	BTFSS       STATUS, 2 
0x5768	0x0E00      	MOVLW       0
0x576A	0x6E00      	MOVWF       R0 
0x576C	0x5001      	MOVF        R1, 0 
0x576E	0x1200      	IORWF       R0, 1 
0x5770	0xE00D      	BZ          L_Test_init452
;main.c,968 :: 		led_wr_str(0, 10, "         ", 9);
0x5772	0x0103      	MOVLB       3
0x5774	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5776	0x0E0A      	MOVLW       10
0x5778	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x577A	0x0E80      	MOVLW       ?lstr91_main
0x577C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x577E	0x0E00      	MOVLW       hi_addr(?lstr91_main)
0x5780	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5782	0x0E09      	MOVLW       9
0x5784	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5786	0xF007EC7F  	CALL        _led_wr_str, 0
0x578A	0xD010      	BRA         L_Test_init453
L_Test_init452:
;main.c,969 :: 		else if (type != 0) // 1602 LCD  or 128*32 OLED
0x578C	0x0102      	MOVLB       2
0x578E	0x51D7      	MOVF        _type, 0, 1
0x5790	0x0A00      	XORLW       0
0x5792	0xE00C      	BZ          L_Test_init454
;main.c,970 :: 		led_wr_str(0, 3, "         ", 9);
0x5794	0x0103      	MOVLB       3
0x5796	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5798	0x0E03      	MOVLW       3
0x579A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x579C	0x0E76      	MOVLW       ?lstr92_main
0x579E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x57A0	0x0E00      	MOVLW       hi_addr(?lstr92_main)
0x57A2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x57A4	0x0E09      	MOVLW       9
0x57A6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x57A8	0xF007EC7F  	CALL        _led_wr_str, 0
L_Test_init454:
L_Test_init453:
;main.c,971 :: 		atu_reset();
0x57AC	0xF017ECB9  	CALL        _atu_reset, 0
;main.c,972 :: 		SW = 1; // C to OUT
0x57B0	0x0E01      	MOVLW       1
0x57B2	0x0102      	MOVLB       2
0x57B4	0x6F73      	MOVWF       main_SW, 1
;main.c,973 :: 		set_sw(SW);
0x57B6	0x0E01      	MOVLW       1
0x57B8	0x0103      	MOVLB       3
0x57BA	0x6F39      	MOVWF       FARG_set_sw_SW, 1
0x57BC	0xF017ECAC  	CALL        _set_sw, 0
;main.c,974 :: 		EEPROM_Write(255 - mem_offset * 5, cap);
0x57C0	0x0E05      	MOVLW       5
0x57C2	0x0102      	MOVLB       2
0x57C4	0x0372      	MULWF       _mem_offset, 1
0x57C6	0xF000CFF3  	MOVFF       PRODL, R0
0x57CA	0x5000      	MOVF        R0, 0 
0x57CC	0x08FF      	SUBLW       255
0x57CE	0x0103      	MOVLB       3
0x57D0	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x57D2	0xF33AC25D  	MOVFF       main_cap, FARG_EEPROM_Write_data_
0x57D6	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,975 :: 		EEPROM_Write(254 - mem_offset * 5, ind);
0x57DA	0x0E05      	MOVLW       5
0x57DC	0x0102      	MOVLB       2
0x57DE	0x0372      	MULWF       _mem_offset, 1
0x57E0	0xF000CFF3  	MOVFF       PRODL, R0
0x57E4	0x5000      	MOVF        R0, 0 
0x57E6	0x08FE      	SUBLW       254
0x57E8	0x0103      	MOVLB       3
0x57EA	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x57EC	0xF33AC275  	MOVFF       main_ind, FARG_EEPROM_Write_data_
0x57F0	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,976 :: 		EEPROM_Write(253 - mem_offset * 5, SW);
0x57F4	0x0E05      	MOVLW       5
0x57F6	0x0102      	MOVLB       2
0x57F8	0x0372      	MULWF       _mem_offset, 1
0x57FA	0xF000CFF3  	MOVFF       PRODL, R0
0x57FE	0x5000      	MOVF        R0, 0 
0x5800	0x08FD      	SUBLW       253
0x5802	0x0103      	MOVLB       3
0x5804	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x5806	0xF33AC273  	MOVFF       main_SW, FARG_EEPROM_Write_data_
0x580A	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,978 :: 		if (type == 4 | type == 5) // 128*64 OLED
0x580E	0x0102      	MOVLB       2
0x5810	0x51D7      	MOVF        _type, 0, 1
0x5812	0x0A04      	XORLW       4
0x5814	0x0E01      	MOVLW       1
0x5816	0xA4D8      	BTFSS       STATUS, 2 
0x5818	0x0E00      	MOVLW       0
0x581A	0x6E01      	MOVWF       R1 
0x581C	0x51D7      	MOVF        _type, 0, 1
0x581E	0x0A05      	XORLW       5
0x5820	0x0E01      	MOVLW       1
0x5822	0xA4D8      	BTFSS       STATUS, 2 
0x5824	0x0E00      	MOVLW       0
0x5826	0x6E00      	MOVWF       R0 
0x5828	0x5001      	MOVF        R1, 0 
0x582A	0x1200      	IORWF       R0, 1 
0x582C	0xE00D      	BZ          L_Test_init455
;main.c,979 :: 		led_wr_str(0, 16 + 12 * 8, "l", 1);
0x582E	0x0103      	MOVLB       3
0x5830	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5832	0x0E70      	MOVLW       112
0x5834	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5836	0x0ED9      	MOVLW       ?lstr93_main
0x5838	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x583A	0x0E01      	MOVLW       hi_addr(?lstr93_main)
0x583C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x583E	0x0E01      	MOVLW       1
0x5840	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5842	0xF007EC7F  	CALL        _led_wr_str, 0
0x5846	0xD010      	BRA         L_Test_init456
L_Test_init455:
;main.c,980 :: 		else if (type != 0) // 1602 LCD or 128*32 OLED
0x5848	0x0102      	MOVLB       2
0x584A	0x51D7      	MOVF        _type, 0, 1
0x584C	0x0A00      	XORLW       0
0x584E	0xE00C      	BZ          L_Test_init457
;main.c,981 :: 		led_wr_str(0, 8, "l", 1);
0x5850	0x0103      	MOVLB       3
0x5852	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5854	0x0E08      	MOVLW       8
0x5856	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5858	0x0ED7      	MOVLW       ?lstr94_main
0x585A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x585C	0x0E01      	MOVLW       hi_addr(?lstr94_main)
0x585E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5860	0x0E01      	MOVLW       1
0x5862	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5864	0xF007EC7F  	CALL        _led_wr_str, 0
L_Test_init457:
L_Test_init456:
;main.c,983 :: 		lcd_prep_short = 1;
0x5868	0x0E01      	MOVLW       1
0x586A	0x6E2C      	MOVWF       _lcd_prep_short 
;main.c,984 :: 		lcd_prep();
0x586C	0xF023ECB9  	CALL        _lcd_prep, 0
;main.c,985 :: 		return;
;main.c,986 :: 		}
L_end_Test_init:
0x5870	0x0012      	RETURN      0
; end of _Test_init
_read_i2c_inputs:
;main.c,1062 :: 		void read_i2c_inputs(void) {
;main.c,1065 :: 		_status = ~mem_offset | 0xF0;
0x5872	0x0102      	MOVLB       2
0x5874	0x1D72      	COMF        _mem_offset, 0, 1
0x5876	0x0103      	MOVLB       3
0x5878	0x6F0F      	MOVWF       read_i2c_inputs__status_L0, 1
0x587A	0x0EF0      	MOVLW       240
0x587C	0x130F      	IORWF       read_i2c_inputs__status_L0, 1, 1
;main.c,1067 :: 		Delay_us(100);
0x587E	0x0E85      	MOVLW       133
0x5880	0x6E0D      	MOVWF       R13, 0
L_read_i2c_inputs464:
0x5882	0x2E0D      	DECFSZ      R13, 1, 0
0x5884	0xD7FE      	BRA         L_read_i2c_inputs464
;main.c,1068 :: 		asm CLRWDT;
0x5886	0x0004      	CLRWDT
;main.c,1070 :: 		Soft_I2C_Start();
0x5888	0xF000EC45  	CALL        _Soft_I2C_Start, 0
;main.c,1071 :: 		Soft_I2C_Write(0x40); // device addres for write
0x588C	0x0E40      	MOVLW       64
0x588E	0x0103      	MOVLB       3
0x5890	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x5892	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;main.c,1072 :: 		Soft_I2C_Write(_status);
0x5896	0xF37FC30F  	MOVFF       read_i2c_inputs__status_L0, FARG_Soft_I2C_Write_d
0x589A	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;main.c,1073 :: 		Soft_I2C_Stop();
0x589E	0xF000EC69  	CALL        _Soft_I2C_Stop, 0
;main.c,1074 :: 		asm CLRWDT;
0x58A2	0x0004      	CLRWDT
;main.c,1075 :: 		Delay_us(100);
0x58A4	0x0E85      	MOVLW       133
0x58A6	0x6E0D      	MOVWF       R13, 0
L_read_i2c_inputs465:
0x58A8	0x2E0D      	DECFSZ      R13, 1, 0
0x58AA	0xD7FE      	BRA         L_read_i2c_inputs465
;main.c,1076 :: 		asm CLRWDT;
0x58AC	0x0004      	CLRWDT
;main.c,1077 :: 		Soft_I2C_Start();
0x58AE	0xF000EC45  	CALL        _Soft_I2C_Start, 0
;main.c,1078 :: 		Soft_I2C_Write(0x41); // device addres for read
0x58B2	0x0E41      	MOVLW       65
0x58B4	0x0103      	MOVLB       3
0x58B6	0x6F7F      	MOVWF       FARG_Soft_I2C_Write_d, 1
0x58B8	0xF000EC0E  	CALL        _Soft_I2C_Write, 0
;main.c,1079 :: 		_status = Soft_I2C_Read();
0x58BC	0xF023EC46  	CALL        _Soft_I2C_Read, 0
0x58C0	0xF30FC000  	MOVFF       R0, read_i2c_inputs__status_L0
;main.c,1080 :: 		Soft_I2C_Stop();
0x58C4	0xF000EC69  	CALL        _Soft_I2C_Stop, 0
;main.c,1081 :: 		asm CLRWDT;
0x58C8	0x0004      	CLRWDT
;main.c,1082 :: 		mem_offset = ~_status;
0x58CA	0x0103      	MOVLB       3
0x58CC	0x1D0F      	COMF        read_i2c_inputs__status_L0, 0, 1
0x58CE	0x0102      	MOVLB       2
0x58D0	0x6F72      	MOVWF       _mem_offset, 1
;main.c,1083 :: 		mem_offset >>= 4;
0x58D2	0x3372      	RRCF        _mem_offset, 1, 1
0x58D4	0x9F72      	BCF         _mem_offset, 7, 1
0x58D6	0x3372      	RRCF        _mem_offset, 1, 1
0x58D8	0x9F72      	BCF         _mem_offset, 7, 1
0x58DA	0x3372      	RRCF        _mem_offset, 1, 1
0x58DC	0x9F72      	BCF         _mem_offset, 7, 1
0x58DE	0x3372      	RRCF        _mem_offset, 1, 1
0x58E0	0x9F72      	BCF         _mem_offset, 7, 1
;main.c,1084 :: 		mem_offset &= 0xf;
0x58E2	0x0E0F      	MOVLW       15
0x58E4	0x1772      	ANDWF       _mem_offset, 1, 1
;main.c,1085 :: 		}
L_end_read_i2c_inputs:
0x58E6	0x0012      	RETURN      0
; end of _read_i2c_inputs
_load_settings:
;main.c,1050 :: 		void load_settings()
;main.c,1052 :: 		cap = EEPROM_Read(255 - mem_offset * 5);
0x58E8	0x0E05      	MOVLW       5
0x58EA	0x0102      	MOVLB       2
0x58EC	0x0372      	MULWF       _mem_offset, 1
0x58EE	0xF000CFF3  	MOVFF       PRODL, R0
0x58F2	0x5000      	MOVF        R0, 0 
0x58F4	0x08FF      	SUBLW       255
0x58F6	0x0103      	MOVLB       3
0x58F8	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x58FA	0xF023EC88  	CALL        _EEPROM_Read, 0
0x58FE	0xF25DC000  	MOVFF       R0, main_cap
;main.c,1053 :: 		ind = EEPROM_Read(254 - mem_offset * 5);
0x5902	0x0E05      	MOVLW       5
0x5904	0x0102      	MOVLB       2
0x5906	0x0372      	MULWF       _mem_offset, 1
0x5908	0xF000CFF3  	MOVFF       PRODL, R0
0x590C	0x5000      	MOVF        R0, 0 
0x590E	0x08FE      	SUBLW       254
0x5910	0x0103      	MOVLB       3
0x5912	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5914	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5918	0xF275C000  	MOVFF       R0, main_ind
;main.c,1054 :: 		SW = EEPROM_Read(253 - mem_offset * 5);
0x591C	0x0E05      	MOVLW       5
0x591E	0x0102      	MOVLB       2
0x5920	0x0372      	MULWF       _mem_offset, 1
0x5922	0xF000CFF3  	MOVFF       PRODL, R0
0x5926	0x5000      	MOVF        R0, 0 
0x5928	0x08FD      	SUBLW       253
0x592A	0x0103      	MOVLB       3
0x592C	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x592E	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5932	0xF273C000  	MOVFF       R0, main_SW
;main.c,1055 :: 		swr_a = EEPROM_Read(252 - mem_offset * 5) * 256;
0x5936	0x0E05      	MOVLW       5
0x5938	0x0102      	MOVLB       2
0x593A	0x0372      	MULWF       _mem_offset, 1
0x593C	0xF000CFF3  	MOVFF       PRODL, R0
0x5940	0x5000      	MOVF        R0, 0 
0x5942	0x08FC      	SUBLW       252
0x5944	0x0103      	MOVLB       3
0x5946	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5948	0xF023EC88  	CALL        _EEPROM_Read, 0
0x594C	0xF2D4C000  	MOVFF       R0, _swr_a+1
0x5950	0x0102      	MOVLB       2
0x5952	0x6BD3      	CLRF        _swr_a, 1
;main.c,1056 :: 		swr_a += EEPROM_Read(251 - mem_offset * 5);
0x5954	0x0E05      	MOVLW       5
0x5956	0x0372      	MULWF       _mem_offset, 1
0x5958	0xF000CFF3  	MOVFF       PRODL, R0
0x595C	0x5000      	MOVF        R0, 0 
0x595E	0x08FB      	SUBLW       251
0x5960	0x0103      	MOVLB       3
0x5962	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5964	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5968	0x5000      	MOVF        R0, 0 
0x596A	0x0102      	MOVLB       2
0x596C	0x27D3      	ADDWF       _swr_a, 1, 1
0x596E	0x0E00      	MOVLW       0
0x5970	0x23D4      	ADDWFC      _swr_a+1, 1, 1
;main.c,1057 :: 		set_ind(ind);
0x5972	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x5976	0xF017EC39  	CALL        _set_ind, 0
;main.c,1058 :: 		set_cap(cap);
0x597A	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x597E	0xF012EC5F  	CALL        _set_cap, 0
;main.c,1059 :: 		set_sw(SW);
0x5982	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x5986	0xF017ECAC  	CALL        _set_sw, 0
;main.c,1060 :: 		}
L_end_load_settings:
0x598A	0x0012      	RETURN      0
; end of _load_settings
_Dec2Bcd:
;__Lib_Conversions.c,353 :: 		
;__Lib_Conversions.c,354 :: 		
0x598C	0x0103      	MOVLB       3
0x598E	0x6B10      	CLRF        Dec2Bcd_tmp_L0, 1
;__Lib_Conversions.c,356 :: 		
0x5990	0x510F      	MOVF        FARG_Dec2Bcd_decnum, 0, 1
0x5992	0x0809      	SUBLW       9
0x5994	0xE21D      	BC          L_Dec2Bcd78
;__Lib_Conversions.c,357 :: 		
0x5996	0x0E0A      	MOVLW       10
0x5998	0x6E04      	MOVWF       R4 
0x599A	0xF000C30F  	MOVFF       FARG_Dec2Bcd_decnum, R0
0x599E	0xF023EC37  	CALL        _Div_8X8_U, 0
0x59A2	0xF310C000  	MOVFF       R0, Dec2Bcd_tmp_L0
;__Lib_Conversions.c,358 :: 		
0x59A6	0xF310C000  	MOVFF       R0, Dec2Bcd_tmp_L0
0x59AA	0x3710      	RLCF        Dec2Bcd_tmp_L0, 1, 1
0x59AC	0x9110      	BCF         Dec2Bcd_tmp_L0, 0, 1
0x59AE	0x3710      	RLCF        Dec2Bcd_tmp_L0, 1, 1
0x59B0	0x9110      	BCF         Dec2Bcd_tmp_L0, 0, 1
0x59B2	0x3710      	RLCF        Dec2Bcd_tmp_L0, 1, 1
0x59B4	0x9110      	BCF         Dec2Bcd_tmp_L0, 0, 1
0x59B6	0x3710      	RLCF        Dec2Bcd_tmp_L0, 1, 1
0x59B8	0x9110      	BCF         Dec2Bcd_tmp_L0, 0, 1
;__Lib_Conversions.c,359 :: 		
0x59BA	0x0E0A      	MOVLW       10
0x59BC	0x6E04      	MOVWF       R4 
0x59BE	0xF000C30F  	MOVFF       FARG_Dec2Bcd_decnum, R0
0x59C2	0xF023EC37  	CALL        _Div_8X8_U, 0
0x59C6	0xF000C008  	MOVFF       R8, R0
0x59CA	0x5000      	MOVF        R0, 0 
0x59CC	0x1310      	IORWF       Dec2Bcd_tmp_L0, 1, 1
;__Lib_Conversions.c,360 :: 		
0x59CE	0xD002      	BRA         L_Dec2Bcd79
L_Dec2Bcd78:
;__Lib_Conversions.c,361 :: 		
0x59D0	0xF310C30F  	MOVFF       FARG_Dec2Bcd_decnum, Dec2Bcd_tmp_L0
L_Dec2Bcd79:
;__Lib_Conversions.c,362 :: 		
0x59D4	0xF000C310  	MOVFF       Dec2Bcd_tmp_L0, R0
;__Lib_Conversions.c,363 :: 		
L_end_Dec2Bcd:
0x59D8	0x0012      	RETURN      0
; end of _Dec2Bcd
_button_proc:
;main.c,254 :: 		void button_proc(void)
;main.c,256 :: 		if (Button( & PORTB, 0, 50, 0) | Soft_tune)
0x59DA	0x0E81      	MOVLW       PORTB
0x59DC	0x0103      	MOVLB       3
0x59DE	0x6F5F      	MOVWF       FARG_Button_port, 1
0x59E0	0x0E0F      	MOVLW       hi_addr(PORTB)
0x59E2	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x59E4	0x6B61      	CLRF        FARG_Button_pin, 1
0x59E6	0x0E32      	MOVLW       50
0x59E8	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x59EA	0x6B63      	CLRF        FARG_Button_active_state, 1
0x59EC	0xF00AEC41  	CALL        _Button, 0
0x59F0	0x0100      	MOVLB       0
0x59F2	0x51C9      	MOVF        _Soft_tune, 0, 1
0x59F4	0x1200      	IORWF       R0, 1 
0x59F6	0xE060      	BZ          L_button_proc218
;main.c,258 :: 		dysp_on();
0x59F8	0xF010EC21  	CALL        _dysp_on, 0
;main.c,259 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x59FC	0xF000C0C8  	MOVFF       _Dysp_delay, R0
0x5A00	0xF00EEC63  	CALL        _byte2double, 0
0x5A04	0xF004C0C4  	MOVFF       _dysp_cnt_mult, R4
0x5A08	0xF005C0C5  	MOVFF       _dysp_cnt_mult+1, R5
0x5A0C	0xF006C0C6  	MOVFF       _dysp_cnt_mult+2, R6
0x5A10	0xF007C0C7  	MOVFF       _dysp_cnt_mult+3, R7
0x5A14	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x5A18	0xF006EC9E  	CALL        _double2int, 0
0x5A1C	0xF0DDC000  	MOVFF       R0, _dysp_cnt
0x5A20	0xF0DEC001  	MOVFF       R1, _dysp_cnt+1
;main.c,260 :: 		Delay_ms(250);
0x5A24	0x0E06      	MOVLW       6
0x5A26	0x6E0B      	MOVWF       R11, 0
0x5A28	0x0E13      	MOVLW       19
0x5A2A	0x6E0C      	MOVWF       R12, 0
0x5A2C	0x0EAD      	MOVLW       173
0x5A2E	0x6E0D      	MOVWF       R13, 0
L_button_proc219:
0x5A30	0x2E0D      	DECFSZ      R13, 1, 0
0x5A32	0xD7FE      	BRA         L_button_proc219
0x5A34	0x2E0C      	DECFSZ      R12, 1, 0
0x5A36	0xD7FC      	BRA         L_button_proc219
0x5A38	0x2E0B      	DECFSZ      R11, 1, 0
0x5A3A	0xD7FA      	BRA         L_button_proc219
0x5A3C	0x0000      	NOP
0x5A3E	0x0000      	NOP
;main.c,261 :: 		asm CLRWDT;
0x5A40	0x0004      	CLRWDT
;main.c,262 :: 		if (Soft_tune == 0 & PORTB.B0 == 1) { // short press button
0x5A42	0x0100      	MOVLB       0
0x5A44	0x51C9      	MOVF        _Soft_tune, 0, 1
0x5A46	0x0A00      	XORLW       0
0x5A48	0x0E01      	MOVLW       1
0x5A4A	0xA4D8      	BTFSS       STATUS, 2 
0x5A4C	0x0E00      	MOVLW       0
0x5A4E	0x6E01      	MOVWF       R1 
0x5A50	0xB081      	BTFSC       PORTB, 0 
0x5A52	0xD002      	BRA         L__button_proc618
0x5A54	0x90D8      	BCF         STATUS, 0 
0x5A56	0xD001      	BRA         L__button_proc619
L__button_proc618:
0x5A58	0x80D8      	BSF         STATUS, 0 
L__button_proc619:
0x5A5A	0x6A00      	CLRF        R0 
0x5A5C	0xB0D8      	BTFSC       STATUS, 0 
0x5A5E	0x2A00      	INCF        R0, 1 
0x5A60	0x5001      	MOVF        R1, 0 
0x5A62	0x1600      	ANDWF       R0, 1 
0x5A64	0xE004      	BZ          L_button_proc220
;main.c,263 :: 		show_reset();
0x5A66	0xF01AECDD  	CALL        _show_reset, 0
;main.c,264 :: 		bypas = 0;
0x5A6A	0x6A67      	CLRF        _bypas 
;main.c,265 :: 		}
0x5A6C	0xD025      	BRA         L_button_proc221
L_button_proc220:
;main.c,269 :: 		n_Tx = 0; // TX request
0x5A6E	0x9C89      	BCF         LATA6_bit, BitPos(LATA6_bit+0) 
;main.c,270 :: 		Delay_ms(250); //
0x5A70	0x0E06      	MOVLW       6
0x5A72	0x6E0B      	MOVWF       R11, 0
0x5A74	0x0E13      	MOVLW       19
0x5A76	0x6E0C      	MOVWF       R12, 0
0x5A78	0x0EAD      	MOVLW       173
0x5A7A	0x6E0D      	MOVWF       R13, 0
L_button_proc222:
0x5A7C	0x2E0D      	DECFSZ      R13, 1, 0
0x5A7E	0xD7FE      	BRA         L_button_proc222
0x5A80	0x2E0C      	DECFSZ      R12, 1, 0
0x5A82	0xD7FC      	BRA         L_button_proc222
0x5A84	0x2E0B      	DECFSZ      R11, 1, 0
0x5A86	0xD7FA      	BRA         L_button_proc222
0x5A88	0x0000      	NOP
0x5A8A	0x0000      	NOP
;main.c,271 :: 		btn_push();		// tutaj rozpoczęcie procedury strojenia
0x5A8C	0xF025EC72  	CALL        _btn_push, 0
;main.c,272 :: 		bypas = 0;
0x5A90	0x6A67      	CLRF        _bypas 
;main.c,273 :: 		while (Button( & PORTB, 0, 50, 0))
L_button_proc223:
0x5A92	0x0E81      	MOVLW       PORTB
0x5A94	0x0103      	MOVLB       3
0x5A96	0x6F5F      	MOVWF       FARG_Button_port, 1
0x5A98	0x0E0F      	MOVLW       hi_addr(PORTB)
0x5A9A	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x5A9C	0x6B61      	CLRF        FARG_Button_pin, 1
0x5A9E	0x0E32      	MOVLW       50
0x5AA0	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x5AA2	0x6B63      	CLRF        FARG_Button_active_state, 1
0x5AA4	0xF00AEC41  	CALL        _Button, 0
0x5AA8	0x5200      	MOVF        R0, 1 
0x5AAA	0xE004      	BZ          L_button_proc224
;main.c,275 :: 		lcd_pwr();
0x5AAC	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,276 :: 		asm CLRWDT;
0x5AB0	0x0004      	CLRWDT
;main.c,277 :: 		}
0x5AB2	0xD7EF      	BRA         L_button_proc223
L_button_proc224:
;main.c,278 :: 		Soft_tune = 0;
0x5AB4	0x0100      	MOVLB       0
0x5AB6	0x6BC9      	CLRF        _Soft_tune, 1
;main.c,279 :: 		}
L_button_proc221:
;main.c,281 :: 		}
L_button_proc218:
;main.c,283 :: 		if (Button( & PORTB, 2, 50, 0)) { // BYP button
0x5AB8	0x0E81      	MOVLW       PORTB
0x5ABA	0x0103      	MOVLB       3
0x5ABC	0x6F5F      	MOVWF       FARG_Button_port, 1
0x5ABE	0x0E0F      	MOVLW       hi_addr(PORTB)
0x5AC0	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x5AC2	0x0E02      	MOVLW       2
0x5AC4	0x6F61      	MOVWF       FARG_Button_pin, 1
0x5AC6	0x0E32      	MOVLW       50
0x5AC8	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x5ACA	0x6B63      	CLRF        FARG_Button_active_state, 1
0x5ACC	0xF00AEC41  	CALL        _Button, 0
0x5AD0	0x5200      	MOVF        R0, 1 
0x5AD2	0xB4D8      	BTFSC       STATUS, 2 
0x5AD4	0xD0F0      	BRA         L_button_proc225
;main.c,284 :: 		dysp_on();
0x5AD6	0xF010EC21  	CALL        _dysp_on, 0
;main.c,285 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x5ADA	0xF000C0C8  	MOVFF       _Dysp_delay, R0
0x5ADE	0xF00EEC63  	CALL        _byte2double, 0
0x5AE2	0xF004C0C4  	MOVFF       _dysp_cnt_mult, R4
0x5AE6	0xF005C0C5  	MOVFF       _dysp_cnt_mult+1, R5
0x5AEA	0xF006C0C6  	MOVFF       _dysp_cnt_mult+2, R6
0x5AEE	0xF007C0C7  	MOVFF       _dysp_cnt_mult+3, R7
0x5AF2	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x5AF6	0xF006EC9E  	CALL        _double2int, 0
0x5AFA	0xF0DDC000  	MOVFF       R0, _dysp_cnt
0x5AFE	0xF0DEC001  	MOVFF       R1, _dysp_cnt+1
;main.c,286 :: 		asm CLRWDT;
0x5B02	0x0004      	CLRWDT
;main.c,287 :: 		if (bypas == 0) {
0x5B04	0x5067      	MOVF        _bypas, 0 
0x5B06	0x0A00      	XORLW       0
0x5B08	0xE123      	BNZ         L_button_proc226
;main.c,288 :: 		bypas = 1;
0x5B0A	0x0E01      	MOVLW       1
0x5B0C	0x6E67      	MOVWF       _bypas 
;main.c,289 :: 		cap_mem = cap;
0x5B0E	0xF1D6C25D  	MOVFF       main_cap, _cap_mem
;main.c,290 :: 		ind_mem = ind;
0x5B12	0xF1DBC275  	MOVFF       main_ind, _ind_mem
;main.c,291 :: 		SW_mem = SW;
0x5B16	0xF1DFC273  	MOVFF       main_SW, _SW_mem
;main.c,292 :: 		cap = 0;
0x5B1A	0x6B5D      	CLRF        main_cap, 1
;main.c,293 :: 		ind = 0;
0x5B1C	0x6B75      	CLRF        main_ind, 1
;main.c,294 :: 		SW = 1;
0x5B1E	0x0E01      	MOVLW       1
0x5B20	0x6F73      	MOVWF       main_SW, 1
;main.c,295 :: 		set_ind(ind);
0x5B22	0x0103      	MOVLB       3
0x5B24	0x6B41      	CLRF        FARG_set_ind_Ind, 1
0x5B26	0xF017EC39  	CALL        _set_ind, 0
;main.c,296 :: 		set_cap(cap);
0x5B2A	0xF341C25D  	MOVFF       main_cap, FARG_set_cap_Cap
0x5B2E	0xF012EC5F  	CALL        _set_cap, 0
;main.c,297 :: 		set_SW(SW);
0x5B32	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x5B36	0xF017ECAC  	CALL        _set_sw, 0
;main.c,298 :: 		if (Loss_mode == 0)
0x5B3A	0x0102      	MOVLB       2
0x5B3C	0x5174      	MOVF        _Loss_mode, 0, 1
0x5B3E	0x0A00      	XORLW       0
0x5B40	0xE102      	BNZ         L_button_proc227
;main.c,299 :: 		lcd_ind();
0x5B42	0xF008EC10  	CALL        _lcd_ind, 0
L_button_proc227:
;main.c,300 :: 		Auto_mem = Auto;
0x5B46	0xF1DEC0C3  	MOVFF       _Auto, _Auto_mem
;main.c,301 :: 		Auto = 0;
0x5B4A	0x0100      	MOVLB       0
0x5B4C	0x6BC3      	CLRF        _Auto, 1
;main.c,302 :: 		} else {
0x5B4E	0xD01B      	BRA         L_button_proc228
L_button_proc226:
;main.c,303 :: 		bypas = 0;
0x5B50	0x6A67      	CLRF        _bypas 
;main.c,304 :: 		cap = cap_mem;
0x5B52	0xF25DC1D6  	MOVFF       _cap_mem, main_cap
;main.c,305 :: 		ind = ind_mem;
0x5B56	0xF275C1DB  	MOVFF       _ind_mem, main_ind
;main.c,306 :: 		SW = SW_mem;
0x5B5A	0xF273C1DF  	MOVFF       _SW_mem, main_SW
;main.c,307 :: 		set_cap(cap);
0x5B5E	0xF341C1D6  	MOVFF       _cap_mem, FARG_set_cap_Cap
0x5B62	0xF012EC5F  	CALL        _set_cap, 0
;main.c,308 :: 		set_ind(ind);
0x5B66	0xF341C275  	MOVFF       main_ind, FARG_set_ind_Ind
0x5B6A	0xF017EC39  	CALL        _set_ind, 0
;main.c,309 :: 		set_SW(SW);
0x5B6E	0xF339C273  	MOVFF       main_SW, FARG_set_sw_SW
0x5B72	0xF017ECAC  	CALL        _set_sw, 0
;main.c,310 :: 		if (Loss_mode == 0)
0x5B76	0x0102      	MOVLB       2
0x5B78	0x5174      	MOVF        _Loss_mode, 0, 1
0x5B7A	0x0A00      	XORLW       0
0x5B7C	0xE102      	BNZ         L_button_proc229
;main.c,311 :: 		lcd_ind();
0x5B7E	0xF008EC10  	CALL        _lcd_ind, 0
L_button_proc229:
;main.c,312 :: 		Auto = Auto_mem;
0x5B82	0xF0C3C1DE  	MOVFF       _Auto_mem, _Auto
;main.c,313 :: 		}
L_button_proc228:
;main.c,314 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x5B86	0x0102      	MOVLB       2
0x5B88	0x51D7      	MOVF        _type, 0, 1
0x5B8A	0x0A04      	XORLW       4
0x5B8C	0x0E01      	MOVLW       1
0x5B8E	0xA4D8      	BTFSS       STATUS, 2 
0x5B90	0x0E00      	MOVLW       0
0x5B92	0x6E01      	MOVWF       R1 
0x5B94	0x51D7      	MOVF        _type, 0, 1
0x5B96	0x0A05      	XORLW       5
0x5B98	0x0E01      	MOVLW       1
0x5B9A	0xA4D8      	BTFSS       STATUS, 2 
0x5B9C	0x0E00      	MOVLW       0
0x5B9E	0x6E00      	MOVWF       R0 
0x5BA0	0x5001      	MOVF        R1, 0 
0x5BA2	0x1200      	IORWF       R0, 1 
0x5BA4	0xE039      	BZ          L_button_proc230
;main.c,315 :: 		if (Auto & !Bypas)
0x5BA6	0x5267      	MOVF        _bypas, 1 
0x5BA8	0x0E01      	MOVLW       1
0x5BAA	0xA4D8      	BTFSS       STATUS, 2 
0x5BAC	0x0E00      	MOVLW       0
0x5BAE	0x6E00      	MOVWF       R0 
0x5BB0	0x0100      	MOVLB       0
0x5BB2	0x51C3      	MOVF        _Auto, 0, 1
0x5BB4	0x1600      	ANDWF       R0, 1 
0x5BB6	0xE00D      	BZ          L_button_proc231
;main.c,316 :: 		led_wr_str(0, 16 + 8 * 12, ".", 1);
0x5BB8	0x0103      	MOVLB       3
0x5BBA	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5BBC	0x0E70      	MOVLW       112
0x5BBE	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5BC0	0x0EDC      	MOVLW       ?lstr10_main
0x5BC2	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5BC4	0x0E01      	MOVLW       hi_addr(?lstr10_main)
0x5BC6	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5BC8	0x0E01      	MOVLW       1
0x5BCA	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5BCC	0xF007EC7F  	CALL        _led_wr_str, 0
0x5BD0	0xD022      	BRA         L_button_proc232
L_button_proc231:
;main.c,317 :: 		else if (!Auto & Bypas)
0x5BD2	0x0100      	MOVLB       0
0x5BD4	0x53C3      	MOVF        _Auto, 1, 1
0x5BD6	0x0E01      	MOVLW       1
0x5BD8	0xA4D8      	BTFSS       STATUS, 2 
0x5BDA	0x0E00      	MOVLW       0
0x5BDC	0x6E00      	MOVWF       R0 
0x5BDE	0x5067      	MOVF        _bypas, 0 
0x5BE0	0x1600      	ANDWF       R0, 1 
0x5BE2	0xE00D      	BZ          L_button_proc233
;main.c,318 :: 		led_wr_str(0, 16 + 8 * 12, "_", 1);
0x5BE4	0x0103      	MOVLB       3
0x5BE6	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5BE8	0x0E70      	MOVLW       112
0x5BEA	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5BEC	0x0ED4      	MOVLW       ?lstr11_main
0x5BEE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5BF0	0x0E01      	MOVLW       hi_addr(?lstr11_main)
0x5BF2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5BF4	0x0E01      	MOVLW       1
0x5BF6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5BF8	0xF007EC7F  	CALL        _led_wr_str, 0
0x5BFC	0xD00C      	BRA         L_button_proc234
L_button_proc233:
;main.c,320 :: 		led_wr_str(0, 16 + 8 * 12, " ", 1);
0x5BFE	0x0103      	MOVLB       3
0x5C00	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5C02	0x0E70      	MOVLW       112
0x5C04	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5C06	0x0ECA      	MOVLW       ?lstr12_main
0x5C08	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5C0A	0x0E01      	MOVLW       hi_addr(?lstr12_main)
0x5C0C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5C0E	0x0E01      	MOVLW       1
0x5C10	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5C12	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc234:
L_button_proc232:
;main.c,321 :: 		} else if (type != 0) { //  1602 LCD  or 128*32 OLED
0x5C16	0xD03C      	BRA         L_button_proc235
L_button_proc230:
0x5C18	0x0102      	MOVLB       2
0x5C1A	0x51D7      	MOVF        _type, 0, 1
0x5C1C	0x0A00      	XORLW       0
0x5C1E	0xE038      	BZ          L_button_proc236
;main.c,322 :: 		if (Auto & !Bypas)
0x5C20	0x5267      	MOVF        _bypas, 1 
0x5C22	0x0E01      	MOVLW       1
0x5C24	0xA4D8      	BTFSS       STATUS, 2 
0x5C26	0x0E00      	MOVLW       0
0x5C28	0x6E00      	MOVWF       R0 
0x5C2A	0x0100      	MOVLB       0
0x5C2C	0x51C3      	MOVF        _Auto, 0, 1
0x5C2E	0x1600      	ANDWF       R0, 1 
0x5C30	0xE00D      	BZ          L_button_proc237
;main.c,323 :: 		led_wr_str(0, 8, ".", 1);
0x5C32	0x0103      	MOVLB       3
0x5C34	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5C36	0x0E08      	MOVLW       8
0x5C38	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5C3A	0x0EC8      	MOVLW       ?lstr13_main
0x5C3C	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5C3E	0x0E01      	MOVLW       hi_addr(?lstr13_main)
0x5C40	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5C42	0x0E01      	MOVLW       1
0x5C44	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5C46	0xF007EC7F  	CALL        _led_wr_str, 0
0x5C4A	0xD022      	BRA         L_button_proc238
L_button_proc237:
;main.c,324 :: 		else if (!Auto & Bypas)
0x5C4C	0x0100      	MOVLB       0
0x5C4E	0x53C3      	MOVF        _Auto, 1, 1
0x5C50	0x0E01      	MOVLW       1
0x5C52	0xA4D8      	BTFSS       STATUS, 2 
0x5C54	0x0E00      	MOVLW       0
0x5C56	0x6E00      	MOVWF       R0 
0x5C58	0x5067      	MOVF        _bypas, 0 
0x5C5A	0x1600      	ANDWF       R0, 1 
0x5C5C	0xE00D      	BZ          L_button_proc239
;main.c,325 :: 		led_wr_str(0, 8, "_", 1);
0x5C5E	0x0103      	MOVLB       3
0x5C60	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5C62	0x0E08      	MOVLW       8
0x5C64	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5C66	0x0EC6      	MOVLW       ?lstr14_main
0x5C68	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5C6A	0x0E01      	MOVLW       hi_addr(?lstr14_main)
0x5C6C	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5C6E	0x0E01      	MOVLW       1
0x5C70	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5C72	0xF007EC7F  	CALL        _led_wr_str, 0
0x5C76	0xD00C      	BRA         L_button_proc240
L_button_proc239:
;main.c,327 :: 		led_wr_str(0, 8, " ", 1);
0x5C78	0x0103      	MOVLB       3
0x5C7A	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5C7C	0x0E08      	MOVLW       8
0x5C7E	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5C80	0x0ECC      	MOVLW       ?lstr15_main
0x5C82	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5C84	0x0E01      	MOVLW       hi_addr(?lstr15_main)
0x5C86	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5C88	0x0E01      	MOVLW       1
0x5C8A	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5C8C	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc240:
L_button_proc238:
;main.c,328 :: 		}
L_button_proc236:
L_button_proc235:
;main.c,329 :: 		asm CLRWDT;
0x5C90	0x0004      	CLRWDT
;main.c,330 :: 		while (Button( & PORTB, 2, 50, 0)) {
L_button_proc241:
0x5C92	0x0E81      	MOVLW       PORTB
0x5C94	0x0103      	MOVLB       3
0x5C96	0x6F5F      	MOVWF       FARG_Button_port, 1
0x5C98	0x0E0F      	MOVLW       hi_addr(PORTB)
0x5C9A	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x5C9C	0x0E02      	MOVLW       2
0x5C9E	0x6F61      	MOVWF       FARG_Button_pin, 1
0x5CA0	0x0E32      	MOVLW       50
0x5CA2	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x5CA4	0x6B63      	CLRF        FARG_Button_active_state, 1
0x5CA6	0xF00AEC41  	CALL        _Button, 0
0x5CAA	0x5200      	MOVF        R0, 1 
0x5CAC	0xE004      	BZ          L_button_proc242
;main.c,331 :: 		lcd_pwr();
0x5CAE	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,332 :: 		asm CLRWDT;
0x5CB2	0x0004      	CLRWDT
;main.c,333 :: 		}
0x5CB4	0xD7EE      	BRA         L_button_proc241
L_button_proc242:
;main.c,334 :: 		}
L_button_proc225:
;main.c,336 :: 		if (Button( & PORTB, 1, 50, 0) & Bypas == 0) { // Auto button
0x5CB6	0x0E81      	MOVLW       PORTB
0x5CB8	0x0103      	MOVLB       3
0x5CBA	0x6F5F      	MOVWF       FARG_Button_port, 1
0x5CBC	0x0E0F      	MOVLW       hi_addr(PORTB)
0x5CBE	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x5CC0	0x0E01      	MOVLW       1
0x5CC2	0x6F61      	MOVWF       FARG_Button_pin, 1
0x5CC4	0x0E32      	MOVLW       50
0x5CC6	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x5CC8	0x6B63      	CLRF        FARG_Button_active_state, 1
0x5CCA	0xF00AEC41  	CALL        _Button, 0
0x5CCE	0x5067      	MOVF        _bypas, 0 
0x5CD0	0x0A00      	XORLW       0
0x5CD2	0x0E01      	MOVLW       1
0x5CD4	0xA4D8      	BTFSS       STATUS, 2 
0x5CD6	0x0E00      	MOVLW       0
0x5CD8	0x6E01      	MOVWF       R1 
0x5CDA	0x5001      	MOVF        R1, 0 
0x5CDC	0x1600      	ANDWF       R0, 1 
0x5CDE	0xB4D8      	BTFSC       STATUS, 2 
0x5CE0	0xD0BE      	BRA         L_button_proc243
;main.c,337 :: 		dysp_on();
0x5CE2	0xF010EC21  	CALL        _dysp_on, 0
;main.c,338 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x5CE6	0xF000C0C8  	MOVFF       _Dysp_delay, R0
0x5CEA	0xF00EEC63  	CALL        _byte2double, 0
0x5CEE	0xF004C0C4  	MOVFF       _dysp_cnt_mult, R4
0x5CF2	0xF005C0C5  	MOVFF       _dysp_cnt_mult+1, R5
0x5CF6	0xF006C0C6  	MOVFF       _dysp_cnt_mult+2, R6
0x5CFA	0xF007C0C7  	MOVFF       _dysp_cnt_mult+3, R7
0x5CFE	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x5D02	0xF006EC9E  	CALL        _double2int, 0
0x5D06	0xF0DDC000  	MOVFF       R0, _dysp_cnt
0x5D0A	0xF0DEC001  	MOVFF       R1, _dysp_cnt+1
;main.c,339 :: 		asm CLRWDT;
0x5D0E	0x0004      	CLRWDT
;main.c,340 :: 		if (Auto == 0)
0x5D10	0x0100      	MOVLB       0
0x5D12	0x51C3      	MOVF        _Auto, 0, 1
0x5D14	0x0A00      	XORLW       0
0x5D16	0xE103      	BNZ         L_button_proc244
;main.c,341 :: 		Auto = 1;
0x5D18	0x0E01      	MOVLW       1
0x5D1A	0x6FC3      	MOVWF       _Auto, 1
0x5D1C	0xD001      	BRA         L_button_proc245
L_button_proc244:
;main.c,343 :: 		Auto = 0;
0x5D1E	0x6BC3      	CLRF        _Auto, 1
L_button_proc245:
;main.c,344 :: 		EEPROM_Write(2, Auto);
0x5D20	0x0E02      	MOVLW       2
0x5D22	0x0103      	MOVLB       3
0x5D24	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x5D26	0xF33AC0C3  	MOVFF       _Auto, FARG_EEPROM_Write_data_
0x5D2A	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,345 :: 		if (type == 4 | type == 5) { // 128*64 OLED
0x5D2E	0x0102      	MOVLB       2
0x5D30	0x51D7      	MOVF        _type, 0, 1
0x5D32	0x0A04      	XORLW       4
0x5D34	0x0E01      	MOVLW       1
0x5D36	0xA4D8      	BTFSS       STATUS, 2 
0x5D38	0x0E00      	MOVLW       0
0x5D3A	0x6E01      	MOVWF       R1 
0x5D3C	0x51D7      	MOVF        _type, 0, 1
0x5D3E	0x0A05      	XORLW       5
0x5D40	0x0E01      	MOVLW       1
0x5D42	0xA4D8      	BTFSS       STATUS, 2 
0x5D44	0x0E00      	MOVLW       0
0x5D46	0x6E00      	MOVWF       R0 
0x5D48	0x5001      	MOVF        R1, 0 
0x5D4A	0x1200      	IORWF       R0, 1 
0x5D4C	0xE039      	BZ          L_button_proc246
;main.c,346 :: 		if (Auto & !Bypas)
0x5D4E	0x5267      	MOVF        _bypas, 1 
0x5D50	0x0E01      	MOVLW       1
0x5D52	0xA4D8      	BTFSS       STATUS, 2 
0x5D54	0x0E00      	MOVLW       0
0x5D56	0x6E00      	MOVWF       R0 
0x5D58	0x0100      	MOVLB       0
0x5D5A	0x51C3      	MOVF        _Auto, 0, 1
0x5D5C	0x1600      	ANDWF       R0, 1 
0x5D5E	0xE00D      	BZ          L_button_proc247
;main.c,347 :: 		led_wr_str(0, 16 + 8 * 12, ".", 1);
0x5D60	0x0103      	MOVLB       3
0x5D62	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5D64	0x0E70      	MOVLW       112
0x5D66	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5D68	0x0ED2      	MOVLW       ?lstr16_main
0x5D6A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5D6C	0x0E01      	MOVLW       hi_addr(?lstr16_main)
0x5D6E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5D70	0x0E01      	MOVLW       1
0x5D72	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5D74	0xF007EC7F  	CALL        _led_wr_str, 0
0x5D78	0xD022      	BRA         L_button_proc248
L_button_proc247:
;main.c,348 :: 		else if (!Auto & Bypas)
0x5D7A	0x0100      	MOVLB       0
0x5D7C	0x53C3      	MOVF        _Auto, 1, 1
0x5D7E	0x0E01      	MOVLW       1
0x5D80	0xA4D8      	BTFSS       STATUS, 2 
0x5D82	0x0E00      	MOVLW       0
0x5D84	0x6E00      	MOVWF       R0 
0x5D86	0x5067      	MOVF        _bypas, 0 
0x5D88	0x1600      	ANDWF       R0, 1 
0x5D8A	0xE00D      	BZ          L_button_proc249
;main.c,349 :: 		led_wr_str(0, 16 + 8 * 12, "_", 1);
0x5D8C	0x0103      	MOVLB       3
0x5D8E	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5D90	0x0E70      	MOVLW       112
0x5D92	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5D94	0x0ED0      	MOVLW       ?lstr17_main
0x5D96	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5D98	0x0E01      	MOVLW       hi_addr(?lstr17_main)
0x5D9A	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5D9C	0x0E01      	MOVLW       1
0x5D9E	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5DA0	0xF007EC7F  	CALL        _led_wr_str, 0
0x5DA4	0xD00C      	BRA         L_button_proc250
L_button_proc249:
;main.c,351 :: 		led_wr_str(0, 16 + 8 * 12, " ", 1);
0x5DA6	0x0103      	MOVLB       3
0x5DA8	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5DAA	0x0E70      	MOVLW       112
0x5DAC	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5DAE	0x0ECE      	MOVLW       ?lstr18_main
0x5DB0	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5DB2	0x0E01      	MOVLW       hi_addr(?lstr18_main)
0x5DB4	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5DB6	0x0E01      	MOVLW       1
0x5DB8	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5DBA	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc250:
L_button_proc248:
;main.c,352 :: 		} else if (type != 0) { //  1602 LCD  or 128*32 OLED
0x5DBE	0xD03C      	BRA         L_button_proc251
L_button_proc246:
0x5DC0	0x0102      	MOVLB       2
0x5DC2	0x51D7      	MOVF        _type, 0, 1
0x5DC4	0x0A00      	XORLW       0
0x5DC6	0xE038      	BZ          L_button_proc252
;main.c,353 :: 		if (Auto & !Bypas)
0x5DC8	0x5267      	MOVF        _bypas, 1 
0x5DCA	0x0E01      	MOVLW       1
0x5DCC	0xA4D8      	BTFSS       STATUS, 2 
0x5DCE	0x0E00      	MOVLW       0
0x5DD0	0x6E00      	MOVWF       R0 
0x5DD2	0x0100      	MOVLB       0
0x5DD4	0x51C3      	MOVF        _Auto, 0, 1
0x5DD6	0x1600      	ANDWF       R0, 1 
0x5DD8	0xE00D      	BZ          L_button_proc253
;main.c,354 :: 		led_wr_str(0, 8, ".", 1);
0x5DDA	0x0103      	MOVLB       3
0x5DDC	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5DDE	0x0E08      	MOVLW       8
0x5DE0	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5DE2	0x0EE0      	MOVLW       ?lstr19_main
0x5DE4	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5DE6	0x0E01      	MOVLW       hi_addr(?lstr19_main)
0x5DE8	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5DEA	0x0E01      	MOVLW       1
0x5DEC	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5DEE	0xF007EC7F  	CALL        _led_wr_str, 0
0x5DF2	0xD022      	BRA         L_button_proc254
L_button_proc253:
;main.c,355 :: 		else if (!Auto & Bypas)
0x5DF4	0x0100      	MOVLB       0
0x5DF6	0x53C3      	MOVF        _Auto, 1, 1
0x5DF8	0x0E01      	MOVLW       1
0x5DFA	0xA4D8      	BTFSS       STATUS, 2 
0x5DFC	0x0E00      	MOVLW       0
0x5DFE	0x6E00      	MOVWF       R0 
0x5E00	0x5067      	MOVF        _bypas, 0 
0x5E02	0x1600      	ANDWF       R0, 1 
0x5E04	0xE00D      	BZ          L_button_proc255
;main.c,356 :: 		led_wr_str(0, 8, "_", 1);
0x5E06	0x0103      	MOVLB       3
0x5E08	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5E0A	0x0E08      	MOVLW       8
0x5E0C	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5E0E	0x0E30      	MOVLW       ?lstr20_main
0x5E10	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5E12	0x0E02      	MOVLW       hi_addr(?lstr20_main)
0x5E14	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5E16	0x0E01      	MOVLW       1
0x5E18	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5E1A	0xF007EC7F  	CALL        _led_wr_str, 0
0x5E1E	0xD00C      	BRA         L_button_proc256
L_button_proc255:
;main.c,358 :: 		led_wr_str(0, 8, " ", 1);
0x5E20	0x0103      	MOVLB       3
0x5E22	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x5E24	0x0E08      	MOVLW       8
0x5E26	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5E28	0x0E2E      	MOVLW       ?lstr21_main
0x5E2A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5E2C	0x0E02      	MOVLW       hi_addr(?lstr21_main)
0x5E2E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5E30	0x0E01      	MOVLW       1
0x5E32	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5E34	0xF007EC7F  	CALL        _led_wr_str, 0
L_button_proc256:
L_button_proc254:
;main.c,359 :: 		}
L_button_proc252:
L_button_proc251:
;main.c,360 :: 		asm CLRWDT;
0x5E38	0x0004      	CLRWDT
;main.c,361 :: 		while (Button( & PORTB, 1, 50, 0)) {
L_button_proc257:
0x5E3A	0x0E81      	MOVLW       PORTB
0x5E3C	0x0103      	MOVLB       3
0x5E3E	0x6F5F      	MOVWF       FARG_Button_port, 1
0x5E40	0x0E0F      	MOVLW       hi_addr(PORTB)
0x5E42	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x5E44	0x0E01      	MOVLW       1
0x5E46	0x6F61      	MOVWF       FARG_Button_pin, 1
0x5E48	0x0E32      	MOVLW       50
0x5E4A	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x5E4C	0x6B63      	CLRF        FARG_Button_active_state, 1
0x5E4E	0xF00AEC41  	CALL        _Button, 0
0x5E52	0x5200      	MOVF        R0, 1 
0x5E54	0xE004      	BZ          L_button_proc258
;main.c,362 :: 		lcd_pwr();
0x5E56	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,363 :: 		asm CLRWDT;
0x5E5A	0x0004      	CLRWDT
;main.c,364 :: 		}
0x5E5C	0xD7EE      	BRA         L_button_proc257
L_button_proc258:
;main.c,365 :: 		}
L_button_proc243:
;main.c,366 :: 		return;
;main.c,367 :: 		}
L_end_button_proc:
0x5E5E	0x0012      	RETURN      0
; end of _button_proc
_led_init:
;oled_control.c,30 :: 		void led_init (void) {
;oled_control.c,31 :: 		shift_line = EEPROM_read(7);
0x5E60	0x0E07      	MOVLW       7
0x5E62	0x0103      	MOVLB       3
0x5E64	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5E66	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5E6A	0xF2CAC000  	MOVFF       R0, oled_control_shift_line
;oled_control.c,32 :: 		oled_shift = EEPROM_read(8);
0x5E6E	0x0E08      	MOVLW       8
0x5E70	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x5E72	0xF023EC88  	CALL        _EEPROM_Read, 0
0x5E76	0xF2CBC000  	MOVFF       R0, oled_control_oled_shift
;oled_control.c,33 :: 		if(led_type>1) oled_init();   //    OLED
0x5E7A	0x0102      	MOVLB       2
0x5E7C	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x5E7E	0x0801      	SUBLW       1
0x5E80	0xE203      	BC          L_led_init6
0x5E82	0xF021EC8A  	CALL        _oled_init, 0
0x5E86	0xD063      	BRA         L_led_init7
L_led_init6:
;oled_control.c,34 :: 		else if(led_type==1) {     //       1602 LCD display init
0x5E88	0x51BC      	MOVF        oled_control_led_type, 0, 1
0x5E8A	0x0A01      	XORLW       1
0x5E8C	0xE160      	BNZ         L_led_init8
;oled_control.c,35 :: 		LED = 1;
0x5E8E	0x0E01      	MOVLW       1
0x5E90	0x6FBE      	MOVWF       oled_control_LED, 1
;oled_control.c,36 :: 		RS = 0;  // Command
0x5E92	0x6BBF      	CLRF        oled_control_RS, 1
;oled_control.c,38 :: 		led_send(3);
0x5E94	0x0E03      	MOVLW       3
0x5E96	0x0103      	MOVLB       3
0x5E98	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5E9A	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,39 :: 		delay_ms(5);
0x5E9E	0x0E1A      	MOVLW       26
0x5EA0	0x6E0C      	MOVWF       R12, 0
0x5EA2	0x0EF8      	MOVLW       248
0x5EA4	0x6E0D      	MOVWF       R13, 0
L_led_init9:
0x5EA6	0x2E0D      	DECFSZ      R13, 1, 0
0x5EA8	0xD7FE      	BRA         L_led_init9
0x5EAA	0x2E0C      	DECFSZ      R12, 1, 0
0x5EAC	0xD7FC      	BRA         L_led_init9
0x5EAE	0x0000      	NOP
;oled_control.c,40 :: 		led_send(3);
0x5EB0	0x0E03      	MOVLW       3
0x5EB2	0x0103      	MOVLB       3
0x5EB4	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5EB6	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,41 :: 		delay_ms(1);
0x5EBA	0x0E06      	MOVLW       6
0x5EBC	0x6E0C      	MOVWF       R12, 0
0x5EBE	0x0E30      	MOVLW       48
0x5EC0	0x6E0D      	MOVWF       R13, 0
L_led_init10:
0x5EC2	0x2E0D      	DECFSZ      R13, 1, 0
0x5EC4	0xD7FE      	BRA         L_led_init10
0x5EC6	0x2E0C      	DECFSZ      R12, 1, 0
0x5EC8	0xD7FC      	BRA         L_led_init10
0x5ECA	0x0000      	NOP
;oled_control.c,42 :: 		led_send(3);
0x5ECC	0x0E03      	MOVLW       3
0x5ECE	0x0103      	MOVLB       3
0x5ED0	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5ED2	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,43 :: 		led_send(2);
0x5ED6	0x0E02      	MOVLW       2
0x5ED8	0x0103      	MOVLB       3
0x5EDA	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5EDC	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,45 :: 		led_send(2);
0x5EE0	0x0E02      	MOVLW       2
0x5EE2	0x0103      	MOVLB       3
0x5EE4	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5EE6	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,46 :: 		led_send(8); //
0x5EEA	0x0E08      	MOVLW       8
0x5EEC	0x0103      	MOVLB       3
0x5EEE	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5EF0	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,48 :: 		led_send(0);
0x5EF4	0x0103      	MOVLB       3
0x5EF6	0x6B70      	CLRF        FARG_led_send_nible, 1
0x5EF8	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,49 :: 		led_send(8);   // LCD OFF
0x5EFC	0x0E08      	MOVLW       8
0x5EFE	0x0103      	MOVLB       3
0x5F00	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5F02	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,51 :: 		led_send(0);
0x5F06	0x0103      	MOVLB       3
0x5F08	0x6B70      	CLRF        FARG_led_send_nible, 1
0x5F0A	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,52 :: 		led_send(1);   // LCD clear
0x5F0E	0x0E01      	MOVLW       1
0x5F10	0x0103      	MOVLB       3
0x5F12	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5F14	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,53 :: 		delay_ms(5);
0x5F18	0x0E1A      	MOVLW       26
0x5F1A	0x6E0C      	MOVWF       R12, 0
0x5F1C	0x0EF8      	MOVLW       248
0x5F1E	0x6E0D      	MOVWF       R13, 0
L_led_init11:
0x5F20	0x2E0D      	DECFSZ      R13, 1, 0
0x5F22	0xD7FE      	BRA         L_led_init11
0x5F24	0x2E0C      	DECFSZ      R12, 1, 0
0x5F26	0xD7FC      	BRA         L_led_init11
0x5F28	0x0000      	NOP
;oled_control.c,55 :: 		led_send(0);
0x5F2A	0x0103      	MOVLB       3
0x5F2C	0x6B70      	CLRF        FARG_led_send_nible, 1
0x5F2E	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,56 :: 		led_send(4 + 2);  // I/D, S
0x5F32	0x0E06      	MOVLW       6
0x5F34	0x0103      	MOVLB       3
0x5F36	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5F38	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,58 :: 		led_send(0);
0x5F3C	0x0103      	MOVLB       3
0x5F3E	0x6B70      	CLRF        FARG_led_send_nible, 1
0x5F40	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,59 :: 		led_send(8 + 4 + 0 + 0);  // LCD ON, Cursor, Blink Cursor
0x5F44	0x0E0C      	MOVLW       12
0x5F46	0x0103      	MOVLB       3
0x5F48	0x6F70      	MOVWF       FARG_led_send_nible, 1
0x5F4A	0xF003EC1F  	CALL        _led_send, 0
;oled_control.c,60 :: 		}
L_led_init8:
L_led_init7:
;oled_control.c,61 :: 		}
L_end_led_init:
0x5F4E	0x0012      	RETURN      0
; end of _led_init
_show_loss:
;main.c,1036 :: 		void show_loss(void) {
;main.c,1037 :: 		IntToStr(Fid_loss, work_str);
0x5F50	0xF366C2B9  	MOVFF       _Fid_loss, FARG_IntToStr_input
0x5F54	0x0E00      	MOVLW       0
0x5F56	0x0103      	MOVLB       3
0x5F58	0x6F67      	MOVWF       FARG_IntToStr_input+1, 1
0x5F5A	0x0EE7      	MOVLW       _work_str
0x5F5C	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x5F5E	0x0E02      	MOVLW       hi_addr(_work_str)
0x5F60	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x5F62	0xF007EC11  	CALL        _IntToStr, 0
;main.c,1038 :: 		if (Fid_loss >= 10)
0x5F66	0x0E0A      	MOVLW       10
0x5F68	0x0102      	MOVLB       2
0x5F6A	0x5DB9      	SUBWF       _Fid_loss, 0, 1
0x5F6C	0xE303      	BNC         L_show_loss459
;main.c,1039 :: 		work_str_2[0] = work_str[4];
0x5F6E	0xF2E0C2EB  	MOVFF       _work_str+4, _work_str_2
0x5F72	0xD002      	BRA         L_show_loss460
L_show_loss459:
;main.c,1041 :: 		work_str_2[0] = '0';
0x5F74	0x0E30      	MOVLW       48
0x5F76	0x6FE0      	MOVWF       _work_str_2, 1
L_show_loss460:
;main.c,1042 :: 		work_str_2[1] = '.';
0x5F78	0x0E2E      	MOVLW       46
0x5F7A	0x6FE1      	MOVWF       _work_str_2+1, 1
;main.c,1043 :: 		work_str_2[2] = work_str[5];
0x5F7C	0xF2E2C2EC  	MOVFF       _work_str+5, _work_str_2+2
;main.c,1044 :: 		if (type == 4 | type == 5)
0x5F80	0x51D7      	MOVF        _type, 0, 1
0x5F82	0x0A04      	XORLW       4
0x5F84	0x0E01      	MOVLW       1
0x5F86	0xA4D8      	BTFSS       STATUS, 2 
0x5F88	0x0E00      	MOVLW       0
0x5F8A	0x6E01      	MOVWF       R1 
0x5F8C	0x51D7      	MOVF        _type, 0, 1
0x5F8E	0x0A05      	XORLW       5
0x5F90	0x0E01      	MOVLW       1
0x5F92	0xA4D8      	BTFSS       STATUS, 2 
0x5F94	0x0E00      	MOVLW       0
0x5F96	0x6E00      	MOVWF       R0 
0x5F98	0x5001      	MOVF        R1, 0 
0x5F9A	0x1200      	IORWF       R0, 1 
0x5F9C	0xE00E      	BZ          L_show_loss461
;main.c,1045 :: 		led_wr_str(4, 6, work_str_2, 3); // 128*64
0x5F9E	0x0E04      	MOVLW       4
0x5FA0	0x0103      	MOVLB       3
0x5FA2	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x5FA4	0x0E06      	MOVLW       6
0x5FA6	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x5FA8	0x0EE0      	MOVLW       _work_str_2
0x5FAA	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5FAC	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x5FAE	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5FB0	0x0E03      	MOVLW       3
0x5FB2	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5FB4	0xF007EC7F  	CALL        _led_wr_str, 0
0x5FB8	0xD010      	BRA         L_show_loss462
L_show_loss461:
;main.c,1046 :: 		else if (type != 0)
0x5FBA	0x0102      	MOVLB       2
0x5FBC	0x51D7      	MOVF        _type, 0, 1
0x5FBE	0x0A00      	XORLW       0
0x5FC0	0xE00C      	BZ          L_show_loss463
;main.c,1047 :: 		led_wr_str(1, 0, work_str_2, 3); // 1602 | 128*32
0x5FC2	0x0E01      	MOVLW       1
0x5FC4	0x0103      	MOVLB       3
0x5FC6	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x5FC8	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x5FCA	0x0EE0      	MOVLW       _work_str_2
0x5FCC	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x5FCE	0x0E02      	MOVLW       hi_addr(_work_str_2)
0x5FD0	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x5FD2	0x0E03      	MOVLW       3
0x5FD4	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x5FD6	0xF007EC7F  	CALL        _led_wr_str, 0
L_show_loss463:
L_show_loss462:
;main.c,1048 :: 		return;
;main.c,1049 :: 		}
L_end_show_loss:
0x5FDA	0x0012      	RETURN      0
; end of _show_loss
_main:
0x5FDC	0xF033ECE0  	CALL        26560, 0
;main.c,41 :: 		void main() {
;main.c,43 :: 		if (RCON.B3 == 0)
0x5FE0	0xB6D0      	BTFSC       RCON, 3 
0x5FE2	0xD002      	BRA         L_main145
;main.c,44 :: 		Restart = 1;
0x5FE4	0x0E01      	MOVLW       1
0x5FE6	0x6E5D      	MOVWF       _Restart 
L_main145:
;main.c,45 :: 		pic_init();
0x5FE8	0xF027ECC7  	CALL        _pic_init, 0
;main.c,47 :: 		Delay_ms(300);
0x5FEC	0x0E07      	MOVLW       7
0x5FEE	0x6E0B      	MOVWF       R11, 0
0x5FF0	0x0E17      	MOVLW       23
0x5FF2	0x6E0C      	MOVWF       R12, 0
0x5FF4	0x0E6A      	MOVLW       106
0x5FF6	0x6E0D      	MOVWF       R13, 0
L_main146:
0x5FF8	0x2E0D      	DECFSZ      R13, 1, 0
0x5FFA	0xD7FE      	BRA         L_main146
0x5FFC	0x2E0C      	DECFSZ      R12, 1, 0
0x5FFE	0xD7FC      	BRA         L_main146
0x6000	0x2E0B      	DECFSZ      R11, 1, 0
0x6002	0xD7FA      	BRA         L_main146
0x6004	0x0000      	NOP
;main.c,48 :: 		asm CLRWDT;
0x6006	0x0004      	CLRWDT
;main.c,49 :: 		cells_init();
0x6008	0xF027ECE7  	CALL        _cells_init, 0
;main.c,50 :: 		Soft_I2C_Init();
0x600C	0xF027ECAE  	CALL        _Soft_I2C_Init, 0
;main.c,51 :: 		Soft_UART_Init(&PORTA, 7, 6, 19800, 0);
0x6010	0x0E80      	MOVLW       PORTA
0x6012	0x6F0F      	MOVWF       FARG_Soft_UART_Init_port, 1
0x6014	0x0E0F      	MOVLW       hi_addr(PORTA)
0x6016	0x6F10      	MOVWF       FARG_Soft_UART_Init_port+1, 1
0x6018	0x0E07      	MOVLW       7
0x601A	0x6F11      	MOVWF       FARG_Soft_UART_Init_rx_pin, 1
0x601C	0x0E06      	MOVLW       6
0x601E	0x6F12      	MOVWF       FARG_Soft_UART_Init_tx_pin, 1
0x6020	0x0E58      	MOVLW       88
0x6022	0x6F13      	MOVWF       FARG_Soft_UART_Init_baud_rate, 1
0x6024	0x0E4D      	MOVLW       77
0x6026	0x6F14      	MOVWF       FARG_Soft_UART_Init_baud_rate+1, 1
0x6028	0x0E00      	MOVLW       0
0x602A	0x6F15      	MOVWF       FARG_Soft_UART_Init_baud_rate+2, 1
0x602C	0x6F16      	MOVWF       FARG_Soft_UART_Init_baud_rate+3, 1
0x602E	0x6B17      	CLRF        FARG_Soft_UART_Init_inverted, 1
0x6030	0xF02AEC51  	CALL        _Soft_UART_Init, 0
;main.c,53 :: 		if (type == 0)
0x6034	0x0102      	MOVLB       2
0x6036	0x51D7      	MOVF        _type, 0, 1
0x6038	0x0A00      	XORLW       0
0x603A	0xE102      	BNZ         L_main147
;main.c,55 :: 		LATB.B6 = 1;
0x603C	0x8C8A      	BSF         LATB, 6 
;main.c,56 :: 		LATB.B7 = 1;
0x603E	0x8E8A      	BSF         LATB, 7 
;main.c,57 :: 		}
L_main147:
;main.c,58 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x6040	0xF000C0C8  	MOVFF       _Dysp_delay, R0
0x6044	0xF00EEC63  	CALL        _byte2double, 0
0x6048	0xF004C0C4  	MOVFF       _dysp_cnt_mult, R4
0x604C	0xF005C0C5  	MOVFF       _dysp_cnt_mult+1, R5
0x6050	0xF006C0C6  	MOVFF       _dysp_cnt_mult+2, R6
0x6054	0xF007C0C7  	MOVFF       _dysp_cnt_mult+3, R7
0x6058	0xF006EC0B  	CALL        _Mul_32x32_FP, 0
0x605C	0xF006EC9E  	CALL        _double2int, 0
0x6060	0xF0DDC000  	MOVFF       R0, _dysp_cnt
0x6064	0xF0DEC001  	MOVFF       R1, _dysp_cnt+1
;main.c,60 :: 		Delay_ms(300);
0x6068	0x0E07      	MOVLW       7
0x606A	0x6E0B      	MOVWF       R11, 0
0x606C	0x0E17      	MOVLW       23
0x606E	0x6E0C      	MOVWF       R12, 0
0x6070	0x0E6A      	MOVLW       106
0x6072	0x6E0D      	MOVWF       R13, 0
L_main148:
0x6074	0x2E0D      	DECFSZ      R13, 1, 0
0x6076	0xD7FE      	BRA         L_main148
0x6078	0x2E0C      	DECFSZ      R12, 1, 0
0x607A	0xD7FC      	BRA         L_main148
0x607C	0x2E0B      	DECFSZ      R11, 1, 0
0x607E	0xD7FA      	BRA         L_main148
0x6080	0x0000      	NOP
;main.c,61 :: 		asm CLRWDT;
0x6082	0x0004      	CLRWDT
;main.c,62 :: 		if (PORTB.B1 == 0 & PORTB.B2 == 0)
0x6084	0xB281      	BTFSC       PORTB, 1 
0x6086	0xD002      	BRA         L__main603
0x6088	0x8004      	BSF         R4, 0 
0x608A	0xD001      	BRA         L__main604
L__main603:
0x608C	0x9004      	BCF         R4, 0 
L__main604:
0x608E	0xB481      	BTFSC       PORTB, 2 
0x6090	0xD002      	BRA         L__main605
0x6092	0x80D8      	BSF         STATUS, 0 
0x6094	0xD001      	BRA         L__main606
L__main605:
0x6096	0x90D8      	BCF         STATUS, 0 
L__main606:
0x6098	0xA004      	BTFSS       R4, 0 
0x609A	0xD003      	BRA         L__main607
0x609C	0xE302      	BNC         L__main607
0x609E	0x8004      	BSF         R4, 0 
0x60A0	0xD001      	BRA         L__main608
L__main607:
0x60A2	0x9004      	BCF         R4, 0 
L__main608:
0x60A4	0xA004      	BTFSS       R4, 0 
0x60A6	0xD004      	BRA         L_main149
;main.c,64 :: 		Test = 1;
0x60A8	0x0E01      	MOVLW       1
0x60AA	0x6E5C      	MOVWF       _Test 
;main.c,65 :: 		Auto = 0;
0x60AC	0x0100      	MOVLB       0
0x60AE	0x6BC3      	CLRF        _Auto, 1
;main.c,66 :: 		}
L_main149:
;main.c,67 :: 		if (L_q == 5)
0x60B0	0x0102      	MOVLB       2
0x60B2	0x51B5      	MOVF        main_L_q, 0, 1
0x60B4	0x0A05      	XORLW       5
0x60B6	0xE103      	BNZ         L_main150
;main.c,68 :: 		L_mult = 1;
0x60B8	0x0E01      	MOVLW       1
0x60BA	0x6FB6      	MOVWF       main_L_mult, 1
0x60BC	0xD00B      	BRA         L_main151
L_main150:
;main.c,69 :: 		else if (L_q == 6)
0x60BE	0x51B5      	MOVF        main_L_q, 0, 1
0x60C0	0x0A06      	XORLW       6
0x60C2	0xE103      	BNZ         L_main152
;main.c,70 :: 		L_mult = 2;
0x60C4	0x0E02      	MOVLW       2
0x60C6	0x6FB6      	MOVWF       main_L_mult, 1
0x60C8	0xD005      	BRA         L_main153
L_main152:
;main.c,71 :: 		else if (L_q == 7)
0x60CA	0x51B5      	MOVF        main_L_q, 0, 1
0x60CC	0x0A07      	XORLW       7
0x60CE	0xE102      	BNZ         L_main154
;main.c,72 :: 		L_mult = 4;
0x60D0	0x0E04      	MOVLW       4
0x60D2	0x6FB6      	MOVWF       main_L_mult, 1
L_main154:
L_main153:
L_main151:
;main.c,73 :: 		if (C_q == 5)
0x60D4	0x51B4      	MOVF        main_C_q, 0, 1
0x60D6	0x0A05      	XORLW       5
0x60D8	0xE103      	BNZ         L_main155
;main.c,74 :: 		C_mult = 1;
0x60DA	0x0E01      	MOVLW       1
0x60DC	0x6FA7      	MOVWF       main_C_mult, 1
0x60DE	0xD00B      	BRA         L_main156
L_main155:
;main.c,75 :: 		else if (C_q == 6)
0x60E0	0x51B4      	MOVF        main_C_q, 0, 1
0x60E2	0x0A06      	XORLW       6
0x60E4	0xE103      	BNZ         L_main157
;main.c,76 :: 		C_mult = 2;
0x60E6	0x0E02      	MOVLW       2
0x60E8	0x6FA7      	MOVWF       main_C_mult, 1
0x60EA	0xD005      	BRA         L_main158
L_main157:
;main.c,77 :: 		else if (C_q == 7)
0x60EC	0x51B4      	MOVF        main_C_q, 0, 1
0x60EE	0x0A07      	XORLW       7
0x60F0	0xE102      	BNZ         L_main159
;main.c,78 :: 		C_mult = 4;
0x60F2	0x0E04      	MOVLW       4
0x60F4	0x6FA7      	MOVWF       main_C_mult, 1
L_main159:
L_main158:
L_main156:
;main.c,80 :: 		Delay_ms(300);
0x60F6	0x0E07      	MOVLW       7
0x60F8	0x6E0B      	MOVWF       R11, 0
0x60FA	0x0E17      	MOVLW       23
0x60FC	0x6E0C      	MOVWF       R12, 0
0x60FE	0x0E6A      	MOVLW       106
0x6100	0x6E0D      	MOVWF       R13, 0
L_main160:
0x6102	0x2E0D      	DECFSZ      R13, 1, 0
0x6104	0xD7FE      	BRA         L_main160
0x6106	0x2E0C      	DECFSZ      R12, 1, 0
0x6108	0xD7FC      	BRA         L_main160
0x610A	0x2E0B      	DECFSZ      R11, 1, 0
0x610C	0xD7FA      	BRA         L_main160
0x610E	0x0000      	NOP
;main.c,81 :: 		asm CLRWDT;
0x6110	0x0004      	CLRWDT
;main.c,82 :: 		led_init();
0x6112	0xDEA6      	RCALL       _led_init
;main.c,84 :: 		if (Button( & PORTB, 0, 100, 0))
0x6114	0x0E81      	MOVLW       PORTB
0x6116	0x0103      	MOVLB       3
0x6118	0x6F5F      	MOVWF       FARG_Button_port, 1
0x611A	0x0E0F      	MOVLW       hi_addr(PORTB)
0x611C	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x611E	0x6B61      	CLRF        FARG_Button_pin, 1
0x6120	0x0E64      	MOVLW       100
0x6122	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x6124	0x6B63      	CLRF        FARG_Button_active_state, 1
0x6126	0xF00AEC41  	CALL        _Button, 0
0x612A	0x5200      	MOVF        R0, 1 
0x612C	0xB4D8      	BTFSC       STATUS, 2 
0x612E	0xD0BC      	BRA         L_main161
;main.c,86 :: 		if (type == 4 | type == 5) {
0x6130	0x0102      	MOVLB       2
0x6132	0x51D7      	MOVF        _type, 0, 1
0x6134	0x0A04      	XORLW       4
0x6136	0x0E01      	MOVLW       1
0x6138	0xA4D8      	BTFSS       STATUS, 2 
0x613A	0x0E00      	MOVLW       0
0x613C	0x6E01      	MOVWF       R1 
0x613E	0x51D7      	MOVF        _type, 0, 1
0x6140	0x0A05      	XORLW       5
0x6142	0x0E01      	MOVLW       1
0x6144	0xA4D8      	BTFSS       STATUS, 2 
0x6146	0x0E00      	MOVLW       0
0x6148	0x6E00      	MOVWF       R0 
0x614A	0x5001      	MOVF        R1, 0 
0x614C	0x1200      	IORWF       R0, 1 
0x614E	0xE027      	BZ          L_main162
;main.c,87 :: 		led_wr_str(0, 6, "Fider Loss", 10); // 128*64
0x6150	0x0103      	MOVLB       3
0x6152	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x6154	0x0E06      	MOVLW       6
0x6156	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x6158	0x0E51      	MOVLW       ?lstr1_main
0x615A	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x615C	0x0E00      	MOVLW       hi_addr(?lstr1_main)
0x615E	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x6160	0x0E0A      	MOVLW       10
0x6162	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x6164	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,88 :: 		led_wr_str(2, 6, "input", 5);
0x6168	0x0E02      	MOVLW       2
0x616A	0x0103      	MOVLB       3
0x616C	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x616E	0x0E06      	MOVLW       6
0x6170	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x6172	0x0E48      	MOVLW       ?lstr2_main
0x6174	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x6176	0x0E00      	MOVLW       hi_addr(?lstr2_main)
0x6178	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x617A	0x0E05      	MOVLW       5
0x617C	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x617E	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,89 :: 		led_wr_str(4, 6 + 3 * 12, "dB", 2);
0x6182	0x0E04      	MOVLW       4
0x6184	0x0103      	MOVLB       3
0x6186	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x6188	0x0E2A      	MOVLW       42
0x618A	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x618C	0x0E29      	MOVLW       ?lstr3_main
0x618E	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x6190	0x0E00      	MOVLW       hi_addr(?lstr3_main)
0x6192	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x6194	0x0E02      	MOVLW       2
0x6196	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x6198	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,90 :: 		} else if (type != 0) {
0x619C	0xD01C      	BRA         L_main163
L_main162:
0x619E	0x0102      	MOVLB       2
0x61A0	0x51D7      	MOVF        _type, 0, 1
0x61A2	0x0A00      	XORLW       0
0x61A4	0xE018      	BZ          L_main164
;main.c,91 :: 		led_wr_str(0, 0, "Fider Loss input", 16); // 1602 | 128*32
0x61A6	0x0103      	MOVLB       3
0x61A8	0x6B66      	CLRF        FARG_led_wr_str_col, 1
0x61AA	0x6B67      	CLRF        FARG_led_wr_str_pos, 1
0x61AC	0x0E18      	MOVLW       ?lstr4_main
0x61AE	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x61B0	0x0E00      	MOVLW       hi_addr(?lstr4_main)
0x61B2	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x61B4	0x0E10      	MOVLW       16
0x61B6	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x61B8	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,92 :: 		led_wr_str(1, 3, "dB", 2);
0x61BC	0x0E01      	MOVLW       1
0x61BE	0x0103      	MOVLB       3
0x61C0	0x6F66      	MOVWF       FARG_led_wr_str_col, 1
0x61C2	0x0E03      	MOVLW       3
0x61C4	0x6F67      	MOVWF       FARG_led_wr_str_pos, 1
0x61C6	0x0E15      	MOVLW       ?lstr5_main
0x61C8	0x6F68      	MOVWF       FARG_led_wr_str_str, 1
0x61CA	0x0E00      	MOVLW       hi_addr(?lstr5_main)
0x61CC	0x6F69      	MOVWF       FARG_led_wr_str_str+1, 1
0x61CE	0x0E02      	MOVLW       2
0x61D0	0x6F6A      	MOVWF       FARG_led_wr_str_leng, 1
0x61D2	0xF007EC7F  	CALL        _led_wr_str, 0
;main.c,93 :: 		}
L_main164:
L_main163:
;main.c,94 :: 		Fid_loss = Bcd2Dec(EEPROM_Read(0x34));
0x61D6	0x0E34      	MOVLW       52
0x61D8	0x0103      	MOVLB       3
0x61DA	0x6F26      	MOVWF       FARG_EEPROM_Read_address, 1
0x61DC	0xF023EC88  	CALL        _EEPROM_Read, 0
0x61E0	0xF326C000  	MOVFF       R0, FARG_Bcd2Dec_bcdnum
0x61E4	0xF023ECA4  	CALL        _Bcd2Dec, 0
0x61E8	0xF2B9C000  	MOVFF       R0, _Fid_loss
;main.c,95 :: 		show_loss();
0x61EC	0xDEB1      	RCALL       _show_loss
;main.c,97 :: 		while (1) {
L_main165:
;main.c,98 :: 		if (Button( & PORTB, 2, 50, 0)) { // BYP button
0x61EE	0x0E81      	MOVLW       PORTB
0x61F0	0x0103      	MOVLB       3
0x61F2	0x6F5F      	MOVWF       FARG_Button_port, 1
0x61F4	0x0E0F      	MOVLW       hi_addr(PORTB)
0x61F6	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x61F8	0x0E02      	MOVLW       2
0x61FA	0x6F61      	MOVWF       FARG_Button_pin, 1
0x61FC	0x0E32      	MOVLW       50
0x61FE	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x6200	0x6B63      	CLRF        FARG_Button_active_state, 1
0x6202	0xF00AEC41  	CALL        _Button, 0
0x6206	0x5200      	MOVF        R0, 1 
0x6208	0xE020      	BZ          L_main167
;main.c,99 :: 		if (Fid_loss < 99) {
0x620A	0x0E63      	MOVLW       99
0x620C	0x0102      	MOVLB       2
0x620E	0x5DB9      	SUBWF       _Fid_loss, 0, 1
0x6210	0xE20C      	BC          L_main168
;main.c,100 :: 		Fid_loss++;
0x6212	0x2BB9      	INCF        _Fid_loss, 1, 1
;main.c,101 :: 		show_loss();
0x6214	0xDE9D      	RCALL       _show_loss
;main.c,102 :: 		EEPROM_Write(0x34, Dec2Bcd(Fid_loss));
0x6216	0xF30FC2B9  	MOVFF       _Fid_loss, FARG_Dec2Bcd_decnum
0x621A	0xF02CECC6  	CALL        _Dec2Bcd, 0
0x621E	0xF33AC000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x6222	0x0E34      	MOVLW       52
0x6224	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x6226	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,103 :: 		}
L_main168:
;main.c,104 :: 		while (Button( & PORTB, 2, 50, 0)) asm CLRWDT;
L_main169:
0x622A	0x0E81      	MOVLW       PORTB
0x622C	0x0103      	MOVLB       3
0x622E	0x6F5F      	MOVWF       FARG_Button_port, 1
0x6230	0x0E0F      	MOVLW       hi_addr(PORTB)
0x6232	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x6234	0x0E02      	MOVLW       2
0x6236	0x6F61      	MOVWF       FARG_Button_pin, 1
0x6238	0x0E32      	MOVLW       50
0x623A	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x623C	0x6B63      	CLRF        FARG_Button_active_state, 1
0x623E	0xF00AEC41  	CALL        _Button, 0
0x6242	0x5200      	MOVF        R0, 1 
0x6244	0xE002      	BZ          L_main170
0x6246	0x0004      	CLRWDT
0x6248	0xD7F0      	BRA         L_main169
L_main170:
;main.c,105 :: 		}
L_main167:
;main.c,107 :: 		if (Button( & PORTB, 1, 50, 0)) { // AUTO button
0x624A	0x0E81      	MOVLW       PORTB
0x624C	0x6F5F      	MOVWF       FARG_Button_port, 1
0x624E	0x0E0F      	MOVLW       hi_addr(PORTB)
0x6250	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x6252	0x0E01      	MOVLW       1
0x6254	0x6F61      	MOVWF       FARG_Button_pin, 1
0x6256	0x0E32      	MOVLW       50
0x6258	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x625A	0x6B63      	CLRF        FARG_Button_active_state, 1
0x625C	0xF00AEC41  	CALL        _Button, 0
0x6260	0x5200      	MOVF        R0, 1 
0x6262	0xE020      	BZ          L_main171
;main.c,108 :: 		if (Fid_loss > 0) {
0x6264	0x0102      	MOVLB       2
0x6266	0x51B9      	MOVF        _Fid_loss, 0, 1
0x6268	0x0800      	SUBLW       0
0x626A	0xE20C      	BC          L_main172
;main.c,109 :: 		Fid_loss--;
0x626C	0x07B9      	DECF        _Fid_loss, 1, 1
;main.c,110 :: 		show_loss();
0x626E	0xDE70      	RCALL       _show_loss
;main.c,111 :: 		EEPROM_Write(0x34, Dec2Bcd(Fid_loss));
0x6270	0xF30FC2B9  	MOVFF       _Fid_loss, FARG_Dec2Bcd_decnum
0x6274	0xF02CECC6  	CALL        _Dec2Bcd, 0
0x6278	0xF33AC000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x627C	0x0E34      	MOVLW       52
0x627E	0x6F39      	MOVWF       FARG_EEPROM_Write_address, 1
0x6280	0xF017EC8D  	CALL        _EEPROM_Write, 0
;main.c,112 :: 		}
L_main172:
;main.c,113 :: 		while (Button( & PORTB, 1, 50, 0)) asm CLRWDT;
L_main173:
0x6284	0x0E81      	MOVLW       PORTB
0x6286	0x0103      	MOVLB       3
0x6288	0x6F5F      	MOVWF       FARG_Button_port, 1
0x628A	0x0E0F      	MOVLW       hi_addr(PORTB)
0x628C	0x6F60      	MOVWF       FARG_Button_port+1, 1
0x628E	0x0E01      	MOVLW       1
0x6290	0x6F61      	MOVWF       FARG_Button_pin, 1
0x6292	0x0E32      	MOVLW       50
0x6294	0x6F62      	MOVWF       FARG_Button_time_ms, 1
0x6296	0x6B63      	CLRF        FARG_Button_active_state, 1
0x6298	0xF00AEC41  	CALL        _Button, 0
0x629C	0x5200      	MOVF        R0, 1 
0x629E	0xE002      	BZ          L_main174
0x62A0	0x0004      	CLRWDT
0x62A2	0xD7F0      	BRA         L_main173
L_main174:
;main.c,114 :: 		}
L_main171:
;main.c,115 :: 		asm CLRWDT;
0x62A4	0x0004      	CLRWDT
;main.c,116 :: 		}
0x62A6	0xD7A3      	BRA         L_main165
;main.c,118 :: 		} //  Fider loss input
L_main161:
;main.c,120 :: 		if (Test == 0) {
0x62A8	0x505C      	MOVF        _Test, 0 
0x62AA	0x0A00      	XORLW       0
0x62AC	0xE10C      	BNZ         L_main175
;main.c,129 :: 		read_i2c_inputs();
0x62AE	0xF02CEC39  	CALL        _read_i2c_inputs, 0
;main.c,130 :: 		load_settings();
0x62B2	0xF02CEC74  	CALL        _load_settings, 0
;main.c,131 :: 		if (Restart == 1)
0x62B6	0x505D      	MOVF        _Restart, 0 
0x62B8	0x0A01      	XORLW       1
0x62BA	0xE102      	BNZ         L_main176
;main.c,132 :: 		lcd_prep_short = 1;
0x62BC	0x0E01      	MOVLW       1
0x62BE	0x6E2C      	MOVWF       _lcd_prep_short 
L_main176:
;main.c,133 :: 		lcd_prep();
0x62C0	0xF023ECB9  	CALL        _lcd_prep, 0
;main.c,134 :: 		} else
0x62C4	0xD002      	BRA         L_main177
L_main175:
;main.c,135 :: 		Test_init();
0x62C6	0xF02BEC3F  	CALL        _Test_init, 0
L_main177:
;main.c,137 :: 		lcd_ind();
0x62CA	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,141 :: 		while (1)
L_main178:
;main.c,144 :: 		asm CLRWDT;
0x62CE	0x0004      	CLRWDT
;main.c,145 :: 		lcd_pwr();
0x62D0	0xF017ECCA  	CALL        _lcd_pwr, 0
;main.c,147 :: 		if (Test == 0)
0x62D4	0x505C      	MOVF        _Test, 0 
0x62D6	0x0A00      	XORLW       0
0x62D8	0xE103      	BNZ         L_main180
;main.c,149 :: 		button_proc();	// główna procedura
0x62DA	0xF02CECED  	CALL        _button_proc, 0
;main.c,150 :: 		}
0x62DE	0xD002      	BRA         L_main181
L_main180:
;main.c,153 :: 		button_proc_test();
0x62E0	0xF026EC42  	CALL        _button_proc_test, 0
;main.c,154 :: 		}
L_main181:
;main.c,157 :: 		if (dysp_cnt != 0)
0x62E4	0x0E00      	MOVLW       0
0x62E6	0x0100      	MOVLB       0
0x62E8	0x19DE      	XORWF       _dysp_cnt+1, 0, 1
0x62EA	0xE102      	BNZ         L__main609
0x62EC	0x0E00      	MOVLW       0
0x62EE	0x19DD      	XORWF       _dysp_cnt, 0, 1
L__main609:
0x62F0	0xE005      	BZ          L_main182
;main.c,158 :: 		dysp_cnt--;
0x62F2	0x0E01      	MOVLW       1
0x62F4	0x5FDD      	SUBWF       _dysp_cnt, 1, 1
0x62F6	0x0E00      	MOVLW       0
0x62F8	0x5BDE      	SUBWFB      _dysp_cnt+1, 1, 1
0x62FA	0xD011      	BRA         L_main183
L_main182:
;main.c,159 :: 		else if (Test == 0 & Dysp_delay != 0)
0x62FC	0x505C      	MOVF        _Test, 0 
0x62FE	0x0A00      	XORLW       0
0x6300	0x0E01      	MOVLW       1
0x6302	0xA4D8      	BTFSS       STATUS, 2 
0x6304	0x0E00      	MOVLW       0
0x6306	0x6E01      	MOVWF       R1 
0x6308	0x51C8      	MOVF        _Dysp_delay, 0, 1
0x630A	0x0A00      	XORLW       0
0x630C	0x0E00      	MOVLW       0
0x630E	0xA4D8      	BTFSS       STATUS, 2 
0x6310	0x0E01      	MOVLW       1
0x6312	0x6E00      	MOVWF       R0 
0x6314	0x5001      	MOVF        R1, 0 
0x6316	0x1600      	ANDWF       R0, 1 
0x6318	0xE002      	BZ          L_main184
;main.c,160 :: 		dysp_off();
0x631A	0xF02AEC39  	CALL        _dysp_off, 0
L_main184:
L_main183:
;main.c,162 :: 		offset = mem_offset;
0x631E	0xF300C272  	MOVFF       _mem_offset, main_offset_L0
;main.c,163 :: 		read_i2c_inputs();
0x6322	0xF02CEC39  	CALL        _read_i2c_inputs, 0
;main.c,165 :: 		if (offset != mem_offset) {
0x6326	0x0103      	MOVLB       3
0x6328	0x5100      	MOVF        main_offset_L0, 0, 1
0x632A	0x0102      	MOVLB       2
0x632C	0x1972      	XORWF       _mem_offset, 0, 1
0x632E	0xE004      	BZ          L_main185
;main.c,166 :: 		load_settings();
0x6330	0xF02CEC74  	CALL        _load_settings, 0
;main.c,167 :: 		lcd_ind();
0x6334	0xF008EC10  	CALL        _lcd_ind, 0
;main.c,168 :: 		}
L_main185:
;main.c,173 :: 		}
0x6338	0xD7CA      	BRA         L_main178
;main.c,174 :: 		}
L_end_main:
0x633A	0xD7FF      	BRA         $+0
; end of _main
0x67C0	0xF015EE10  	LFSR        1, 21
0x67C4	0x0EA4      	MOVLW       164
0x67C6	0x6E00      	MOVWF       R0 
0x67C8	0x0E03      	MOVLW       3
0x67CA	0x6E01      	MOVWF       R1 
0x67CC	0x0E3C      	MOVLW       60
0x67CE	0x6EF6      	MOVWF       TBLPTR 
0x67D0	0x0E63      	MOVLW       99
0x67D2	0x6EF7      	MOVWF       TBLPTRH 
0x67D4	0x0E00      	MOVLW       0
0x67D6	0x6EF8      	MOVWF       TBLPTRU 
0x67D8	0xF027ECDF  	CALL        20414, 0
0x67DC	0x0012      	RETURN      0
;main.c,0 :: ?ICS?lstr5_main
0x633C	0x4264 ;?ICS?lstr5_main+0
0x633E	0x00 ;?ICS?lstr5_main+2
; end of ?ICS?lstr5_main
;main.c,0 :: ?ICS?lstr4_main
0x633F	0x6946 ;?ICS?lstr4_main+0
0x6341	0x6564 ;?ICS?lstr4_main+2
0x6343	0x2072 ;?ICS?lstr4_main+4
0x6345	0x6F4C ;?ICS?lstr4_main+6
0x6347	0x7373 ;?ICS?lstr4_main+8
0x6349	0x6920 ;?ICS?lstr4_main+10
0x634B	0x706E ;?ICS?lstr4_main+12
0x634D	0x7475 ;?ICS?lstr4_main+14
0x634F	0x00 ;?ICS?lstr4_main+16
; end of ?ICS?lstr4_main
;main.c,0 :: ?ICS?lstr3_main
0x6350	0x4264 ;?ICS?lstr3_main+0
0x6352	0x00 ;?ICS?lstr3_main+2
; end of ?ICS?lstr3_main
;main.c,0 :: ?ICS_lcd_prep_short
0x6353	0x00 ;?ICS_lcd_prep_short+0
; end of ?ICS_lcd_prep_short
;main.c,0 :: ?ICS?lstr54_main
0x6354	0x4645 ;?ICS?lstr54_main+0
0x6356	0x3D46 ;?ICS?lstr54_main+2
0x6358	0x2020 ;?ICS?lstr54_main+4
0x635A	0x2530 ;?ICS?lstr54_main+6
0x635C	0x00 ;?ICS?lstr54_main+8
; end of ?ICS?lstr54_main
;main.c,0 :: ?ICS?lstr53_main
0x635D	0x4E41 ;?ICS?lstr53_main+0
0x635F	0x3D54 ;?ICS?lstr53_main+2
0x6361	0x2E30 ;?ICS?lstr53_main+4
0x6363	0x5730 ;?ICS?lstr53_main+6
0x6365	0x00 ;?ICS?lstr53_main+8
; end of ?ICS?lstr53_main
;main.c,0 :: ?ICS?lstr52_main
0x6366	0x4E41 ;?ICS?lstr52_main+0
0x6368	0x3D54 ;?ICS?lstr52_main+2
0x636A	0x2020 ;?ICS?lstr52_main+4
0x636C	0x5730 ;?ICS?lstr52_main+6
0x636E	0x00 ;?ICS?lstr52_main+8
; end of ?ICS?lstr52_main
;main.c,0 :: ?ICS?lstr2_main
0x636F	0x6E69 ;?ICS?lstr2_main+0
0x6371	0x7570 ;?ICS?lstr2_main+2
0x6373	0x0074 ;?ICS?lstr2_main+4
; end of ?ICS?lstr2_main
;main.c,0 :: ?ICSmain_P_High
0x6375	0x00 ;?ICSmain_P_High+0
; end of ?ICSmain_P_High
;main.c,0 :: ?ICSmain_K_Mult
0x6376	0x20 ;?ICSmain_K_Mult+0
; end of ?ICSmain_K_Mult
;main.c,0 :: ?ICSmain_D_correction
0x6377	0x01 ;?ICSmain_D_correction+0
; end of ?ICSmain_D_correction
;main.c,0 :: ?ICS?lstr1_main
0x6378	0x6946 ;?ICS?lstr1_main+0
0x637A	0x6564 ;?ICS?lstr1_main+2
0x637C	0x2072 ;?ICS?lstr1_main+4
0x637E	0x6F4C ;?ICS?lstr1_main+6
0x6380	0x7373 ;?ICS?lstr1_main+8
0x6382	0x00 ;?ICS?lstr1_main+10
; end of ?ICS?lstr1_main
;main.c,0 :: ?ICS_Test
0x6383	0x00 ;?ICS_Test+0
; end of ?ICS_Test
;main.c,0 :: ?ICS_Restart
0x6384	0x00 ;?ICS_Restart+0
; end of ?ICS_Restart
;main.c,0 :: ?ICS?lstr55_main
0x6385	0x4E41 ;?ICS?lstr55_main+0
0x6387	0x3D54 ;?ICS?lstr55_main+2
0x6389	0x2020 ;?ICS?lstr55_main+4
0x638B	0x5730 ;?ICS?lstr55_main+6
0x638D	0x00 ;?ICS?lstr55_main+8
; end of ?ICS?lstr55_main
;main.c,0 :: ?ICS_bypas
0x638E	0x00 ;?ICS_bypas+0
; end of ?ICS_bypas
;main.c,0 :: ?ICS?lstr9_main
0x638F	0x0063 ;?ICS?lstr9_main+0
; end of ?ICS?lstr9_main
;main.c,0 :: ?ICS?lstr8_main
0x6391	0x0063 ;?ICS?lstr8_main+0
; end of ?ICS?lstr8_main
;main.c,0 :: ?ICS?lstr89_main
0x6393	0x4554 ;?ICS?lstr89_main+0
0x6395	0x5453 ;?ICS?lstr89_main+2
0x6397	0x4D20 ;?ICS?lstr89_main+4
0x6399	0x444F ;?ICS?lstr89_main+6
0x639B	0x0045 ;?ICS?lstr89_main+8
; end of ?ICS?lstr89_main
;main.c,0 :: ?ICS?lstr92_main
0x639D	0x2020 ;?ICS?lstr92_main+0
0x639F	0x2020 ;?ICS?lstr92_main+2
0x63A1	0x2020 ;?ICS?lstr92_main+4
0x63A3	0x2020 ;?ICS?lstr92_main+6
0x63A5	0x0020 ;?ICS?lstr92_main+8
; end of ?ICS?lstr92_main
;main.c,0 :: ?ICS?lstr91_main
0x63A7	0x2020 ;?ICS?lstr91_main+0
0x63A9	0x2020 ;?ICS?lstr91_main+2
0x63AB	0x2020 ;?ICS?lstr91_main+4
0x63AD	0x2020 ;?ICS?lstr91_main+6
0x63AF	0x0020 ;?ICS?lstr91_main+8
; end of ?ICS?lstr91_main
;main.c,0 :: ?ICS?lstr90_main
0x63B1	0x4554 ;?ICS?lstr90_main+0
0x63B3	0x5453 ;?ICS?lstr90_main+2
0x63B5	0x4D20 ;?ICS?lstr90_main+4
0x63B7	0x444F ;?ICS?lstr90_main+6
0x63B9	0x0045 ;?ICS?lstr90_main+8
; end of ?ICS?lstr90_main
;main.c,0 :: ?ICS?lstr7_main
0x63BB	0x006C ;?ICS?lstr7_main+0
; end of ?ICS?lstr7_main
;main.c,0 :: ?ICS?lstr58_main
0x63BD	0x4E41 ;?ICS?lstr58_main+0
0x63BF	0x203D ;?ICS?lstr58_main+2
0x63C1	0x3020 ;?ICS?lstr58_main+4
0x63C3	0x0057 ;?ICS?lstr58_main+6
; end of ?ICS?lstr58_main
;main.c,0 :: ?ICS?lstr57_main
0x63C5	0x4645 ;?ICS?lstr57_main+0
0x63C7	0x3D46 ;?ICS?lstr57_main+2
0x63C9	0x2020 ;?ICS?lstr57_main+4
0x63CB	0x2530 ;?ICS?lstr57_main+6
0x63CD	0x00 ;?ICS?lstr57_main+8
; end of ?ICS?lstr57_main
;main.c,0 :: ?ICS?lstr56_main
0x63CE	0x4E41 ;?ICS?lstr56_main+0
0x63D0	0x3D54 ;?ICS?lstr56_main+2
0x63D2	0x2E30 ;?ICS?lstr56_main+4
0x63D4	0x5730 ;?ICS?lstr56_main+6
0x63D6	0x00 ;?ICS?lstr56_main+8
; end of ?ICS?lstr56_main
;main.c,0 :: ?ICS?lstr59_main
0x63D7	0x4E41 ;?ICS?lstr59_main+0
0x63D9	0x303D ;?ICS?lstr59_main+2
0x63DB	0x302E ;?ICS?lstr59_main+4
0x63DD	0x0057 ;?ICS?lstr59_main+6
; end of ?ICS?lstr59_main
;main.c,0 :: ?ICS?lstr6_main
0x63DF	0x006C ;?ICS?lstr6_main+0
; end of ?ICS?lstr6_main
;main.c,0 :: ?ICS_L
0x63E1	0x01 ;?ICS_L+0
; end of ?ICS_L
;main.c,0 :: ?ICS?lstr60_main
0x63E2	0x4645 ;?ICS?lstr60_main+0
0x63E4	0x3D46 ;?ICS?lstr60_main+2
0x63E6	0x3020 ;?ICS?lstr60_main+4
0x63E8	0x0025 ;?ICS?lstr60_main+6
; end of ?ICS?lstr60_main
;main.c,0 :: ?ICS_Auto
0x63EA	0x00 ;?ICS_Auto+0
; end of ?ICS_Auto
;main.c,0 :: ?ICS_dysp_cnt_mult
0x63EB	0x3333 ;?ICS_dysp_cnt_mult+0
0x63ED	0x8013 ;?ICS_dysp_cnt_mult+2
; end of ?ICS_dysp_cnt_mult
;main.c,0 :: ?ICS_Dysp_delay
0x63EF	0x00 ;?ICS_Dysp_delay+0
; end of ?ICS_Dysp_delay
;main.c,0 :: ?ICS_Soft_tune
0x63F0	0x00 ;?ICS_Soft_tune+0
; end of ?ICS_Soft_tune
;main.c,0 :: ?ICS?lstr62_main
0x63F1	0x564F ;?ICS?lstr62_main+0
0x63F3	0x5245 ;?ICS?lstr62_main+2
0x63F5	0x4F4C ;?ICS?lstr62_main+4
0x63F7	0x4441 ;?ICS?lstr62_main+6
0x63F9	0x00 ;?ICS?lstr62_main+8
; end of ?ICS?lstr62_main
;main.c,0 :: ?ICS?lstr61_main
0x63FA	0x2020 ;?ICS?lstr61_main+0
0x63FC	0x2020 ;?ICS?lstr61_main+2
0x63FE	0x2020 ;?ICS?lstr61_main+4
0x6400	0x2020 ;?ICS?lstr61_main+6
0x6402	0x00 ;?ICS?lstr61_main+8
; end of ?ICS?lstr61_main
;main.c,0 :: ?ICSmain_Overload
0x6403	0x00 ;?ICSmain_Overload+0
; end of ?ICSmain_Overload
;main.c,0 :: ?ICS_dysp_cnt
0x6404	0x0000 ;?ICS_dysp_cnt+0
; end of ?ICS_dysp_cnt
;main.c,0 :: ?ICS?lstr87_main
0x6406	0x3D43 ;?ICS?lstr87_main+0
0x6408	0x00 ;?ICS?lstr87_main+2
; end of ?ICS?lstr87_main
;main.c,0 :: ?ICS?lstr86_main
0x6409	0x4670 ;?ICS?lstr86_main+0
0x640B	0x00 ;?ICS?lstr86_main+2
; end of ?ICS?lstr86_main
;main.c,0 :: ?ICS?lstr85_main
0x640C	0x3D43 ;?ICS?lstr85_main+0
0x640E	0x00 ;?ICS?lstr85_main+2
; end of ?ICS?lstr85_main
;main.c,0 :: ?ICS?lstr88_main
0x640F	0x0070 ;?ICS?lstr88_main+0
; end of ?ICS?lstr88_main
;main.c,0 :: ?ICS_Power
0x6411	0x0000 ;?ICS_Power+0
; end of ?ICS_Power
;main.c,0 :: ?ICS_but
0x6413	0x00 ;?ICS_but+0
; end of ?ICS_but
;main.c,0 :: ?ICS?lstr63_main
0x6414	0x2020 ;?ICS?lstr63_main+0
0x6416	0x2020 ;?ICS?lstr63_main+2
0x6418	0x2020 ;?ICS?lstr63_main+4
0x641A	0x2020 ;?ICS?lstr63_main+6
0x641C	0x00 ;?ICS?lstr63_main+8
; end of ?ICS?lstr63_main
;main.c,0 :: ?ICS?lstr74_main
0x641D	0x564F ;?ICS?lstr74_main+0
0x641F	0x5245 ;?ICS?lstr74_main+2
0x6421	0x4F4C ;?ICS?lstr74_main+4
0x6423	0x4441 ;?ICS?lstr74_main+6
0x6425	0x00 ;?ICS?lstr74_main+8
; end of ?ICS?lstr74_main
;main.c,0 :: ?ICS?lstr73_main
0x6426	0x2020 ;?ICS?lstr73_main+0
0x6428	0x2020 ;?ICS?lstr73_main+2
0x642A	0x2020 ;?ICS?lstr73_main+4
0x642C	0x2020 ;?ICS?lstr73_main+6
0x642E	0x00 ;?ICS?lstr73_main+8
; end of ?ICS?lstr73_main
;main.c,0 :: ?ICS?lstr72_main
0x642F	0x564F ;?ICS?lstr72_main+0
0x6431	0x5245 ;?ICS?lstr72_main+2
0x6433	0x4F4C ;?ICS?lstr72_main+4
0x6435	0x4441 ;?ICS?lstr72_main+6
0x6437	0x00 ;?ICS?lstr72_main+8
; end of ?ICS?lstr72_main
;main.c,0 :: ?ICS?lstr75_main
0x6438	0x2020 ;?ICS?lstr75_main+0
0x643A	0x2020 ;?ICS?lstr75_main+2
0x643C	0x2020 ;?ICS?lstr75_main+4
0x643E	0x2020 ;?ICS?lstr75_main+6
0x6440	0x00 ;?ICS?lstr75_main+8
; end of ?ICS?lstr75_main
;main.c,0 :: ?ICS?lstr51_main
0x6441	0x2E30 ;?ICS?lstr51_main+0
0x6443	0x3030 ;?ICS?lstr51_main+2
0x6445	0x00 ;?ICS?lstr51_main+4
; end of ?ICS?lstr51_main
;main.c,0 :: ?ICS?lstr50_main
0x6446	0x2E30 ;?ICS?lstr50_main+0
0x6448	0x3030 ;?ICS?lstr50_main+2
0x644A	0x00 ;?ICS?lstr50_main+4
; end of ?ICS?lstr50_main
;main.c,0 :: ?ICS?lstr76_main
0x644B	0x5753 ;?ICS?lstr76_main+0
0x644D	0x3D52 ;?ICS?lstr76_main+2
0x644F	0x2020 ;?ICS?lstr76_main+4
0x6451	0x2020 ;?ICS?lstr76_main+6
0x6453	0x00 ;?ICS?lstr76_main+8
; end of ?ICS?lstr76_main
;main.c,0 :: ?ICS?lstr71_main
0x6454	0x2020 ;?ICS?lstr71_main+0
0x6456	0x2020 ;?ICS?lstr71_main+2
0x6458	0x2020 ;?ICS?lstr71_main+4
0x645A	0x2020 ;?ICS?lstr71_main+6
0x645C	0x00 ;?ICS?lstr71_main+8
; end of ?ICS?lstr71_main
;main.c,0 :: ?ICS?lstr66_main
0x645D	0x564F ;?ICS?lstr66_main+0
0x645F	0x5245 ;?ICS?lstr66_main+2
0x6461	0x4F4C ;?ICS?lstr66_main+4
0x6463	0x4441 ;?ICS?lstr66_main+6
0x6465	0x00 ;?ICS?lstr66_main+8
; end of ?ICS?lstr66_main
;main.c,0 :: ?ICS?lstr65_main
0x6466	0x2020 ;?ICS?lstr65_main+0
0x6468	0x2020 ;?ICS?lstr65_main+2
0x646A	0x2020 ;?ICS?lstr65_main+4
0x646C	0x2020 ;?ICS?lstr65_main+6
0x646E	0x00 ;?ICS?lstr65_main+8
; end of ?ICS?lstr65_main
;main.c,0 :: ?ICS?lstr64_main
0x646F	0x564F ;?ICS?lstr64_main+0
0x6471	0x5245 ;?ICS?lstr64_main+2
0x6473	0x4F4C ;?ICS?lstr64_main+4
0x6475	0x4441 ;?ICS?lstr64_main+6
0x6477	0x00 ;?ICS?lstr64_main+8
; end of ?ICS?lstr64_main
;main.c,0 :: ?ICS?lstr67_main
0x6478	0x2020 ;?ICS?lstr67_main+0
0x647A	0x2020 ;?ICS?lstr67_main+2
0x647C	0x2020 ;?ICS?lstr67_main+4
0x647E	0x2020 ;?ICS?lstr67_main+6
0x6480	0x00 ;?ICS?lstr67_main+8
; end of ?ICS?lstr67_main
;main.c,0 :: ?ICS?lstr70_main
0x6481	0x564F ;?ICS?lstr70_main+0
0x6483	0x5245 ;?ICS?lstr70_main+2
0x6485	0x4F4C ;?ICS?lstr70_main+4
0x6487	0x4441 ;?ICS?lstr70_main+6
0x6489	0x00 ;?ICS?lstr70_main+8
; end of ?ICS?lstr70_main
;main.c,0 :: ?ICS?lstr69_main
0x648A	0x2020 ;?ICS?lstr69_main+0
0x648C	0x2020 ;?ICS?lstr69_main+2
0x648E	0x2020 ;?ICS?lstr69_main+4
0x6490	0x2020 ;?ICS?lstr69_main+6
0x6492	0x00 ;?ICS?lstr69_main+8
; end of ?ICS?lstr69_main
;main.c,0 :: ?ICS?lstr68_main
0x6493	0x5753 ;?ICS?lstr68_main+0
0x6495	0x3D52 ;?ICS?lstr68_main+2
0x6497	0x2020 ;?ICS?lstr68_main+4
0x6499	0x2020 ;?ICS?lstr68_main+6
0x649B	0x00 ;?ICS?lstr68_main+8
; end of ?ICS?lstr68_main
;main.c,0 :: ?ICS?lstr49_main
0x649C	0x002E ;?ICS?lstr49_main+0
; end of ?ICS?lstr49_main
;main.c,0 :: ?ICS?lstr48_main
0x649E	0x5753 ;?ICS?lstr48_main+0
0x64A0	0x3D52 ;?ICS?lstr48_main+2
0x64A2	0x2E30 ;?ICS?lstr48_main+4
0x64A4	0x3030 ;?ICS?lstr48_main+6
0x64A6	0x00 ;?ICS?lstr48_main+8
; end of ?ICS?lstr48_main
;main.c,0 :: ?ICS?lstr43_main
0x64A7	0x5746 ;?ICS?lstr43_main+0
0x64A9	0x7620 ;?ICS?lstr43_main+2
0x64AB	0x7265 ;?ICS?lstr43_main+4
0x64AD	0x3320 ;?ICS?lstr43_main+6
0x64AF	0x312E ;?ICS?lstr43_main+8
0x64B1	0x006D ;?ICS?lstr43_main+10
; end of ?ICS?lstr43_main
;main.c,0 :: ?ICS?lstr42_main
0x64B3	0x7962 ;?ICS?lstr42_main+0
0x64B5	0x4E20 ;?ICS?lstr42_main+2
0x64B7	0x4437 ;?ICS?lstr42_main+4
0x64B9	0x4344 ;?ICS?lstr42_main+6
0x64BB	0x00 ;?ICS?lstr42_main+8
; end of ?ICS?lstr42_main
;main.c,0 :: ?ICS?lstr41_main
0x64BC	0x5845 ;?ICS?lstr41_main+0
0x64BE	0x2054 ;?ICS?lstr41_main+2
0x64C0	0x6F62 ;?ICS?lstr41_main+4
0x64C2	0x7261 ;?ICS?lstr41_main+6
0x64C4	0x0064 ;?ICS?lstr41_main+8
; end of ?ICS?lstr41_main
;main.c,0 :: ?ICS?lstr44_main
0x64C6	0x2020 ;?ICS?lstr44_main+0
0x64C8	0x2020 ;?ICS?lstr44_main+2
0x64CA	0x2020 ;?ICS?lstr44_main+4
0x64CC	0x2020 ;?ICS?lstr44_main+6
0x64CE	0x00 ;?ICS?lstr44_main+8
; end of ?ICS?lstr44_main
;main.c,0 :: ?ICS?lstr47_main
0x64CF	0x5750 ;?ICS?lstr47_main+0
0x64D1	0x3D52 ;?ICS?lstr47_main+2
0x64D3	0x2E30 ;?ICS?lstr47_main+4
0x64D5	0x5730 ;?ICS?lstr47_main+6
0x64D7	0x00 ;?ICS?lstr47_main+8
; end of ?ICS?lstr47_main
;main.c,0 :: ?ICS?lstr46_main
0x64D8	0x5750 ;?ICS?lstr46_main+0
0x64DA	0x3D52 ;?ICS?lstr46_main+2
0x64DC	0x2020 ;?ICS?lstr46_main+4
0x64DE	0x5730 ;?ICS?lstr46_main+6
0x64E0	0x00 ;?ICS?lstr46_main+8
; end of ?ICS?lstr46_main
;main.c,0 :: ?ICS?lstr45_main
0x64E1	0x2020 ;?ICS?lstr45_main+0
0x64E3	0x2020 ;?ICS?lstr45_main+2
0x64E5	0x2020 ;?ICS?lstr45_main+4
0x64E7	0x2020 ;?ICS?lstr45_main+6
0x64E9	0x2020 ;?ICS?lstr45_main+8
0x64EB	0x00 ;?ICS?lstr45_main+10
; end of ?ICS?lstr45_main
;__Lib_ADC_A_D.c,0 :: ?ICS_vref_mask
0x64EC	0x30 ;?ICS_vref_mask+0
; end of ?ICS_vref_mask
;main.c,0 :: ?ICS?lstr14_main
0x64ED	0x005F ;?ICS?lstr14_main+0
; end of ?ICS?lstr14_main
;main.c,0 :: ?ICS?lstr13_main
0x64EF	0x002E ;?ICS?lstr13_main+0
; end of ?ICS?lstr13_main
;main.c,0 :: ?ICS?lstr12_main
0x64F1	0x0020 ;?ICS?lstr12_main+0
; end of ?ICS?lstr12_main
;main.c,0 :: ?ICS?lstr15_main
0x64F3	0x0020 ;?ICS?lstr15_main+0
; end of ?ICS?lstr15_main
;main.c,0 :: ?ICS?lstr18_main
0x64F5	0x0020 ;?ICS?lstr18_main+0
; end of ?ICS?lstr18_main
;main.c,0 :: ?ICS?lstr17_main
0x64F7	0x005F ;?ICS?lstr17_main+0
; end of ?ICS?lstr17_main
;main.c,0 :: ?ICS?lstr16_main
0x64F9	0x002E ;?ICS?lstr16_main+0
; end of ?ICS?lstr16_main
;main.c,0 :: ?ICS?lstr11_main
0x64FB	0x005F ;?ICS?lstr11_main+0
; end of ?ICS?lstr11_main
;main.c,0 :: ?ICS_cap_mem
0x64FD	0x00 ;?ICS_cap_mem+0
; end of ?ICS_cap_mem
;main.c,0 :: ?ICS?lstr94_main
0x64FE	0x006C ;?ICS?lstr94_main+0
; end of ?ICS?lstr94_main
;main.c,0 :: ?ICS?lstr93_main
0x6500	0x006C ;?ICS?lstr93_main+0
; end of ?ICS?lstr93_main
;main.c,0 :: ?ICS_ind_mem
0x6502	0x00 ;?ICS_ind_mem+0
; end of ?ICS_ind_mem
;main.c,0 :: ?ICS?lstr10_main
0x6503	0x002E ;?ICS?lstr10_main+0
; end of ?ICS?lstr10_main
;main.c,0 :: ?ICS_Auto_mem
0x6505	0x00 ;?ICS_Auto_mem+0
; end of ?ICS_Auto_mem
;main.c,0 :: ?ICS_SW_mem
0x6506	0x00 ;?ICS_SW_mem+0
; end of ?ICS_SW_mem
;main.c,0 :: ?ICS?lstr19_main
0x6507	0x002E ;?ICS?lstr19_main+0
; end of ?ICS?lstr19_main
;main.c,0 :: ?ICS?lstr36_main
0x6509	0x5750 ;?ICS?lstr36_main+0
0x650B	0x3D52 ;?ICS?lstr36_main+2
0x650D	0x2020 ;?ICS?lstr36_main+4
0x650F	0x5730 ;?ICS?lstr36_main+6
0x6511	0x00 ;?ICS?lstr36_main+8
; end of ?ICS?lstr36_main
;main.c,0 :: ?ICS?lstr35_main
0x6512	0x2020 ;?ICS?lstr35_main+0
0x6514	0x2020 ;?ICS?lstr35_main+2
0x6516	0x2020 ;?ICS?lstr35_main+4
0x6518	0x2020 ;?ICS?lstr35_main+6
0x651A	0x2020 ;?ICS?lstr35_main+8
0x651C	0x00 ;?ICS?lstr35_main+10
; end of ?ICS?lstr35_main
;main.c,0 :: ?ICS?lstr34_main
0x651D	0x2020 ;?ICS?lstr34_main+0
0x651F	0x2020 ;?ICS?lstr34_main+2
0x6521	0x2020 ;?ICS?lstr34_main+4
0x6523	0x2020 ;?ICS?lstr34_main+6
0x6525	0x00 ;?ICS?lstr34_main+8
; end of ?ICS?lstr34_main
;main.c,0 :: ?ICS?lstr37_main
0x6526	0x5750 ;?ICS?lstr37_main+0
0x6528	0x3D52 ;?ICS?lstr37_main+2
0x652A	0x2E30 ;?ICS?lstr37_main+4
0x652C	0x5730 ;?ICS?lstr37_main+6
0x652E	0x00 ;?ICS?lstr37_main+8
; end of ?ICS?lstr37_main
;main.c,0 :: ?ICS?lstr40_main
0x652F	0x5441 ;?ICS?lstr40_main+0
0x6531	0x2D55 ;?ICS?lstr40_main+2
0x6533	0x3031 ;?ICS?lstr40_main+4
0x6535	0x0030 ;?ICS?lstr40_main+6
; end of ?ICS?lstr40_main
;main.c,0 :: ?ICS?lstr39_main
0x6537	0x002E ;?ICS?lstr39_main+0
; end of ?ICS?lstr39_main
;main.c,0 :: ?ICS?lstr38_main
0x6539	0x5753 ;?ICS?lstr38_main+0
0x653B	0x3D52 ;?ICS?lstr38_main+2
0x653D	0x2E30 ;?ICS?lstr38_main+4
0x653F	0x3030 ;?ICS?lstr38_main+6
0x6541	0x00 ;?ICS?lstr38_main+8
; end of ?ICS?lstr38_main
;main.c,0 :: ?ICS?lstr33_main
0x6542	0x2020 ;?ICS?lstr33_main+0
0x6544	0x2020 ;?ICS?lstr33_main+2
0x6546	0x2020 ;?ICS?lstr33_main+4
0x6548	0x2020 ;?ICS?lstr33_main+6
0x654A	0x2020 ;?ICS?lstr33_main+8
0x654C	0x00 ;?ICS?lstr33_main+10
; end of ?ICS?lstr33_main
;main.c,0 :: ?ICS?lstr28_main
0x654D	0x5441 ;?ICS?lstr28_main+0
0x654F	0x2D55 ;?ICS?lstr28_main+2
0x6551	0x3031 ;?ICS?lstr28_main+4
0x6553	0x0030 ;?ICS?lstr28_main+6
; end of ?ICS?lstr28_main
;main.c,0 :: ?ICS?lstr21_main
0x6555	0x0020 ;?ICS?lstr21_main+0
; end of ?ICS?lstr21_main
;main.c,0 :: ?ICS?lstr20_main
0x6557	0x005F ;?ICS?lstr20_main+0
; end of ?ICS?lstr20_main
;main.c,0 :: ?ICS?lstr29_main
0x6559	0x5845 ;?ICS?lstr29_main+0
0x655B	0x2054 ;?ICS?lstr29_main+2
0x655D	0x6F62 ;?ICS?lstr29_main+4
0x655F	0x7261 ;?ICS?lstr29_main+6
0x6561	0x0064 ;?ICS?lstr29_main+8
; end of ?ICS?lstr29_main
;main.c,0 :: ?ICS?lstr32_main
0x6563	0x2020 ;?ICS?lstr32_main+0
0x6565	0x2020 ;?ICS?lstr32_main+2
0x6567	0x2020 ;?ICS?lstr32_main+4
0x6569	0x2020 ;?ICS?lstr32_main+6
0x656B	0x00 ;?ICS?lstr32_main+8
; end of ?ICS?lstr32_main
;main.c,0 :: ?ICS?lstr31_main
0x656C	0x5746 ;?ICS?lstr31_main+0
0x656E	0x7620 ;?ICS?lstr31_main+2
0x6570	0x7265 ;?ICS?lstr31_main+4
0x6572	0x3320 ;?ICS?lstr31_main+6
0x6574	0x312E ;?ICS?lstr31_main+8
0x6576	0x006D ;?ICS?lstr31_main+10
; end of ?ICS?lstr31_main
;main.c,0 :: ?ICS?lstr30_main
0x6578	0x7962 ;?ICS?lstr30_main+0
0x657A	0x4E20 ;?ICS?lstr30_main+2
0x657C	0x4437 ;?ICS?lstr30_main+4
0x657E	0x4344 ;?ICS?lstr30_main+6
0x6580	0x00 ;?ICS?lstr30_main+8
; end of ?ICS?lstr30_main
;main.c,0 :: ?ICS_band_160m
0x6581	0x01 ;?ICS_band_160m+0
; end of ?ICS_band_160m
;main.c,0 :: ?ICSmain_Loss_ind
0x6582	0x00 ;?ICSmain_Loss_ind+0
; end of ?ICSmain_Loss_ind
;main.c,0 :: ?ICSmain_L_invert
0x6583	0x00 ;?ICSmain_L_invert+0
; end of ?ICSmain_L_invert
;main.c,0 :: ?ICSmain_cap
0x6584	0x00 ;?ICSmain_cap+0
; end of ?ICSmain_cap
;main.c,0 :: ?ICS_SWR_fixed_old
0x6585	0x0000 ;?ICS_SWR_fixed_old+0
; end of ?ICS_SWR_fixed_old
;main.c,0 :: ?ICS?lstr23_main
0x6587	0x5753 ;?ICS?lstr23_main+0
0x6589	0x3D52 ;?ICS?lstr23_main+2
0x658B	0x2E30 ;?ICS?lstr23_main+4
0x658D	0x3030 ;?ICS?lstr23_main+6
0x658F	0x00 ;?ICS?lstr23_main+8
; end of ?ICS?lstr23_main
;main.c,0 :: ?ICS?lstr22_main
0x6590	0x4552 ;?ICS?lstr22_main+0
0x6592	0x4553 ;?ICS?lstr22_main+2
0x6594	0x2054 ;?ICS?lstr22_main+4
0x6596	0x2020 ;?ICS?lstr22_main+6
0x6598	0x00 ;?ICS?lstr22_main+8
; end of ?ICS?lstr22_main
;main.c,0 :: ?ICS_mem_offset
0x6599	0x00 ;?ICS_mem_offset+0
; end of ?ICS_mem_offset
;main.c,0 :: ?ICSmain_SW
0x659A	0x00 ;?ICSmain_SW+0
; end of ?ICSmain_SW
;main.c,0 :: ?ICS_Loss_mode
0x659B	0x00 ;?ICS_Loss_mode+0
; end of ?ICS_Loss_mode
;main.c,0 :: ?ICSmain_ind
0x659C	0x00 ;?ICSmain_ind+0
; end of ?ICSmain_ind
;main.c,0 :: ?ICS_rready
0x659D	0x00 ;?ICS_rready+0
; end of ?ICS_rready
;main.c,0 :: ?ICS?lstr25_main
0x659E	0x5753 ;?ICS?lstr25_main+0
0x65A0	0x3D52 ;?ICS?lstr25_main+2
0x65A2	0x2E30 ;?ICS?lstr25_main+4
0x65A4	0x3030 ;?ICS?lstr25_main+6
0x65A6	0x00 ;?ICS?lstr25_main+8
; end of ?ICS?lstr25_main
;main.c,0 :: ?ICS?lstr24_main
0x65A7	0x4552 ;?ICS?lstr24_main+0
0x65A9	0x4553 ;?ICS?lstr24_main+2
0x65AB	0x2054 ;?ICS?lstr24_main+4
0x65AD	0x2020 ;?ICS?lstr24_main+6
0x65AF	0x00 ;?ICS?lstr24_main+8
; end of ?ICS?lstr24_main
;main.c,0 :: ?ICS_SWR_old
0x65B0	0x2710 ;?ICS_SWR_old+0
; end of ?ICS_SWR_old
;main.c,0 :: ?ICS_p_cnt
0x65B2	0x00 ;?ICS_p_cnt+0
; end of ?ICS_p_cnt
;main.c,0 :: ?ICS_Power_old
0x65B3	0x2710 ;?ICS_Power_old+0
; end of ?ICS_Power_old
;main.c,0 :: ?ICS?lstr79_main
0x65B5	0x3D4C ;?ICS?lstr79_main+0
0x65B7	0x00 ;?ICS?lstr79_main+2
; end of ?ICS?lstr79_main
;main.c,0 :: ?ICS?lstr78_main
0x65B8	0x4875 ;?ICS?lstr78_main+0
0x65BA	0x00 ;?ICS?lstr78_main+2
; end of ?ICS?lstr78_main
;main.c,0 :: ?ICS?lstr77_main
0x65BB	0x3D4C ;?ICS?lstr77_main+0
0x65BD	0x00 ;?ICS?lstr77_main+2
; end of ?ICS?lstr77_main
;main.c,0 :: ?ICS?lstr84_main
0x65BE	0x4670 ;?ICS?lstr84_main+0
0x65C0	0x00 ;?ICS?lstr84_main+2
; end of ?ICS?lstr84_main
;main.c,0 :: ?ICS?lstr83_main
0x65C1	0x3D43 ;?ICS?lstr83_main+0
0x65C3	0x00 ;?ICS?lstr83_main+2
; end of ?ICS?lstr83_main
;main.c,0 :: ?ICS_C8_value
0x65C4	0x071C ;?ICS_C8_value+0
; end of ?ICS_C8_value
;main.c,0 :: ?ICS?lstr82_main
0x65C6	0x0075 ;?ICS?lstr82_main+0
; end of ?ICS?lstr82_main
;main.c,0 :: ?ICS?lstr81_main
0x65C8	0x3D4C ;?ICS?lstr81_main+0
0x65CA	0x00 ;?ICS?lstr81_main+2
; end of ?ICS?lstr81_main
;main.c,0 :: ?ICS?lstr80_main
0x65CB	0x4875 ;?ICS?lstr80_main+0
0x65CD	0x00 ;?ICS?lstr80_main+2
; end of ?ICS?lstr80_main
;main.c,0 :: ?ICSmain_C_mult
0x65CE	0x01 ;?ICSmain_C_mult+0
; end of ?ICSmain_C_mult
;main.c,0 :: ?ICSmain_step_cap
0x65CF	0x00 ;?ICSmain_step_cap+0
; end of ?ICSmain_step_cap
;main.c,0 :: ?ICS?lstr26_main
0x65D0	0x5554 ;?ICS?lstr26_main+0
0x65D2	0x454E ;?ICS?lstr26_main+2
0x65D4	0x00 ;?ICS?lstr26_main+4
; end of ?ICS?lstr26_main
;main.c,0 :: ?ICSmain_C_linear
0x65D5	0x00 ;?ICSmain_C_linear+0
; end of ?ICSmain_C_linear
;main.c,0 :: ?ICS?lstr27_main
0x65D6	0x5554 ;?ICS?lstr27_main+0
0x65D8	0x454E ;?ICS?lstr27_main+2
0x65DA	0x00 ;?ICS?lstr27_main+4
; end of ?ICS?lstr27_main
;main.c,0 :: ?ICSmain_C_q
0x65DB	0x07 ;?ICSmain_C_q+0
; end of ?ICSmain_C_q
;main.c,0 :: ?ICSmain_L_q
0x65DC	0x07 ;?ICSmain_L_q+0
; end of ?ICSmain_L_q
;main.c,0 :: ?ICSmain_L_mult
0x65DD	0x01 ;?ICSmain_L_mult+0
; end of ?ICSmain_L_mult
;main.c,0 :: ?ICSmain_step_ind
0x65DE	0x00 ;?ICSmain_step_ind+0
; end of ?ICSmain_step_ind
;main.c,0 :: ?ICSmain_L_linear
0x65DF	0x00 ;?ICSmain_L_linear+0
; end of ?ICSmain_L_linear
;oled_control.c,1 :: oled_control_font5x8
0x65E0	0x0000 ;oled_control_font5x8+0
0x65E2	0x0000 ;oled_control_font5x8+2
0x65E4	0x0000 ;oled_control_font5x8+4
0x65E6	0x5F00 ;oled_control_font5x8+6
0x65E8	0x0000 ;oled_control_font5x8+8
0x65EA	0x0700 ;oled_control_font5x8+10
0x65EC	0x0700 ;oled_control_font5x8+12
0x65EE	0x1400 ;oled_control_font5x8+14
0x65F0	0x147F ;oled_control_font5x8+16
0x65F2	0x147F ;oled_control_font5x8+18
0x65F4	0x2A24 ;oled_control_font5x8+20
0x65F6	0x2A7F ;oled_control_font5x8+22
0x65F8	0x2312 ;oled_control_font5x8+24
0x65FA	0x0813 ;oled_control_font5x8+26
0x65FC	0x6264 ;oled_control_font5x8+28
0x65FE	0x4936 ;oled_control_font5x8+30
0x6600	0x2255 ;oled_control_font5x8+32
0x6602	0x0050 ;oled_control_font5x8+34
0x6604	0x0305 ;oled_control_font5x8+36
0x6606	0x0000 ;oled_control_font5x8+38
0x6608	0x1C00 ;oled_control_font5x8+40
0x660A	0x4122 ;oled_control_font5x8+42
0x660C	0x0000 ;oled_control_font5x8+44
0x660E	0x2241 ;oled_control_font5x8+46
0x6610	0x001C ;oled_control_font5x8+48
0x6612	0x2A08 ;oled_control_font5x8+50
0x6614	0x2A1C ;oled_control_font5x8+52
0x6616	0x0808 ;oled_control_font5x8+54
0x6618	0x3E08 ;oled_control_font5x8+56
0x661A	0x0808 ;oled_control_font5x8+58
0x661C	0x5000 ;oled_control_font5x8+60
0x661E	0x0030 ;oled_control_font5x8+62
0x6620	0x0800 ;oled_control_font5x8+64
0x6622	0x0808 ;oled_control_font5x8+66
0x6624	0x0808 ;oled_control_font5x8+68
0x6626	0x3000 ;oled_control_font5x8+70
0x6628	0x0030 ;oled_control_font5x8+72
0x662A	0x2000 ;oled_control_font5x8+74
0x662C	0x0810 ;oled_control_font5x8+76
0x662E	0x0204 ;oled_control_font5x8+78
0x6630	0x513E ;oled_control_font5x8+80
0x6632	0x4549 ;oled_control_font5x8+82
0x6634	0x003E ;oled_control_font5x8+84
0x6636	0x7F42 ;oled_control_font5x8+86
0x6638	0x0040 ;oled_control_font5x8+88
0x663A	0x6142 ;oled_control_font5x8+90
0x663C	0x4951 ;oled_control_font5x8+92
0x663E	0x2146 ;oled_control_font5x8+94
0x6640	0x4541 ;oled_control_font5x8+96
0x6642	0x314B ;oled_control_font5x8+98
0x6644	0x1418 ;oled_control_font5x8+100
0x6646	0x7F12 ;oled_control_font5x8+102
0x6648	0x2710 ;oled_control_font5x8+104
0x664A	0x4545 ;oled_control_font5x8+106
0x664C	0x3945 ;oled_control_font5x8+108
0x664E	0x4A3C ;oled_control_font5x8+110
0x6650	0x4949 ;oled_control_font5x8+112
0x6652	0x0130 ;oled_control_font5x8+114
0x6654	0x0971 ;oled_control_font5x8+116
0x6656	0x0305 ;oled_control_font5x8+118
0x6658	0x4936 ;oled_control_font5x8+120
0x665A	0x4949 ;oled_control_font5x8+122
0x665C	0x0636 ;oled_control_font5x8+124
0x665E	0x4949 ;oled_control_font5x8+126
0x6660	0x1E29 ;oled_control_font5x8+128
0x6662	0x3600 ;oled_control_font5x8+130
0x6664	0x0036 ;oled_control_font5x8+132
0x6666	0x0000 ;oled_control_font5x8+134
0x6668	0x3656 ;oled_control_font5x8+136
0x666A	0x0000 ;oled_control_font5x8+138
0x666C	0x0800 ;oled_control_font5x8+140
0x666E	0x2214 ;oled_control_font5x8+142
0x6670	0x1441 ;oled_control_font5x8+144
0x6672	0x1414 ;oled_control_font5x8+146
0x6674	0x1414 ;oled_control_font5x8+148
0x6676	0x2241 ;oled_control_font5x8+150
0x6678	0x0814 ;oled_control_font5x8+152
0x667A	0x0200 ;oled_control_font5x8+154
0x667C	0x5101 ;oled_control_font5x8+156
0x667E	0x0609 ;oled_control_font5x8+158
0x6680	0x4932 ;oled_control_font5x8+160
0x6682	0x4179 ;oled_control_font5x8+162
0x6684	0x7E3E ;oled_control_font5x8+164
0x6686	0x1111 ;oled_control_font5x8+166
0x6688	0x7E11 ;oled_control_font5x8+168
0x668A	0x497F ;oled_control_font5x8+170
0x668C	0x4949 ;oled_control_font5x8+172
0x668E	0x3E36 ;oled_control_font5x8+174
0x6690	0x4141 ;oled_control_font5x8+176
0x6692	0x2241 ;oled_control_font5x8+178
0x6694	0x417F ;oled_control_font5x8+180
0x6696	0x2241 ;oled_control_font5x8+182
0x6698	0x7F1C ;oled_control_font5x8+184
0x669A	0x4949 ;oled_control_font5x8+186
0x669C	0x4149 ;oled_control_font5x8+188
0x669E	0x097F ;oled_control_font5x8+190
0x66A0	0x0109 ;oled_control_font5x8+192
0x66A2	0x3E01 ;oled_control_font5x8+194
0x66A4	0x4141 ;oled_control_font5x8+196
0x66A6	0x3251 ;oled_control_font5x8+198
0x66A8	0x087F ;oled_control_font5x8+200
0x66AA	0x0808 ;oled_control_font5x8+202
0x66AC	0x007F ;oled_control_font5x8+204
0x66AE	0x7F41 ;oled_control_font5x8+206
0x66B0	0x0041 ;oled_control_font5x8+208
0x66B2	0x4020 ;oled_control_font5x8+210
0x66B4	0x3F41 ;oled_control_font5x8+212
0x66B6	0x7F01 ;oled_control_font5x8+214
0x66B8	0x1408 ;oled_control_font5x8+216
0x66BA	0x4122 ;oled_control_font5x8+218
0x66BC	0x407F ;oled_control_font5x8+220
0x66BE	0x4040 ;oled_control_font5x8+222
0x66C0	0x7F40 ;oled_control_font5x8+224
0x66C2	0x0402 ;oled_control_font5x8+226
0x66C4	0x7F02 ;oled_control_font5x8+228
0x66C6	0x047F ;oled_control_font5x8+230
0x66C8	0x1008 ;oled_control_font5x8+232
0x66CA	0x3E7F ;oled_control_font5x8+234
0x66CC	0x4141 ;oled_control_font5x8+236
0x66CE	0x3E41 ;oled_control_font5x8+238
0x66D0	0x097F ;oled_control_font5x8+240
0x66D2	0x0909 ;oled_control_font5x8+242
0x66D4	0x3E06 ;oled_control_font5x8+244
0x66D6	0x5141 ;oled_control_font5x8+246
0x66D8	0x5E21 ;oled_control_font5x8+248
0x66DA	0x097F ;oled_control_font5x8+250
0x66DC	0x2919 ;oled_control_font5x8+252
0x66DE	0x4646 ;oled_control_font5x8+254
0x66E0	0x4949 ;oled_control_font5x8+256
0x66E2	0x3149 ;oled_control_font5x8+258
0x66E4	0x0101 ;oled_control_font5x8+260
0x66E6	0x017F ;oled_control_font5x8+262
0x66E8	0x3F01 ;oled_control_font5x8+264
0x66EA	0x4040 ;oled_control_font5x8+266
0x66EC	0x3F40 ;oled_control_font5x8+268
0x66EE	0x201F ;oled_control_font5x8+270
0x66F0	0x2040 ;oled_control_font5x8+272
0x66F2	0x7F1F ;oled_control_font5x8+274
0x66F4	0x1820 ;oled_control_font5x8+276
0x66F6	0x7F20 ;oled_control_font5x8+278
0x66F8	0x1463 ;oled_control_font5x8+280
0x66FA	0x1408 ;oled_control_font5x8+282
0x66FC	0x0363 ;oled_control_font5x8+284
0x66FE	0x7804 ;oled_control_font5x8+286
0x6700	0x0304 ;oled_control_font5x8+288
0x6702	0x5161 ;oled_control_font5x8+290
0x6704	0x4549 ;oled_control_font5x8+292
0x6706	0x0043 ;oled_control_font5x8+294
0x6708	0x7F00 ;oled_control_font5x8+296
0x670A	0x4141 ;oled_control_font5x8+298
0x670C	0x0402 ;oled_control_font5x8+300
0x670E	0x1008 ;oled_control_font5x8+302
0x6710	0x4120 ;oled_control_font5x8+304
0x6712	0x7F41 ;oled_control_font5x8+306
0x6714	0x0000 ;oled_control_font5x8+308
0x6716	0x0204 ;oled_control_font5x8+310
0x6718	0x0201 ;oled_control_font5x8+312
0x671A	0x4004 ;oled_control_font5x8+314
0x671C	0x4040 ;oled_control_font5x8+316
0x671E	0x4040 ;oled_control_font5x8+318
0x6720	0x0100 ;oled_control_font5x8+320
0x6722	0x0402 ;oled_control_font5x8+322
0x6724	0x2000 ;oled_control_font5x8+324
0x6726	0x5454 ;oled_control_font5x8+326
0x6728	0x7854 ;oled_control_font5x8+328
0x672A	0x487F ;oled_control_font5x8+330
0x672C	0x4444 ;oled_control_font5x8+332
0x672E	0x3838 ;oled_control_font5x8+334
0x6730	0x4444 ;oled_control_font5x8+336
0x6732	0x2044 ;oled_control_font5x8+338
0x6734	0x4438 ;oled_control_font5x8+340
0x6736	0x4844 ;oled_control_font5x8+342
0x6738	0x387F ;oled_control_font5x8+344
0x673A	0x5454 ;oled_control_font5x8+346
0x673C	0x1854 ;oled_control_font5x8+348
0x673E	0x7E08 ;oled_control_font5x8+350
0x6740	0x0109 ;oled_control_font5x8+352
0x6742	0x0802 ;oled_control_font5x8+354
0x6744	0x5414 ;oled_control_font5x8+356
0x6746	0x3C54 ;oled_control_font5x8+358
0x6748	0x087F ;oled_control_font5x8+360
0x674A	0x0404 ;oled_control_font5x8+362
0x674C	0x0078 ;oled_control_font5x8+364
0x674E	0x7D44 ;oled_control_font5x8+366
0x6750	0x0040 ;oled_control_font5x8+368
0x6752	0x4020 ;oled_control_font5x8+370
0x6754	0x3D44 ;oled_control_font5x8+372
0x6756	0x0000 ;oled_control_font5x8+374
0x6758	0x107F ;oled_control_font5x8+376
0x675A	0x4428 ;oled_control_font5x8+378
0x675C	0x4100 ;oled_control_font5x8+380
0x675E	0x407F ;oled_control_font5x8+382
0x6760	0x7C00 ;oled_control_font5x8+384
0x6762	0x1804 ;oled_control_font5x8+386
0x6764	0x7804 ;oled_control_font5x8+388
0x6766	0x087C ;oled_control_font5x8+390
0x6768	0x0404 ;oled_control_font5x8+392
0x676A	0x3878 ;oled_control_font5x8+394
0x676C	0x4444 ;oled_control_font5x8+396
0x676E	0x3844 ;oled_control_font5x8+398
0x6770	0x147C ;oled_control_font5x8+400
0x6772	0x1414 ;oled_control_font5x8+402
0x6774	0x0808 ;oled_control_font5x8+404
0x6776	0x1414 ;oled_control_font5x8+406
0x6778	0x7C18 ;oled_control_font5x8+408
0x677A	0x087C ;oled_control_font5x8+410
0x677C	0x0404 ;oled_control_font5x8+412
0x677E	0x4808 ;oled_control_font5x8+414
0x6780	0x5454 ;oled_control_font5x8+416
0x6782	0x2054 ;oled_control_font5x8+418
0x6784	0x3F04 ;oled_control_font5x8+420
0x6786	0x4044 ;oled_control_font5x8+422
0x6788	0x3C20 ;oled_control_font5x8+424
0x678A	0x4040 ;oled_control_font5x8+426
0x678C	0x7C20 ;oled_control_font5x8+428
0x678E	0x201C ;oled_control_font5x8+430
0x6790	0x2040 ;oled_control_font5x8+432
0x6792	0x3C1C ;oled_control_font5x8+434
0x6794	0x3040 ;oled_control_font5x8+436
0x6796	0x3C40 ;oled_control_font5x8+438
0x6798	0x2844 ;oled_control_font5x8+440
0x679A	0x2810 ;oled_control_font5x8+442
0x679C	0x0C44 ;oled_control_font5x8+444
0x679E	0x5050 ;oled_control_font5x8+446
0x67A0	0x3C50 ;oled_control_font5x8+448
0x67A2	0x6444 ;oled_control_font5x8+450
0x67A4	0x4C54 ;oled_control_font5x8+452
0x67A6	0x0044 ;oled_control_font5x8+454
0x67A8	0x3608 ;oled_control_font5x8+456
0x67AA	0x0041 ;oled_control_font5x8+458
0x67AC	0x0000 ;oled_control_font5x8+460
0x67AE	0x007F ;oled_control_font5x8+462
0x67B0	0x0000 ;oled_control_font5x8+464
0x67B2	0x3641 ;oled_control_font5x8+466
0x67B4	0x0008 ;oled_control_font5x8+468
0x67B6	0x0808 ;oled_control_font5x8+470
0x67B8	0x1C2A ;oled_control_font5x8+472
0x67BA	0x0808 ;oled_control_font5x8+474
0x67BC	0x2A1C ;oled_control_font5x8+476
0x67BE	0x0808 ;oled_control_font5x8+478
; end of oled_control_font5x8
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C     [110]    _Soft_I2C_Write
0x008A      [58]    _Soft_I2C_Start
0x00C4      [14]    _RES032
0x00D2      [46]    _Soft_I2C_Stop
0x0100     [134]    _set_addressing
0x0186      [26]    _SETFUN32
0x01A0       [8]    _FIXSIGN32
0x01A8      [54]    _Div_16X16_U
0x01DE      [24]    _SETFOV32
0x01F6      [28]    _SETIOV3224
0x0212     [146]    _WordToStr
0x02A4     [798]    _oled_wr_str
0x05C2      [10]    _Delay_22us
0x05CC     [114]    _NRM3232
0x063E     [156]    _led_send
0x06DA      [40]    _word2double
0x0702      [82]    _Mul_32x32_U
0x0754     [484]    _NRM4032
0x0938      [24]    _COMFREM
0x0950     [600]    _SDIV3232L
0x0BA8      [46]    _ADC_Get_Sample
0x0BD6      [64]    _int2double
0x0C16     [294]    _Mul_32x32_FP
0x0D3C     [212]    _double2int
0x0E10      [18]    _Delay_500us
0x0E22     [220]    _IntToStr
0x0EFE     [246]    _led_wr_str
0x0FF4       [8]    _SETFDZ32
0x0FFC      [36]    _send_command
0x1020    [1122]    _lcd_ind
0x1482     [112]    _Button
0x14F2     [192]    _VDelay_ms
0x15B2     [206]    _Compare_Double
0x1680      [86]    _get_forward
0x16D6      [40]    _get_reverse
0x16FE    [1062]    _Add_32x32_FP
0x1B24      [68]    _longint2double
0x1B68     [350]    _Div_32x32_S
0x1CC6      [30]    _byte2double
0x1CE4     [380]    _Div_32x32_FP
0x1E60      [80]    _Mul_16X16_U
0x1EB0     [402]    _correction
0x2042      [50]    _dysp_on
0x2074     [730]    _get_pwr
0x234E     [368]    _lcd_swr
0x24BE     [106]    _set_cap
0x2528      [88]    _button_delay
0x2580    [2290]    _show_pwr
0x2E72     [168]    _set_ind
0x2F1A      [62]    _EEPROM_Write
0x2F58      [26]    _set_sw
0x2F72      [34]    _atu_reset
0x2F94    [1574]    _lcd_pwr
0x35BA     [382]    _show_reset
0x3738      [88]    _Div_16x16_S_L
0x3790     [198]    _Div_16x16_S
0x3856     [324]    _get_swr
0x399A     [330]    _coarse_cap
0x3AE4     [386]    _sharp_ind
0x3C66     [350]    _coarse_tune
0x3DC4     [386]    _sharp_cap
0x3F46     [592]    _sub_tune
0x4196     [382]    _tune
0x4314     [858]    _oled_init
0x466E      [30]    _Div_8X8_U
0x468C     [116]    _Soft_I2C_Read
0x4700      [16]    _Get_Fosc_kHz
0x4710      [16]    _EEPROM_Read
0x4720      [40]    _ADC_Init
0x4748      [42]    _Bcd2Dec
0x4772     [882]    _lcd_prep
0x4AE4     [416]    _btn_push
0x4C84     [728]    _button_proc_test
0x4F5C      [50]    _Soft_I2C_Init
0x4F8E      [48]    _pic_init
0x4FBE      [16]    ___CC2DW
0x4FCE    [1188]    _cells_init
0x5472      [48]    _dysp_off
0x54A2     [476]    _Soft_UART_Init
0x567E     [500]    _Test_init
0x5872     [118]    _read_i2c_inputs
0x58E8     [164]    _load_settings
0x598C      [78]    _Dec2Bcd
0x59DA    [1158]    _button_proc
0x5E60     [240]    _led_init
0x5F50     [140]    _show_loss
0x5FDC     [864]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    R1
0x0001       [1]    Soft_I2C_Write_i_L0
0x0001       [1]    Soft_I2C_Read_i_L0
0x0001       [1]    __Lib_Conversions_Adjust_Hex_tmp_L0
0x0002       [1]    R2
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    R5
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [3]    ?lstr5_main
0x0018      [17]    ?lstr4_main
0x0029       [3]    ?lstr3_main
0x002C       [1]    _lcd_prep_short
0x002D       [9]    ?lstr54_main
0x0036       [9]    ?lstr53_main
0x003F       [9]    ?lstr52_main
0x0048       [6]    ?lstr2_main
0x004E       [1]    main_P_High
0x004F       [1]    main_K_Mult
0x0050       [1]    main_D_correction
0x0051      [11]    ?lstr1_main
0x005C       [1]    _Test
0x005D       [1]    _Restart
0x005E       [9]    ?lstr55_main
0x0067       [1]    _bypas
0x0068       [2]    ?lstr9_main
0x006A       [2]    ?lstr8_main
0x006C      [10]    ?lstr89_main
0x0076      [10]    ?lstr92_main
0x0080      [10]    ?lstr91_main
0x008A      [10]    ?lstr90_main
0x0094       [2]    ?lstr7_main
0x0096       [8]    ?lstr58_main
0x009E       [9]    ?lstr57_main
0x00A7       [9]    ?lstr56_main
0x00B0       [8]    ?lstr59_main
0x00B8       [2]    ?lstr6_main
0x00BA       [1]    _L
0x00BB       [8]    ?lstr60_main
0x00C3       [1]    _Auto
0x00C4       [4]    _dysp_cnt_mult
0x00C8       [1]    _Dysp_delay
0x00C9       [1]    _Soft_tune
0x00CA       [9]    ?lstr62_main
0x00D3       [9]    ?lstr61_main
0x00DC       [1]    main_Overload
0x00DD       [2]    _dysp_cnt
0x00DF       [3]    ?lstr87_main
0x00E2       [3]    ?lstr86_main
0x00E5       [3]    ?lstr85_main
0x00E8       [2]    ?lstr88_main
0x00EA       [2]    _Power
0x00EC       [1]    _but
0x00ED       [9]    ?lstr63_main
0x00F6       [9]    ?lstr74_main
0x00FF       [9]    ?lstr73_main
0x0108       [9]    ?lstr72_main
0x0111       [9]    ?lstr75_main
0x011A       [5]    ?lstr51_main
0x011F       [5]    ?lstr50_main
0x0124       [9]    ?lstr76_main
0x012D       [9]    ?lstr71_main
0x0136       [9]    ?lstr66_main
0x013F       [9]    ?lstr65_main
0x0148       [9]    ?lstr64_main
0x0151       [9]    ?lstr67_main
0x015A       [9]    ?lstr70_main
0x0163       [9]    ?lstr69_main
0x016C       [9]    ?lstr68_main
0x0175       [2]    ?lstr49_main
0x0177       [9]    ?lstr48_main
0x0180      [12]    ?lstr43_main
0x018C       [9]    ?lstr42_main
0x0195      [10]    ?lstr41_main
0x019F       [9]    ?lstr44_main
0x01A8       [9]    ?lstr47_main
0x01B1       [9]    ?lstr46_main
0x01BA      [11]    ?lstr45_main
0x01C5       [1]    _vref_mask
0x01C6       [2]    ?lstr14_main
0x01C8       [2]    ?lstr13_main
0x01CA       [2]    ?lstr12_main
0x01CC       [2]    ?lstr15_main
0x01CE       [2]    ?lstr18_main
0x01D0       [2]    ?lstr17_main
0x01D2       [2]    ?lstr16_main
0x01D4       [2]    ?lstr11_main
0x01D6       [1]    _cap_mem
0x01D7       [2]    ?lstr94_main
0x01D9       [2]    ?lstr93_main
0x01DB       [1]    _ind_mem
0x01DC       [2]    ?lstr10_main
0x01DE       [1]    _Auto_mem
0x01DF       [1]    _SW_mem
0x01E0       [2]    ?lstr19_main
0x01E2       [9]    ?lstr36_main
0x01EB      [11]    ?lstr35_main
0x01F6       [9]    ?lstr34_main
0x01FF       [9]    ?lstr37_main
0x0208       [8]    ?lstr40_main
0x0210       [2]    ?lstr39_main
0x0212       [9]    ?lstr38_main
0x021B      [11]    ?lstr33_main
0x0226       [8]    ?lstr28_main
0x022E       [2]    ?lstr21_main
0x0230       [2]    ?lstr20_main
0x0232      [10]    ?lstr29_main
0x023C       [9]    ?lstr32_main
0x0245      [12]    ?lstr31_main
0x0251       [9]    ?lstr30_main
0x025A       [1]    _band_160m
0x025B       [1]    main_Loss_ind
0x025C       [1]    main_L_invert
0x025D       [1]    main_cap
0x025E       [2]    _SWR_fixed_old
0x0260       [9]    ?lstr23_main
0x0269       [9]    ?lstr22_main
0x0272       [1]    _mem_offset
0x0273       [1]    main_SW
0x0274       [1]    _Loss_mode
0x0275       [1]    main_ind
0x0276       [1]    _rready
0x0277       [9]    ?lstr25_main
0x0280       [9]    ?lstr24_main
0x0289       [2]    _SWR_old
0x028B       [1]    _p_cnt
0x028C       [2]    _Power_old
0x028E       [3]    ?lstr79_main
0x0291       [3]    ?lstr78_main
0x0294       [3]    ?lstr77_main
0x0297       [3]    ?lstr84_main
0x029A       [3]    ?lstr83_main
0x029D       [2]    _C8_value
0x029F       [2]    ?lstr82_main
0x02A1       [3]    ?lstr81_main
0x02A4       [3]    ?lstr80_main
0x02A7       [1]    main_C_mult
0x02A8       [1]    main_step_cap
0x02A9       [5]    ?lstr26_main
0x02AE       [1]    main_C_linear
0x02AF       [5]    ?lstr27_main
0x02B4       [1]    main_C_q
0x02B5       [1]    main_L_q
0x02B6       [1]    main_L_mult
0x02B7       [1]    main_step_ind
0x02B8       [1]    main_L_linear
0x02B9       [1]    _Fid_loss
0x02BA       [2]    _Auto_delta
0x02BC       [1]    oled_control_led_type
0x02BD       [1]    oled_control_RW
0x02BE       [1]    oled_control_LED
0x02BF       [1]    oled_control_RS
0x02C0       [1]    oled_control_E
0x02C1       [1]    __Lib_SoftUART__tx_mask1
0x02C2       [1]    __Lib_SoftUART__rx_mask0
0x02C3       [1]    __Lib_SoftUART__rx_mask1
0x02C4       [1]    __Lib_SoftUART__tx_mask0
0x02C5       [1]    __Lib_SoftUART_HalfBit
0x02C6       [1]    __Lib_SoftUART_FullBit
0x02C7       [1]    __Lib_SoftUART_InvertMaskRd
0x02C8       [2]    __Lib_SoftUART__port_addr
0x02CA       [1]    oled_control_shift_line
0x02CB       [1]    oled_control_oled_shift
0x02CC       [1]    oled_control_led_addr
0x02CD       [4]    _ADC_Get_Sample_Ptr
0x02D1       [2]    main_Rel_Del
0x02D3       [2]    _swr_a
0x02D5       [2]    _PWR
0x02D7       [1]    _type
0x02D8       [2]    _SWR
0x02DA       [2]    main_min_for_start
0x02DC       [2]    _P_max
0x02DE       [2]    main_max_for_start
0x02E0       [7]    _work_str_2
0x02E7       [7]    _work_str
0x02EE       [2]    _Ind7
0x02F0       [2]    _Ind6
0x02F2       [2]    _Ind2
0x02F4       [2]    _Ind1
0x02F6       [2]    _work_int
0x02F8       [2]    _Ind5
0x02FA       [2]    _Ind4
0x02FC       [2]    _Ind3
0x02FE       [2]    _Cap7
0x0300       [1]    main_offset_L0
0x0301       [2]    _Cap6
0x0303       [2]    _Cap5
0x0305       [2]    _Cap4
0x0307       [2]    _Cap3
0x0309       [2]    _Cap2
0x030B       [2]    _Cap1
0x030D       [2]    main_max_swr
0x030F       [1]    FARG_Dec2Bcd_decnum
0x030F       [2]    FARG_Soft_UART_Init_port
0x030F       [1]    read_i2c_inputs__status_L0
0x030F       [2]    FLOC__cells_init
0x0310       [1]    Dec2Bcd_tmp_L0
0x0311       [1]    FARG_Soft_UART_Init_rx_pin
0x0312       [1]    FARG_Soft_UART_Init_tx_pin
0x0313       [4]    FARG_Soft_UART_Init_baud_rate
0x0317       [1]    FARG_Soft_UART_Init_inverted
0x0318       [4]    Soft_UART_Init_q1_L0
0x031C       [4]    Soft_UART_Init_q2_L0
0x0320       [2]    Soft_UART_Init_temp_word_L0
0x0322       [4]    FLOC__Soft_UART_Init
0x0326       [1]    Soft_I2C_Read_readByte_L0
0x0326       [1]    FARG_EEPROM_Read_address
0x0326       [1]    oled_init_i_L0
0x0326       [1]    FARG_Bcd2Dec_bcdnum
0x0327       [1]    oled_init_r_L0
0x0328       [2]    sub_tune_swr_mem_L0
0x032A       [2]    sub_tune_ind_mem_L0
0x032C       [2]    sub_tune_cap_mem_L0
0x032E       [1]    sharp_cap_range_L0
0x032E       [1]    coarse_tune_count_L0
0x032E       [1]    sharp_ind_range_L0
0x032F       [1]    sharp_ind_count_L0
0x032F       [1]    coarse_tune_mem_cap_L0
0x032F       [1]    sharp_cap_count_L0
0x0330       [1]    sharp_cap_max_range_L0
0x0330       [1]    sharp_ind_max_range_L0
0x0330       [1]    coarse_tune_mem_step_cap_L0
0x0331       [2]    coarse_tune_min_swr_L0
0x0331       [1]    sharp_ind_min_range_L0
0x0331       [1]    sharp_cap_min_range_L0
0x0332       [2]    sharp_ind_min_SWR_L0
0x0332       [2]    sharp_cap_min_swr_L0
0x0333       [1]    coarse_tune_step_L0
0x0334       [1]    coarse_cap_count_L0
0x0335       [2]    coarse_cap_min_swr_L0
0x0337       [1]    coarse_cap_step_L0
0x0338       [1]    FLOC__get_swr
0x0339       [1]    lcd_pwr_peak_cnt_L0
0x0339       [1]    FARG_EEPROM_Write_address
0x0339       [1]    FARG_set_sw_SW
0x033A       [2]    lcd_pwr_delta_L0
0x033A       [1]    FARG_EEPROM_Write_data_
0x033C       [1]    lcd_pwr_cnt_L0
0x033D       [2]    lcd_pwr_p_L0
0x033F       [2]    lcd_pwr_SWR_fixed_L0
0x0341       [1]    FLOC__button_delay
0x0341       [4]    get_pwr_Forward_L0
0x0341       [2]    FARG_show_pwr_Power
0x0341       [2]    FARG_lcd_swr_swr
0x0341       [1]    FARG_set_cap_Cap
0x0341       [1]    FARG_set_ind_Ind
0x0343       [2]    FARG_show_pwr_SWR
0x0345       [4]    get_pwr_Reverse_L0
0x0345       [4]    show_pwr_a_L0
0x0349       [4]    get_pwr_p_L0
0x0349       [4]    show_pwr_b_L0
0x034D       [2]    show_pwr_p_ant_L0
0x034F       [4]    show_pwr_eff_L0
0x0353      [12]    FLOC__show_pwr
0x035F       [2]    FARG_VDelay_ms_Time_ms
0x035F       [2]    FARG_correction_input
0x035F       [2]    get_forward_Forward_L0
0x035F       [1]    lcd_ind_column_L0
0x035F       [2]    FARG_Button_port
0x035F       [1]    FARG_send_command_oled_command
0x0361       [1]    FARG_Button_pin
0x0361       [4]    VDelay_ms_NumberOfCyc_L0
0x0362       [1]    FARG_Button_time_ms
0x0363       [1]    FARG_Button_active_state
0x0364       [1]    Button_pMask_L0
0x0365       [1]    Button_rslt_L0
0x0366       [1]    FARG_ADC_Get_Sample_channel
0x0366       [1]    FARG_led_wr_str_col
0x0366       [2]    FARG_IntToStr_input
0x0367       [1]    FARG_led_wr_str_pos
0x0368       [2]    FARG_IntToStr_output
0x0368       [2]    FARG_led_wr_str_str
0x036A       [1]    FARG_led_wr_str_leng
0x036A       [2]    IntToStr_i_L0
0x036B       [1]    led_wr_str_i_L0
0x036C       [2]    IntToStr_negative_L0
0x036E       [2]    IntToStr_inword_L0
0x0370       [1]    FARG_led_send_nible
0x0370       [1]    FARG_oled_wr_str_col
0x0370       [2]    FARG_WordToStr_input
0x0371       [1]    FARG_oled_wr_str_page
0x0371       [1]    led_send_sdata_L0
0x0372       [2]    FARG_oled_wr_str_str
0x0372       [2]    FARG_WordToStr_output
0x0374       [1]    WordToStr_len_L0
0x0374       [1]    FARG_oled_wr_str_leng
0x0375       [2]    FLOC__WordToStr
0x0375       [1]    oled_wr_str_i_L0
0x0376       [1]    oled_wr_str_h_L0
0x0377       [1]    oled_wr_str_g_L0
0x0378       [1]    oled_wr_str_w1_L0
0x0379       [1]    oled_wr_str_w2_L0
0x037A       [1]    FARG_set_addressing_pagenum
0x037B       [1]    FARG_set_addressing_c_start
0x037C       [1]    set_addressing_a_L0
0x037D       [1]    set_addressing_b_L0
0x037E       [1]    set_addressing_c_L0
0x037F       [1]    FARG_Soft_I2C_Write_d
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F89       [0]    Cap_1820
0x0F89       [0]    Ind_45
0x0F89       [0]    LATA2_bit
0x0F89       [0]    Ind_22
0x0F89       [0]    LATA7_bit
0x0F89       [0]    LATA5_bit
0x0F89       [0]    LATA6_bit
0x0F89       [0]    LATA3_bit
0x0F89       [0]    n_Tx
0x0F89       [0]    Ind_011
0x0F89       [0]    Ind_045
0x0F89       [1]    LATA
0x0F89       [0]    LATA4_bit
0x0F8A       [0]    Ind_005
0x0F8A       [0]    Soft_I2C_Scl
0x0F8A       [0]    LATB4_bit
0x0F8A       [1]    LATB
0x0F8A       [0]    LATB6_bit
0x0F8A       [0]    LATB7_bit
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    Ind_1
0x0F8A       [0]    Soft_I2C_Sda
0x0F8A       [0]    Ind_022
0x0F8A       [0]    LATB3_bit
0x0F8B       [0]    LATC0_bit
0x0F8B       [1]    LATC
0x0F8B       [0]    LATC1_bit
0x0F8B       [0]    LATC3_bit
0x0F8B       [0]    LATC2_bit
0x0F8B       [0]    Cap_470
0x0F8B       [0]    Cap_1000
0x0F8B       [0]    Cap_100
0x0F8B       [0]    Cap_220
0x0F8B       [0]    LATC6_bit
0x0F8B       [0]    LATC7_bit
0x0F8B       [0]    Cap_sw
0x0F8B       [0]    LATC5_bit
0x0F8B       [0]    Cap_22
0x0F8B       [0]    LATC4_bit
0x0F8B       [0]    Cap_10
0x0F8B       [0]    Cap_47
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F93       [0]    Soft_I2C_Scl_Direction
0x0F93       [0]    Soft_I2C_Sda_Direction
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB6_bit
0x0F94       [1]    TRISC
0x0F9B       [0]    PLLEN_bit
0x0FA1       [1]    PIR2
0x0FA6       [1]    EECON1
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FB4       [1]    CMCON
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FD0       [1]    RCON
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FE9       [2]    FSR0
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FEF       [1]    INDF0
0x0FF1       [0]    RBPU_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    GIE_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [3]    TBLPTR
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x633C       [3]    ?ICS?lstr5_main
0x633F      [17]    ?ICS?lstr4_main
0x6350       [3]    ?ICS?lstr3_main
0x6353       [1]    ?ICS_lcd_prep_short
0x6354       [9]    ?ICS?lstr54_main
0x635D       [9]    ?ICS?lstr53_main
0x6366       [9]    ?ICS?lstr52_main
0x636F       [6]    ?ICS?lstr2_main
0x6375       [1]    ?ICSmain_P_High
0x6376       [1]    ?ICSmain_K_Mult
0x6377       [1]    ?ICSmain_D_correction
0x6378      [11]    ?ICS?lstr1_main
0x6383       [1]    ?ICS_Test
0x6384       [1]    ?ICS_Restart
0x6385       [9]    ?ICS?lstr55_main
0x638E       [1]    ?ICS_bypas
0x638F       [2]    ?ICS?lstr9_main
0x6391       [2]    ?ICS?lstr8_main
0x6393      [10]    ?ICS?lstr89_main
0x639D      [10]    ?ICS?lstr92_main
0x63A7      [10]    ?ICS?lstr91_main
0x63B1      [10]    ?ICS?lstr90_main
0x63BB       [2]    ?ICS?lstr7_main
0x63BD       [8]    ?ICS?lstr58_main
0x63C5       [9]    ?ICS?lstr57_main
0x63CE       [9]    ?ICS?lstr56_main
0x63D7       [8]    ?ICS?lstr59_main
0x63DF       [2]    ?ICS?lstr6_main
0x63E1       [1]    ?ICS_L
0x63E2       [8]    ?ICS?lstr60_main
0x63EA       [1]    ?ICS_Auto
0x63EB       [4]    ?ICS_dysp_cnt_mult
0x63EF       [1]    ?ICS_Dysp_delay
0x63F0       [1]    ?ICS_Soft_tune
0x63F1       [9]    ?ICS?lstr62_main
0x63FA       [9]    ?ICS?lstr61_main
0x6403       [1]    ?ICSmain_Overload
0x6404       [2]    ?ICS_dysp_cnt
0x6406       [3]    ?ICS?lstr87_main
0x6409       [3]    ?ICS?lstr86_main
0x640C       [3]    ?ICS?lstr85_main
0x640F       [2]    ?ICS?lstr88_main
0x6411       [2]    ?ICS_Power
0x6413       [1]    ?ICS_but
0x6414       [9]    ?ICS?lstr63_main
0x641D       [9]    ?ICS?lstr74_main
0x6426       [9]    ?ICS?lstr73_main
0x642F       [9]    ?ICS?lstr72_main
0x6438       [9]    ?ICS?lstr75_main
0x6441       [5]    ?ICS?lstr51_main
0x6446       [5]    ?ICS?lstr50_main
0x644B       [9]    ?ICS?lstr76_main
0x6454       [9]    ?ICS?lstr71_main
0x645D       [9]    ?ICS?lstr66_main
0x6466       [9]    ?ICS?lstr65_main
0x646F       [9]    ?ICS?lstr64_main
0x6478       [9]    ?ICS?lstr67_main
0x6481       [9]    ?ICS?lstr70_main
0x648A       [9]    ?ICS?lstr69_main
0x6493       [9]    ?ICS?lstr68_main
0x649C       [2]    ?ICS?lstr49_main
0x649E       [9]    ?ICS?lstr48_main
0x64A7      [12]    ?ICS?lstr43_main
0x64B3       [9]    ?ICS?lstr42_main
0x64BC      [10]    ?ICS?lstr41_main
0x64C6       [9]    ?ICS?lstr44_main
0x64CF       [9]    ?ICS?lstr47_main
0x64D8       [9]    ?ICS?lstr46_main
0x64E1      [11]    ?ICS?lstr45_main
0x64EC       [1]    ?ICS_vref_mask
0x64ED       [2]    ?ICS?lstr14_main
0x64EF       [2]    ?ICS?lstr13_main
0x64F1       [2]    ?ICS?lstr12_main
0x64F3       [2]    ?ICS?lstr15_main
0x64F5       [2]    ?ICS?lstr18_main
0x64F7       [2]    ?ICS?lstr17_main
0x64F9       [2]    ?ICS?lstr16_main
0x64FB       [2]    ?ICS?lstr11_main
0x64FD       [1]    ?ICS_cap_mem
0x64FE       [2]    ?ICS?lstr94_main
0x6500       [2]    ?ICS?lstr93_main
0x6502       [1]    ?ICS_ind_mem
0x6503       [2]    ?ICS?lstr10_main
0x6505       [1]    ?ICS_Auto_mem
0x6506       [1]    ?ICS_SW_mem
0x6507       [2]    ?ICS?lstr19_main
0x6509       [9]    ?ICS?lstr36_main
0x6512      [11]    ?ICS?lstr35_main
0x651D       [9]    ?ICS?lstr34_main
0x6526       [9]    ?ICS?lstr37_main
0x652F       [8]    ?ICS?lstr40_main
0x6537       [2]    ?ICS?lstr39_main
0x6539       [9]    ?ICS?lstr38_main
0x6542      [11]    ?ICS?lstr33_main
0x654D       [8]    ?ICS?lstr28_main
0x6555       [2]    ?ICS?lstr21_main
0x6557       [2]    ?ICS?lstr20_main
0x6559      [10]    ?ICS?lstr29_main
0x6563       [9]    ?ICS?lstr32_main
0x656C      [12]    ?ICS?lstr31_main
0x6578       [9]    ?ICS?lstr30_main
0x6581       [1]    ?ICS_band_160m
0x6582       [1]    ?ICSmain_Loss_ind
0x6583       [1]    ?ICSmain_L_invert
0x6584       [1]    ?ICSmain_cap
0x6585       [2]    ?ICS_SWR_fixed_old
0x6587       [9]    ?ICS?lstr23_main
0x6590       [9]    ?ICS?lstr22_main
0x6599       [1]    ?ICS_mem_offset
0x659A       [1]    ?ICSmain_SW
0x659B       [1]    ?ICS_Loss_mode
0x659C       [1]    ?ICSmain_ind
0x659D       [1]    ?ICS_rready
0x659E       [9]    ?ICS?lstr25_main
0x65A7       [9]    ?ICS?lstr24_main
0x65B0       [2]    ?ICS_SWR_old
0x65B2       [1]    ?ICS_p_cnt
0x65B3       [2]    ?ICS_Power_old
0x65B5       [3]    ?ICS?lstr79_main
0x65B8       [3]    ?ICS?lstr78_main
0x65BB       [3]    ?ICS?lstr77_main
0x65BE       [3]    ?ICS?lstr84_main
0x65C1       [3]    ?ICS?lstr83_main
0x65C4       [2]    ?ICS_C8_value
0x65C6       [2]    ?ICS?lstr82_main
0x65C8       [3]    ?ICS?lstr81_main
0x65CB       [3]    ?ICS?lstr80_main
0x65CE       [1]    ?ICSmain_C_mult
0x65CF       [1]    ?ICSmain_step_cap
0x65D0       [5]    ?ICS?lstr26_main
0x65D5       [1]    ?ICSmain_C_linear
0x65D6       [5]    ?ICS?lstr27_main
0x65DB       [1]    ?ICSmain_C_q
0x65DC       [1]    ?ICSmain_L_q
0x65DD       [1]    ?ICSmain_L_mult
0x65DE       [1]    ?ICSmain_step_ind
0x65DF       [1]    ?ICSmain_L_linear
0x65E0     [480]    oled_control_font5x8
